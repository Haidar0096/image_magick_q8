// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: type = lint

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings for `src/ffi_gen/image_magick/include/MagickWand/MagickWand.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config magick_wand_bindings_ffigen.yaml`.
///
class MagickWandFfiBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  MagickWandFfiBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  MagickWandFfiBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<uintptr_t> ___security_cookie =
      _lookup<uintptr_t>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt,
              uintptr_t)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<FILE> __acrt_iob_func(
    int _Ix,
  ) {
    return ___acrt_iob_func(
      _Ix,
    );
  }

  late final ___acrt_iob_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.UnsignedInt)>>(
          '__acrt_iob_func');
  late final ___acrt_iob_func =
      ___acrt_iob_funcPtr.asFunction<ffi.Pointer<FILE> Function(int)>();

  int fgetwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetwc(
      _Stream,
    );
  }

  late final _fgetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('fgetwc');
  late final _fgetwc = _fgetwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetwchar() {
    return __fgetwchar();
  }

  late final __fgetwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('_fgetwchar');
  late final __fgetwchar = __fgetwcharPtr.asFunction<int Function()>();

  int fputwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputwc(
      _Character,
      _Stream,
    );
  }

  late final _fputwcPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>(
      'fputwc');
  late final _fputwc =
      _fputwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fputwchar(
    int _Character,
  ) {
    return __fputwchar(
      _Character,
    );
  }

  late final __fputwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.WChar)>>('_fputwchar');
  late final __fputwchar = __fputwcharPtr.asFunction<int Function(int)>();

  int getwc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getwc(
      _Stream,
    );
  }

  late final _getwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>('getwc');
  late final _getwc = _getwcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getwchar() {
    return _getwchar();
  }

  late final _getwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function()>>('getwchar');
  late final _getwchar = _getwcharPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.WChar> fgetws(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetws(
      _Buffer,
      _BufferCount,
      _Stream,
    );
  }

  late final _fgetwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Int, ffi.Pointer<FILE>)>>('fgetws');
  late final _fgetws = _fgetwsPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, int, ffi.Pointer<FILE>)>();

  int fputws(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputws(
      _Buffer,
      _Stream,
    );
  }

  late final _fputwsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>>('fputws');
  late final _fputws = _fputwsPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.WChar> _getws_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __getws_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __getws_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('_getws_s');
  late final __getws_s = __getws_sPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>, int)>();

  int putwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putwc(
      _Character,
      _Stream,
    );
  }

  late final _putwcPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>(
      'putwc');
  late final _putwc =
      _putwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putwchar(
    int _Character,
  ) {
    return _putwchar(
      _Character,
    );
  }

  late final _putwcharPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.WChar)>>('putwchar');
  late final _putwchar = _putwcharPtr.asFunction<int Function(int)>();

  int _putws(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __putws(
      _Buffer,
    );
  }

  late final __putwsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_putws');
  late final __putws =
      __putwsPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int ungetwc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetwc(
      _Character,
      _Stream,
    );
  }

  late final _ungetwcPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          'ungetwc');
  late final _ungetwc =
      _ungetwcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _wfdopen(
    int _FileHandle,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __wfdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.WChar>)>>('_wfdopen');
  late final __wfdopen = __wfdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<FILE> _wfopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfopen(
      _FileName,
      _Mode,
    );
  }

  late final __wfopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wfopen');
  late final __wfopen = __wfopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wfopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wfopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final __wfopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wfopen_s');
  late final __wfopen_s = __wfopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<FILE> _wfreopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen(
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>>('_wfreopen');
  late final __wfreopen = __wfreopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>();

  int _wfreopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return __wfreopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final __wfreopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<FILE>)>>('_wfreopen_s');
  late final __wfreopen_s = __wfreopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _wfsopen(
    ffi.Pointer<ffi.WChar> _FileName,
    ffi.Pointer<ffi.WChar> _Mode,
    int _ShFlag,
  ) {
    return __wfsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __wfsopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Int)>>('_wfsopen');
  late final __wfsopen = __wfsopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  void _wperror(
    ffi.Pointer<ffi.WChar> _ErrorMessage,
  ) {
    return __wperror(
      _ErrorMessage,
    );
  }

  late final __wperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
          '_wperror');
  late final __wperror =
      __wperrorPtr.asFunction<void Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<FILE> _wpopen(
    ffi.Pointer<ffi.WChar> _Command,
    ffi.Pointer<ffi.WChar> _Mode,
  ) {
    return __wpopen(
      _Command,
      _Mode,
    );
  }

  late final __wpopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wpopen');
  late final __wpopen = __wpopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wremove(
    ffi.Pointer<ffi.WChar> _FileName,
  ) {
    return __wremove(
      _FileName,
    );
  }

  late final __wremovePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wremove');
  late final __wremove =
      __wremovePtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> _wtempnam(
    ffi.Pointer<ffi.WChar> _Directory,
    ffi.Pointer<ffi.WChar> _FilePrefix,
  ) {
    return __wtempnam(
      _Directory,
      _FilePrefix,
    );
  }

  late final __wtempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wtempnam');
  late final __wtempnam = __wtempnamPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wtmpnam_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __wtmpnam_s(
      _Buffer,
      _BufferCount,
    );
  }

  late final __wtmpnam_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wtmpnam_s');
  late final __wtmpnam_s =
      __wtmpnam_sPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> _wtmpnam(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __wtmpnam(
      _Buffer,
    );
  }

  late final __wtmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('_wtmpnam');
  late final __wtmpnam = __wtmpnamPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _fgetwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fgetwc_nolock(
      _Stream,
    );
  }

  late final __fgetwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_fgetwc_nolock');
  late final __fgetwc_nolock =
      __fgetwc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fputwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fputwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputwc_nolockPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>(
      '_fputwc_nolock');
  late final __fputwc_nolock =
      __fputwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _getwc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getwc_nolock(
      _Stream,
    );
  }

  late final __getwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(ffi.Pointer<FILE>)>>(
          '_getwc_nolock');
  late final __getwc_nolock =
      __getwc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _putwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putwc_nolockPtr = _lookup<
          ffi.NativeFunction<wint_t Function(ffi.WChar, ffi.Pointer<FILE>)>>(
      '_putwc_nolock');
  late final __putwc_nolock =
      __putwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _ungetwc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ungetwc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetwc_nolockPtr =
      _lookup<ffi.NativeFunction<wint_t Function(wint_t, ffi.Pointer<FILE>)>>(
          '_ungetwc_nolock');
  late final __ungetwc_nolock =
      __ungetwc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int __stdio_common_vfwprintf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf');
  late final ___stdio_common_vfwprintf =
      ___stdio_common_vfwprintfPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vfwprintf_s(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf_s');
  late final ___stdio_common_vfwprintf_s =
      ___stdio_common_vfwprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vfwprintf_p(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwprintf_p');
  late final ___stdio_common_vfwprintf_p =
      ___stdio_common_vfwprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vfwscanf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfwscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfwscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vfwscanf');
  late final ___stdio_common_vfwscanf = ___stdio_common_vfwscanfPtr.asFunction<
      int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.WChar>, _locale_t,
          va_list)>();

  int __stdio_common_vswprintf(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf');
  late final ___stdio_common_vswprintf =
      ___stdio_common_vswprintfPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vswprintf_s(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf_s');
  late final ___stdio_common_vswprintf_s =
      ___stdio_common_vswprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vsnwprintf_s(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsnwprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnwprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vsnwprintf_s');
  late final ___stdio_common_vsnwprintf_s =
      ___stdio_common_vsnwprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, int,
              ffi.Pointer<ffi.WChar>, _locale_t, va_list)>();

  int __stdio_common_vswprintf_p(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswprintf_p');
  late final ___stdio_common_vswprintf_p =
      ___stdio_common_vswprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
              _locale_t, va_list)>();

  int __stdio_common_vswscanf(
    int _Options,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vswscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vswscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              _locale_t,
              va_list)>>('__stdio_common_vswscanf');
  late final ___stdio_common_vswscanf = ___stdio_common_vswscanfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
          _locale_t, va_list)>();

  int _get_stream_buffer_pointers(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Base,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> _Pointer,
    ffi.Pointer<ffi.Pointer<ffi.Int>> _Count,
  ) {
    return __get_stream_buffer_pointers(
      _Stream,
      _Base,
      _Pointer,
      _Count,
    );
  }

  late final __get_stream_buffer_pointersPtr = _lookup<
          ffi.NativeFunction<
              errno_t Function(
                  ffi.Pointer<FILE>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
                  ffi.Pointer<ffi.Pointer<ffi.Int>>)>>(
      '_get_stream_buffer_pointers');
  late final __get_stream_buffer_pointers =
      __get_stream_buffer_pointersPtr.asFunction<
          int Function(
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>,
              ffi.Pointer<ffi.Pointer<ffi.Int>>)>();

  int clearerr_s(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr_s(
      _Stream,
    );
  }

  late final _clearerr_sPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<FILE>)>>(
          'clearerr_s');
  late final _clearerr_s =
      _clearerr_sPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return _fopen_s(
      _Stream,
      _FileName,
      _Mode,
    );
  }

  late final _fopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen_s');
  late final _fopen_s = _fopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int fread_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fread_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('fread_s');
  late final _fread_s = _fread_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<FILE>)>();

  int freopen_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _OldStream,
  ) {
    return _freopen_s(
      _Stream,
      _FileName,
      _Mode,
      _OldStream,
    );
  }

  late final _freopen_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<FILE>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<FILE>)>>('freopen_s');
  late final _freopen_s = _freopen_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<FILE>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Char> gets_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _Size,
  ) {
    return _gets_s(
      _Buffer,
      _Size,
    );
  }

  late final _gets_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, rsize_t)>>('gets_s');
  late final _gets_s = _gets_sPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  int tmpfile_s(
    ffi.Pointer<ffi.Pointer<FILE>> _Stream,
  ) {
    return _tmpfile_s(
      _Stream,
    );
  }

  late final _tmpfile_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Pointer<FILE>>)>>(
      'tmpfile_s');
  late final _tmpfile_s =
      _tmpfile_sPtr.asFunction<int Function(ffi.Pointer<ffi.Pointer<FILE>>)>();

  int tmpnam_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _Size,
  ) {
    return _tmpnam_s(
      _Buffer,
      _Size,
    );
  }

  late final _tmpnam_sPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Char>, rsize_t)>>(
      'tmpnam_s');
  late final _tmpnam_s =
      _tmpnam_sPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  void clearerr(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _clearerr(
      _Stream,
    );
  }

  late final _clearerrPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'clearerr');
  late final _clearerr =
      _clearerrPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int fclose(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fclose(
      _Stream,
    );
  }

  late final _fclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fclose');
  late final _fclose = _fclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fcloseall() {
    return __fcloseall();
  }

  late final __fcloseallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_fcloseall');
  late final __fcloseall = __fcloseallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> _fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return __fdopen(
      _FileHandle,
      _Mode,
    );
  }

  late final __fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('_fdopen');
  late final __fdopen = __fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int feof(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _feof(
      _Stream,
    );
  }

  late final _feofPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('feof');
  late final _feof = _feofPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int ferror(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ferror(
      _Stream,
    );
  }

  late final _ferrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'ferror');
  late final _ferror = _ferrorPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fflush(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fflush(
      _Stream,
    );
  }

  late final _fflushPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fflush');
  late final _fflush = _fflushPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fgetc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgetc(
      _Stream,
    );
  }

  late final _fgetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('fgetc');
  late final _fgetc = _fgetcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetchar() {
    return __fgetchar();
  }

  late final __fgetcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_fgetchar');
  late final __fgetchar = __fgetcharPtr.asFunction<int Function()>();

  int fgetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fgetpos(
      _Stream,
      _Position,
    );
  }

  late final _fgetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fgetpos');
  late final _fgetpos = _fgetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  ffi.Pointer<ffi.Char> fgets(
    ffi.Pointer<ffi.Char> _Buffer,
    int _MaxCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fgets(
      _Buffer,
      _MaxCount,
      _Stream,
    );
  }

  late final _fgetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Int, ffi.Pointer<FILE>)>>('fgets');
  late final _fgets = _fgetsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<FILE>)>();

  int _fileno(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fileno(
      _Stream,
    );
  }

  late final __filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fileno');
  late final __fileno =
      __filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _flushall() {
    return __flushall();
  }

  late final __flushallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_flushall');
  late final __flushall = __flushallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> fopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return _fopen(
      _FileName,
      _Mode,
    );
  }

  late final _fopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('fopen');
  late final _fopen = _fopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fputc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputc(
      _Character,
      _Stream,
    );
  }

  late final _fputcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'fputc');
  late final _fputc =
      _fputcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fputchar(
    int _Character,
  ) {
    return __fputchar(
      _Character,
    );
  }

  late final __fputcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_fputchar');
  late final __fputchar = __fputcharPtr.asFunction<int Function(int)>();

  int fputs(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fputs(
      _Buffer,
      _Stream,
    );
  }

  late final _fputsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('fputs');
  late final _fputs = _fputsPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  int fread(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fread(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _freadPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Pointer<FILE>)>>('fread');
  late final _fread = _freadPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> freopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _freopen(
      _FileName,
      _Mode,
      _Stream,
    );
  }

  late final _freopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>>('freopen');
  late final _freopen = _freopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _fsopen(
    ffi.Pointer<ffi.Char> _FileName,
    ffi.Pointer<ffi.Char> _Mode,
    int _ShFlag,
  ) {
    return __fsopen(
      _FileName,
      _Mode,
      _ShFlag,
    );
  }

  late final __fsopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('_fsopen');
  late final __fsopen = __fsopenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int fsetpos(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<fpos_t> _Position,
  ) {
    return _fsetpos(
      _Stream,
      _Position,
    );
  }

  late final _fsetposPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>>('fsetpos');
  late final _fsetpos = _fsetposPtr
      .asFunction<int Function(ffi.Pointer<FILE>, ffi.Pointer<fpos_t>)>();

  int fseek(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return _fseek(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final _fseekPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('fseek');
  late final _fseek =
      _fseekPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _fseeki64(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.LongLong, ffi.Int)>>('_fseeki64');
  late final __fseeki64 =
      __fseeki64Ptr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int ftell(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ftell(
      _Stream,
    );
  }

  late final _ftellPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          'ftell');
  late final _ftell = _ftellPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _ftelli64(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftelli64(
      _Stream,
    );
  }

  late final __ftelli64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<FILE>)>>(
          '_ftelli64');
  late final __ftelli64 =
      __ftelli64Ptr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int fwrite(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fwrite(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final _fwritePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Pointer<FILE>)>>('fwrite');
  late final _fwrite = _fwritePtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int getc(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getc(
      _Stream,
    );
  }

  late final _getcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getc');
  late final _getc = _getcPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int getchar() {
    return _getchar();
  }

  late final _getcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('getchar');
  late final _getchar = _getcharPtr.asFunction<int Function()>();

  int _getmaxstdio() {
    return __getmaxstdio();
  }

  late final __getmaxstdioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_getmaxstdio');
  late final __getmaxstdio = __getmaxstdioPtr.asFunction<int Function()>();

  int _getw(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getw(
      _Stream,
    );
  }

  late final __getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('_getw');
  late final __getw = __getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  void perror(
    ffi.Pointer<ffi.Char> _ErrorMessage,
  ) {
    return _perror(
      _ErrorMessage,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int _pclose(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __pclose(
      _Stream,
    );
  }

  late final __pclosePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_pclose');
  late final __pclose =
      __pclosePtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<FILE> _popen(
    ffi.Pointer<ffi.Char> _Command,
    ffi.Pointer<ffi.Char> _Mode,
  ) {
    return __popen(
      _Command,
      _Mode,
    );
  }

  late final __popenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_popen');
  late final __popen = __popenPtr.asFunction<
      ffi.Pointer<FILE> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int putc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putc(
      _Character,
      _Stream,
    );
  }

  late final _putcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putc');
  late final _putc =
      _putcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int putchar(
    int _Character,
  ) {
    return _putchar(
      _Character,
    );
  }

  late final _putcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('putchar');
  late final _putchar = _putcharPtr.asFunction<int Function(int)>();

  int puts(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _puts(
      _Buffer,
    );
  }

  late final _putsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'puts');
  late final _puts = _putsPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _putw(
    int _Word,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putw(
      _Word,
      _Stream,
    );
  }

  late final __putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_putw');
  late final __putw =
      __putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int remove(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return _remove(
      _FileName,
    );
  }

  late final _removePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'remove');
  late final _remove =
      _removePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int rename(
    ffi.Pointer<ffi.Char> _OldFileName,
    ffi.Pointer<ffi.Char> _NewFileName,
  ) {
    return _rename(
      _OldFileName,
      _NewFileName,
    );
  }

  late final _renamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('rename');
  late final _rename = _renamePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _unlink(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return __unlink(
      _FileName,
    );
  }

  late final __unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          '_unlink');
  late final __unlink =
      __unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int unlink(
    ffi.Pointer<ffi.Char> _FileName,
  ) {
    return _unlink1(
      _FileName,
    );
  }

  late final _unlinkPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'unlink');
  late final _unlink1 =
      _unlinkPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  void rewind(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _rewind(
      _Stream,
    );
  }

  late final _rewindPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'rewind');
  late final _rewind =
      _rewindPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int _rmtmp() {
    return __rmtmp();
  }

  late final __rmtmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_rmtmp');
  late final __rmtmp = __rmtmpPtr.asFunction<int Function()>();

  void setbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _setbuf(
      _Stream,
      _Buffer,
    );
  }

  late final _setbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('setbuf');
  late final _setbuf = _setbufPtr
      .asFunction<void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int _setmaxstdio(
    int _Maximum,
  ) {
    return __setmaxstdio(
      _Maximum,
    );
  }

  late final __setmaxstdioPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_setmaxstdio');
  late final __setmaxstdio = __setmaxstdioPtr.asFunction<int Function(int)>();

  int setvbuf(
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Mode,
    int _Size,
  ) {
    return _setvbuf(
      _Stream,
      _Buffer,
      _Mode,
      _Size,
    );
  }

  late final _setvbufPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Int,
              ffi.Size)>>('setvbuf');
  late final _setvbuf = _setvbufPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _tempnam(
    ffi.Pointer<ffi.Char> _DirectoryName,
    ffi.Pointer<ffi.Char> _FilePrefix,
  ) {
    return __tempnam(
      _DirectoryName,
      _FilePrefix,
    );
  }

  late final __tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_tempnam');
  late final __tempnam = __tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<FILE> tmpfile() {
    return _tmpfile();
  }

  late final _tmpfilePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<FILE> Function()>>('tmpfile');
  late final _tmpfile = _tmpfilePtr.asFunction<ffi.Pointer<FILE> Function()>();

  ffi.Pointer<ffi.Char> tmpnam(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return _tmpnam(
      _Buffer,
    );
  }

  late final _tmpnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('tmpnam');
  late final _tmpnam = _tmpnamPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int ungetc(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _ungetc(
      _Character,
      _Stream,
    );
  }

  late final _ungetcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'ungetc');
  late final _ungetc =
      _ungetcPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  void _lock_file(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __lock_file(
      _Stream,
    );
  }

  late final __lock_filePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          '_lock_file');
  late final __lock_file =
      __lock_filePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  void _unlock_file(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __unlock_file(
      _Stream,
    );
  }

  late final __unlock_filePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          '_unlock_file');
  late final __unlock_file =
      __unlock_filePtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  int _fclose_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fclose_nolock(
      _Stream,
    );
  }

  late final __fclose_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fclose_nolock');
  late final __fclose_nolock =
      __fclose_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fflush_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fflush_nolock(
      _Stream,
    );
  }

  late final __fflush_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fflush_nolock');
  late final __fflush_nolock =
      __fflush_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fgetc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fgetc_nolock(
      _Stream,
    );
  }

  late final __fgetc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_fgetc_nolock');
  late final __fgetc_nolock =
      __fgetc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fputc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fputc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __fputc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_fputc_nolock');
  late final __fputc_nolock =
      __fputc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _fread_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fread_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('_fread_nolock');
  late final __fread_nolock = __fread_nolockPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int _fread_nolock_s(
    ffi.Pointer<ffi.Void> _Buffer,
    int _BufferSize,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fread_nolock_s(
      _Buffer,
      _BufferSize,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fread_nolock_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('_fread_nolock_s');
  late final __fread_nolock_s = __fread_nolock_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, int, ffi.Pointer<FILE>)>();

  int _fseek_nolock(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseek_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseek_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.Long, ffi.Int)>>('_fseek_nolock');
  late final __fseek_nolock =
      __fseek_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _fseeki64_nolock(
    ffi.Pointer<FILE> _Stream,
    int _Offset,
    int _Origin,
  ) {
    return __fseeki64_nolock(
      _Stream,
      _Offset,
      _Origin,
    );
  }

  late final __fseeki64_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<FILE>, ffi.LongLong, ffi.Int)>>('_fseeki64_nolock');
  late final __fseeki64_nolock = __fseeki64_nolockPtr
      .asFunction<int Function(ffi.Pointer<FILE>, int, int)>();

  int _ftell_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftell_nolock(
      _Stream,
    );
  }

  late final __ftell_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<FILE>)>>(
          '_ftell_nolock');
  late final __ftell_nolock =
      __ftell_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _ftelli64_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ftelli64_nolock(
      _Stream,
    );
  }

  late final __ftelli64_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<FILE>)>>(
          '_ftelli64_nolock');
  late final __ftelli64_nolock =
      __ftelli64_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _fwrite_nolock(
    ffi.Pointer<ffi.Void> _Buffer,
    int _ElementSize,
    int _ElementCount,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __fwrite_nolock(
      _Buffer,
      _ElementSize,
      _ElementCount,
      _Stream,
    );
  }

  late final __fwrite_nolockPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              ffi.Pointer<FILE>)>>('_fwrite_nolock');
  late final __fwrite_nolock = __fwrite_nolockPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, int, int, ffi.Pointer<FILE>)>();

  int _getc_nolock(
    ffi.Pointer<FILE> _Stream,
  ) {
    return __getc_nolock(
      _Stream,
    );
  }

  late final __getc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          '_getc_nolock');
  late final __getc_nolock =
      __getc_nolockPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int _putc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __putc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __putc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_putc_nolock');
  late final __putc_nolock =
      __putc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int _ungetc_nolock(
    int _Character,
    ffi.Pointer<FILE> _Stream,
  ) {
    return __ungetc_nolock(
      _Character,
      _Stream,
    );
  }

  late final __ungetc_nolockPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          '_ungetc_nolock');
  late final __ungetc_nolock =
      __ungetc_nolockPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Int> __p__commode() {
    return ___p__commode();
  }

  late final ___p__commodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__p__commode');
  late final ___p__commode =
      ___p__commodePtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int __stdio_common_vfprintf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf');
  late final ___stdio_common_vfprintf = ___stdio_common_vfprintfPtr.asFunction<
      int Function(
          int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t, va_list)>();

  int __stdio_common_vfprintf_s(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf_s(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf_s');
  late final ___stdio_common_vfprintf_s =
      ___stdio_common_vfprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t,
              va_list)>();

  int __stdio_common_vfprintf_p(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vfprintf_p(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vfprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfprintf_p');
  late final ___stdio_common_vfprintf_p =
      ___stdio_common_vfprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t,
              va_list)>();

  int _set_printf_count_output(
    int _Value,
  ) {
    return __set_printf_count_output(
      _Value,
    );
  }

  late final __set_printf_count_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          '_set_printf_count_output');
  late final __set_printf_count_output =
      __set_printf_count_outputPtr.asFunction<int Function(int)>();

  int _get_printf_count_output() {
    return __get_printf_count_output();
  }

  late final __get_printf_count_outputPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>(
          '_get_printf_count_output');
  late final __get_printf_count_output =
      __get_printf_count_outputPtr.asFunction<int Function()>();

  int __stdio_common_vfscanf(
    int _Options,
    ffi.Pointer<FILE> _Stream,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _Arglist,
  ) {
    return ___stdio_common_vfscanf(
      _Options,
      _Stream,
      _Format,
      _Locale,
      _Arglist,
    );
  }

  late final ___stdio_common_vfscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<FILE>,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vfscanf');
  late final ___stdio_common_vfscanf = ___stdio_common_vfscanfPtr.asFunction<
      int Function(
          int, ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, _locale_t, va_list)>();

  int __stdio_common_vsprintf(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf');
  late final ___stdio_common_vsprintf = ___stdio_common_vsprintfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          _locale_t, va_list)>();

  int __stdio_common_vsprintf_s(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf_s');
  late final ___stdio_common_vsprintf_s =
      ___stdio_common_vsprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
              _locale_t, va_list)>();

  int __stdio_common_vsnprintf_s(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _MaxCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsnprintf_s(
      _Options,
      _Buffer,
      _BufferCount,
      _MaxCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsnprintf_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsnprintf_s');
  late final ___stdio_common_vsnprintf_s =
      ___stdio_common_vsnprintf_sPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, int, int,
              ffi.Pointer<ffi.Char>, _locale_t, va_list)>();

  int __stdio_common_vsprintf_p(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsprintf_p(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsprintf_pPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsprintf_p');
  late final ___stdio_common_vsprintf_p =
      ___stdio_common_vsprintf_pPtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
              _locale_t, va_list)>();

  int __stdio_common_vsscanf(
    int _Options,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Format,
    _locale_t _Locale,
    va_list _ArgList,
  ) {
    return ___stdio_common_vsscanf(
      _Options,
      _Buffer,
      _BufferCount,
      _Format,
      _Locale,
      _ArgList,
    );
  }

  late final ___stdio_common_vsscanfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              _locale_t,
              va_list)>>('__stdio_common_vsscanf');
  late final ___stdio_common_vsscanf = ___stdio_common_vsscanfPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          _locale_t, va_list)>();

  ffi.Pointer<ffi.Char> tempnam(
    ffi.Pointer<ffi.Char> _Directory,
    ffi.Pointer<ffi.Char> _FilePrefix,
  ) {
    return _tempnam1(
      _Directory,
      _FilePrefix,
    );
  }

  late final _tempnamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('tempnam');
  late final _tempnam1 = _tempnamPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int fcloseall() {
    return _fcloseall1();
  }

  late final _fcloseallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('fcloseall');
  late final _fcloseall1 = _fcloseallPtr.asFunction<int Function()>();

  ffi.Pointer<FILE> fdopen(
    int _FileHandle,
    ffi.Pointer<ffi.Char> _Format,
  ) {
    return _fdopen1(
      _FileHandle,
      _Format,
    );
  }

  late final _fdopenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Int, ffi.Pointer<ffi.Char>)>>('fdopen');
  late final _fdopen1 = _fdopenPtr
      .asFunction<ffi.Pointer<FILE> Function(int, ffi.Pointer<ffi.Char>)>();

  int fgetchar() {
    return _fgetchar1();
  }

  late final _fgetcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('fgetchar');
  late final _fgetchar1 = _fgetcharPtr.asFunction<int Function()>();

  int fileno(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _fileno1(
      _Stream,
    );
  }

  late final _filenoPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>(
          'fileno');
  late final _fileno1 =
      _filenoPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int flushall() {
    return _flushall1();
  }

  late final _flushallPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('flushall');
  late final _flushall1 = _flushallPtr.asFunction<int Function()>();

  int fputchar(
    int _Ch,
  ) {
    return _fputchar1(
      _Ch,
    );
  }

  late final _fputcharPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('fputchar');
  late final _fputchar1 = _fputcharPtr.asFunction<int Function(int)>();

  int getw(
    ffi.Pointer<FILE> _Stream,
  ) {
    return _getw1(
      _Stream,
    );
  }

  late final _getwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<FILE>)>>('getw');
  late final _getw1 = _getwPtr.asFunction<int Function(ffi.Pointer<FILE>)>();

  int putw(
    int _Ch,
    ffi.Pointer<FILE> _Stream,
  ) {
    return _putw1(
      _Ch,
      _Stream,
    );
  }

  late final _putwPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int, ffi.Pointer<FILE>)>>(
          'putw');
  late final _putw1 =
      _putwPtr.asFunction<int Function(int, ffi.Pointer<FILE>)>();

  int rmtmp() {
    return _rmtmp1();
  }

  late final _rmtmpPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('rmtmp');
  late final _rmtmp1 = _rmtmpPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> _calloc_base(
    int _Count,
    int _Size,
  ) {
    return __calloc_base(
      _Count,
      _Size,
    );
  }

  late final __calloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('_calloc_base');
  late final __calloc_base =
      __calloc_basePtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> calloc(
    int _Count,
    int _Size,
  ) {
    return _calloc(
      _Count,
      _Size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int _callnewh(
    int _Size,
  ) {
    return __callnewh(
      _Size,
    );
  }

  late final __callnewhPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Size)>>('_callnewh');
  late final __callnewh = __callnewhPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> _expand(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return __expand(
      _Block,
      _Size,
    );
  }

  late final __expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('_expand');
  late final __expand = __expandPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void _free_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __free_base(
      _Block,
    );
  }

  late final __free_basePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_free_base');
  late final __free_base =
      __free_basePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return _free(
      _Block,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _malloc_base(
    int _Size,
  ) {
    return __malloc_base(
      _Size,
    );
  }

  late final __malloc_basePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          '_malloc_base');
  late final __malloc_base =
      __malloc_basePtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> malloc(
    int _Size,
  ) {
    return _malloc(
      _Size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int _msize_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __msize_base(
      _Block,
    );
  }

  late final __msize_basePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          '_msize_base');
  late final __msize_base =
      __msize_basePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int _msize(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __msize(
      _Block,
    );
  }

  late final __msizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          '_msize');
  late final __msize =
      __msizePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _realloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return __realloc_base(
      _Block,
      _Size,
    );
  }

  late final __realloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('_realloc_base');
  late final __realloc_base = __realloc_basePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return _realloc(
      _Block,
      _Size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> _recalloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return __recalloc_base(
      _Block,
      _Count,
      _Size,
    );
  }

  late final __recalloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_recalloc_base');
  late final __recalloc_base = __recalloc_basePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return __recalloc(
      _Block,
      _Count,
      _Size,
    );
  }

  late final __recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_recalloc');
  late final __recalloc = __recallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void _aligned_free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __aligned_free(
      _Block,
    );
  }

  late final __aligned_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_aligned_free');
  late final __aligned_free =
      __aligned_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _aligned_malloc(
    int _Size,
    int _Alignment,
  ) {
    return __aligned_malloc(
      _Size,
      _Alignment,
    );
  }

  late final __aligned_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size)>>('_aligned_malloc');
  late final __aligned_malloc = __aligned_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_malloc(
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_malloc(
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size, ffi.Size)>>('_aligned_offset_malloc');
  late final __aligned_offset_malloc = __aligned_offset_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  int _aligned_msize(
    ffi.Pointer<ffi.Void> _Block,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_msize(
      _Block,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_msizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_aligned_msize');
  late final __aligned_msize = __aligned_msizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_realloc(
      _Block,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size)>>('_aligned_offset_realloc');
  late final __aligned_offset_realloc = __aligned_offset_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_recalloc(
      _Block,
      _Count,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size, ffi.Size)>>('_aligned_offset_recalloc');
  late final __aligned_offset_recalloc =
      __aligned_offset_recallocPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
  ) {
    return __aligned_realloc(
      _Block,
      _Size,
      _Alignment,
    );
  }

  late final __aligned_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_aligned_realloc');
  late final __aligned_realloc = __aligned_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
  ) {
    return __aligned_recalloc(
      _Block,
      _Count,
      _Size,
      _Alignment,
    );
  }

  late final __aligned_recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size)>>('_aligned_recalloc');
  late final __aligned_recalloc = __aligned_recallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Int> _errno() {
    return __errno();
  }

  late final __errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('_errno');
  late final __errno = __errnoPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_errno');
  late final __set_errno = __set_errnoPtr.asFunction<int Function(int)>();

  int _get_errno(
    ffi.Pointer<ffi.Int> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_errno');
  late final __get_errno =
      __get_errnoPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int __threadid() {
    return ___threadid();
  }

  late final ___threadidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>('__threadid');
  late final ___threadid = ___threadidPtr.asFunction<int Function()>();

  int __threadhandle() {
    return ___threadhandle();
  }

  late final ___threadhandlePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function()>>('__threadhandle');
  late final ___threadhandle = ___threadhandlePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> bsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _bsearch_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _bsearch_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              rsize_t,
              rsize_t,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('bsearch_s');
  late final _bsearch_s = _bsearch_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  void qsort_s(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _qsort_s(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _qsort_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              rsize_t,
              rsize_t,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('qsort_s');
  late final _qsort_s = _qsort_sPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int,
          _CoreCrtSecureSearchSortCompareFunction, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _bsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  void qsort(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _qsort(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> _lfind_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return __lfind_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final __lfind_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Size,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('_lfind_s');
  late final __lfind_s = __lfind_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return __lfind(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final __lfindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('_lfind');
  late final __lfind = __lfindPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> _lsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return __lsearch_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final __lsearch_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Size,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('_lsearch_s');
  late final __lsearch_s = __lsearch_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return __lsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final __lsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('_lsearch');
  late final __lsearch = __lsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _lfind1(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lfindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('lfind');
  late final _lfind1 = _lfindPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _lsearch1(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('lsearch');
  late final _lsearch1 = _lsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  int _itow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __itow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __itow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int, ffi.Pointer<ffi.WChar>, ffi.Size, ffi.Int)>>('_itow_s');
  late final __itow_s = __itow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _itow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __itow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __itowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Int, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_itow');
  late final __itow = __itowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ltow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ltow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ltow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Long, ffi.Pointer<ffi.WChar>, ffi.Size, ffi.Int)>>('_ltow_s');
  late final __ltow_s = __ltow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ltow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ltow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ltowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Long, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ltow');
  late final __ltow = __ltowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ultow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ultow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ultow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLong, ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Int)>>('_ultow_s');
  late final __ultow_s = __ultow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ultow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ultow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ultowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ultow');
  late final __ultow = __ultowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  double wcstod(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
  ) {
    return _wcstod(
      _String,
      _EndPtr,
    );
  }

  late final _wcstodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstod');
  late final _wcstod = _wcstodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  double _wcstod_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __wcstod_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstod_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>>('_wcstod_l');
  late final __wcstod_l = __wcstod_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>();

  int wcstol(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstol');
  late final _wcstol = _wcstolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstol_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstol_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstol_l');
  late final __wcstol_l = __wcstol_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoll(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoll');
  late final _wcstoll = _wcstollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoll_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoll_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoll_l');
  late final __wcstoll_l = __wcstoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoul(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoul');
  late final _wcstoul = _wcstoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoul_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoul_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoul_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoul_l');
  late final __wcstoul_l = __wcstoul_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoull(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoull');
  late final _wcstoull = _wcstoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoull_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoull_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoull_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoull_l');
  late final __wcstoull_l = __wcstoull_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  double wcstof(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
  ) {
    return _wcstof(
      _String,
      _EndPtr,
    );
  }

  late final _wcstofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstof');
  late final _wcstof = _wcstofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  double _wcstof_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __wcstof_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>>('_wcstof_l');
  late final __wcstof_l = __wcstof_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>();

  double _wtof(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtof(
      _String,
    );
  }

  late final __wtofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtof');
  late final __wtof =
      __wtofPtr.asFunction<double Function(ffi.Pointer<ffi.WChar>)>();

  double _wtof_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtof_l(
      _String,
      _Locale,
    );
  }

  late final __wtof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtof_l');
  late final __wtof_l = __wtof_lPtr
      .asFunction<double Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtoi(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoi(
      _String,
    );
  }

  late final __wtoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtoi');
  late final __wtoi =
      __wtoiPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoi_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoi_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoi_l');
  late final __wtoi_l =
      __wtoi_lPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtol(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtol(
      _String,
    );
  }

  late final __wtolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtol');
  late final __wtol =
      __wtolPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtol_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtol_l(
      _String,
      _Locale,
    );
  }

  late final __wtol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtol_l');
  late final __wtol_l =
      __wtol_lPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtoll(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoll(
      _String,
    );
  }

  late final __wtollPtr = _lookup<
          ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.WChar>)>>(
      '_wtoll');
  late final __wtoll =
      __wtollPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoll_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoll_l(
      _String,
      _Locale,
    );
  }

  late final __wtoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoll_l');
  late final __wtoll_l = __wtoll_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _i64tow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __i64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __i64tow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.LongLong, ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Int)>>('_i64tow_s');
  late final __i64tow_s = __i64tow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _i64tow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __i64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __i64towPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.LongLong, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_i64tow');
  late final __i64tow = __i64towPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ui64tow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ui64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ui64tow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLongLong, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Int)>>('_ui64tow_s');
  late final __ui64tow_s = __ui64tow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ui64tow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ui64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ui64towPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ui64tow');
  late final __ui64tow = __ui64towPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _wtoi64(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoi64(
      _String,
    );
  }

  late final __wtoi64Ptr = _lookup<
          ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.WChar>)>>(
      '_wtoi64');
  late final __wtoi64 =
      __wtoi64Ptr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoi64_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoi64_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoi64_l');
  late final __wtoi64_l = __wtoi64_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wcstoi64(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoi64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoi64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('_wcstoi64');
  late final __wcstoi64 = __wcstoi64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoi64_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoi64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoi64_l');
  late final __wcstoi64_l = __wcstoi64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int _wcstoui64(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoui64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoui64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('_wcstoui64');
  late final __wcstoui64 = __wcstoui64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoui64_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoui64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoui64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoui64_l');
  late final __wcstoui64_l = __wcstoui64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  ffi.Pointer<ffi.WChar> _wfullpath(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<ffi.WChar> _Path,
    int _BufferCount,
  ) {
    return __wfullpath(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final __wfullpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wfullpath');
  late final __wfullpath = __wfullpathPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int _wmakepath_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wmakepath_s(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wmakepath_s');
  late final __wmakepath_s = __wmakepath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  void _wmakepath(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wmakepath(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wmakepath');
  late final __wmakepath = __wmakepathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  void _wsplitpath(
    ffi.Pointer<ffi.WChar> _FullPath,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wsplitpath(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wsplitpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wsplitpath');
  late final __wsplitpath = __wsplitpathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  int _wsplitpath_s(
    ffi.Pointer<ffi.WChar> _FullPath,
    ffi.Pointer<ffi.WChar> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.WChar> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.WChar> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.WChar> _Ext,
    int _ExtCount,
  ) {
    return __wsplitpath_s(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final __wsplitpath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('_wsplitpath_s');
  late final __wsplitpath_s = __wsplitpath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int)>();

  int _wdupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _Buffer,
    ffi.Pointer<ffi.Size> _BufferCount,
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wdupenv_s(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wdupenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>)>>('_wdupenv_s');
  late final __wdupenv_s = __wdupenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> _wgetenv(
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wgetenv(
      _VarName,
    );
  }

  late final __wgetenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('_wgetenv');
  late final __wgetenv = __wgetenvPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _wgetenv_s(
    ffi.Pointer<ffi.Size> _RequiredCount,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wgetenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wgetenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Pointer<ffi.WChar>)>>('_wgetenv_s');
  late final __wgetenv_s = __wgetenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.WChar>)>();

  int _wputenv(
    ffi.Pointer<ffi.WChar> _EnvString,
  ) {
    return __wputenv(
      _EnvString,
    );
  }

  late final __wputenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wputenv');
  late final __wputenv =
      __wputenvPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wputenv_s(
    ffi.Pointer<ffi.WChar> _Name,
    ffi.Pointer<ffi.WChar> _Value,
  ) {
    return __wputenv_s(
      _Name,
      _Value,
    );
  }

  late final __wputenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wputenv_s');
  late final __wputenv_s = __wputenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wsearchenv_s(
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _VarName,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __wsearchenv_s(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final __wsearchenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wsearchenv_s');
  late final __wsearchenv_s = __wsearchenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int)>();

  void _wsearchenv(
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _VarName,
    ffi.Pointer<ffi.WChar> _ResultPath,
  ) {
    return __wsearchenv(
      _Filename,
      _VarName,
      _ResultPath,
    );
  }

  late final __wsearchenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wsearchenv');
  late final __wsearchenv = __wsearchenvPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  int _wsystem(
    ffi.Pointer<ffi.WChar> _Command,
  ) {
    return __wsystem(
      _Command,
    );
  }

  late final __wsystemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wsystem');
  late final __wsystem =
      __wsystemPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  void _swab(
    ffi.Pointer<ffi.Char> _Buf1,
    ffi.Pointer<ffi.Char> _Buf2,
    int _SizeInBytes,
  ) {
    return __swab(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final __swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('_swab');
  late final __swab = __swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void exit(
    int _Code,
  ) {
    return _exit1(
      _Code,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit1 = _exitPtr.asFunction<void Function(int)>();

  void _exit(
    int _Code,
  ) {
    return __exit(
      _Code,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int _Code,
  ) {
    return __Exit(
      _Code,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int _Code,
  ) {
    return _quick_exit(
      _Code,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int _set_abort_behavior(
    int _Flags,
    int _Mask,
  ) {
    return __set_abort_behavior(
      _Flags,
      _Mask,
    );
  }

  late final __set_abort_behaviorPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.UnsignedInt, ffi.UnsignedInt)>>('_set_abort_behavior');
  late final __set_abort_behavior =
      __set_abort_behaviorPtr.asFunction<int Function(int, int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  _onexit_t _onexit(
    _onexit_t _Func,
  ) {
    return __onexit(
      _Func,
    );
  }

  late final __onexitPtr =
      _lookup<ffi.NativeFunction<_onexit_t Function(_onexit_t)>>('_onexit');
  late final __onexit = __onexitPtr.asFunction<_onexit_t Function(_onexit_t)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  _purecall_handler _set_purecall_handler(
    _purecall_handler _Handler,
  ) {
    return __set_purecall_handler(
      _Handler,
    );
  }

  late final __set_purecall_handlerPtr = _lookup<
          ffi.NativeFunction<_purecall_handler Function(_purecall_handler)>>(
      '_set_purecall_handler');
  late final __set_purecall_handler = __set_purecall_handlerPtr
      .asFunction<_purecall_handler Function(_purecall_handler)>();

  _purecall_handler _get_purecall_handler() {
    return __get_purecall_handler();
  }

  late final __get_purecall_handlerPtr =
      _lookup<ffi.NativeFunction<_purecall_handler Function()>>(
          '_get_purecall_handler');
  late final __get_purecall_handler =
      __get_purecall_handlerPtr.asFunction<_purecall_handler Function()>();

  _invalid_parameter_handler _set_invalid_parameter_handler(
    _invalid_parameter_handler _Handler,
  ) {
    return __set_invalid_parameter_handler(
      _Handler,
    );
  }

  late final __set_invalid_parameter_handlerPtr = _lookup<
      ffi.NativeFunction<
          _invalid_parameter_handler Function(
              _invalid_parameter_handler)>>('_set_invalid_parameter_handler');
  late final __set_invalid_parameter_handler =
      __set_invalid_parameter_handlerPtr.asFunction<
          _invalid_parameter_handler Function(_invalid_parameter_handler)>();

  _invalid_parameter_handler _get_invalid_parameter_handler() {
    return __get_invalid_parameter_handler();
  }

  late final __get_invalid_parameter_handlerPtr =
      _lookup<ffi.NativeFunction<_invalid_parameter_handler Function()>>(
          '_get_invalid_parameter_handler');
  late final __get_invalid_parameter_handler =
      __get_invalid_parameter_handlerPtr
          .asFunction<_invalid_parameter_handler Function()>();

  _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(
    _invalid_parameter_handler _Handler,
  ) {
    return __set_thread_local_invalid_parameter_handler(
      _Handler,
    );
  }

  late final __set_thread_local_invalid_parameter_handlerPtr = _lookup<
          ffi.NativeFunction<
              _invalid_parameter_handler Function(_invalid_parameter_handler)>>(
      '_set_thread_local_invalid_parameter_handler');
  late final __set_thread_local_invalid_parameter_handler =
      __set_thread_local_invalid_parameter_handlerPtr.asFunction<
          _invalid_parameter_handler Function(_invalid_parameter_handler)>();

  _invalid_parameter_handler _get_thread_local_invalid_parameter_handler() {
    return __get_thread_local_invalid_parameter_handler();
  }

  late final __get_thread_local_invalid_parameter_handlerPtr =
      _lookup<ffi.NativeFunction<_invalid_parameter_handler Function()>>(
          '_get_thread_local_invalid_parameter_handler');
  late final __get_thread_local_invalid_parameter_handler =
      __get_thread_local_invalid_parameter_handlerPtr
          .asFunction<_invalid_parameter_handler Function()>();

  int _set_error_mode(
    int _Mode,
  ) {
    return __set_error_mode(
      _Mode,
    );
  }

  late final __set_error_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_set_error_mode');
  late final __set_error_mode =
      __set_error_modePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.UnsignedLong> __doserrno() {
    return ___doserrno();
  }

  late final ___doserrnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedLong> Function()>>(
          '__doserrno');
  late final ___doserrno =
      ___doserrnoPtr.asFunction<ffi.Pointer<ffi.UnsignedLong> Function()>();

  int _set_doserrno(
    int _Value,
  ) {
    return __set_doserrno(
      _Value,
    );
  }

  late final __set_doserrnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.UnsignedLong)>>(
          '_set_doserrno');
  late final __set_doserrno = __set_doserrnoPtr.asFunction<int Function(int)>();

  int _get_doserrno(
    ffi.Pointer<ffi.UnsignedLong> _Value,
  ) {
    return __get_doserrno(
      _Value,
    );
  }

  late final __get_doserrnoPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.UnsignedLong>)>>(
      '_get_doserrno');
  late final __get_doserrno = __get_doserrnoPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedLong>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __sys_errlist() {
    return ___sys_errlist();
  }

  late final ___sys_errlistPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__sys_errlist');
  late final ___sys_errlist = ___sys_errlistPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Int> __sys_nerr() {
    return ___sys_nerr();
  }

  late final ___sys_nerrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__sys_nerr');
  late final ___sys_nerr =
      ___sys_nerrPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __p__pgmptr() {
    return ___p__pgmptr();
  }

  late final ___p__pgmptrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__p__pgmptr');
  late final ___p__pgmptr = ___p__pgmptrPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.WChar>> __p__wpgmptr() {
    return ___p__wpgmptr();
  }

  late final ___p__wpgmptrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.WChar>> Function()>>(
      '__p__wpgmptr');
  late final ___p__wpgmptr = ___p__wpgmptrPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.WChar>> Function()>();

  ffi.Pointer<ffi.Int> __p__fmode() {
    return ___p__fmode();
  }

  late final ___p__fmodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__p__fmode');
  late final ___p__fmode =
      ___p__fmodePtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _get_pgmptr(
    ffi.Pointer<ffi.Pointer<ffi.Char>> _Value,
  ) {
    return __get_pgmptr(
      _Value,
    );
  }

  late final __get_pgmptrPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('_get_pgmptr');
  late final __get_pgmptr = __get_pgmptrPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int _get_wpgmptr(
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _Value,
  ) {
    return __get_wpgmptr(
      _Value,
    );
  }

  late final __get_wpgmptrPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('_get_wpgmptr');
  late final __get_wpgmptr = __get_wpgmptrPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  int _set_fmode(
    int _Mode,
  ) {
    return __set_fmode(
      _Mode,
    );
  }

  late final __set_fmodePtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_fmode');
  late final __set_fmode = __set_fmodePtr.asFunction<int Function(int)>();

  int _get_fmode(
    ffi.Pointer<ffi.Int> _PMode,
  ) {
    return __get_fmode(
      _PMode,
    );
  }

  late final __get_fmodePtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_fmode');
  late final __get_fmode =
      __get_fmodePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int abs(
    int _Number,
  ) {
    return _abs(
      _Number,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int _Number,
  ) {
    return _labs(
      _Number,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int _Number,
  ) {
    return _llabs(
      _Number,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  int _abs64(
    int _Number,
  ) {
    return __abs64(
      _Number,
    );
  }

  late final __abs64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>(
          '_abs64');
  late final __abs64 = __abs64Ptr.asFunction<int Function(int)>();

  int _byteswap_ushort(
    int _Number,
  ) {
    return __byteswap_ushort(
      _Number,
    );
  }

  late final __byteswap_ushortPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedShort Function(ffi.UnsignedShort)>>(
      '_byteswap_ushort');
  late final __byteswap_ushort =
      __byteswap_ushortPtr.asFunction<int Function(int)>();

  int _byteswap_ulong(
    int _Number,
  ) {
    return __byteswap_ulong(
      _Number,
    );
  }

  late final __byteswap_ulongPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.UnsignedLong)>>(
          '_byteswap_ulong');
  late final __byteswap_ulong =
      __byteswap_ulongPtr.asFunction<int Function(int)>();

  int _byteswap_uint64(
    int _Number,
  ) {
    return __byteswap_uint64(
      _Number,
    );
  }

  late final __byteswap_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong)>>('_byteswap_uint64');
  late final __byteswap_uint64 =
      __byteswap_uint64Ptr.asFunction<int Function(int)>();

  div_t div(
    int _Numerator,
    int _Denominator,
  ) {
    return _div(
      _Numerator,
      _Denominator,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _ldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _lldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int _rotl(
    int _Value,
    int _Shift,
  ) {
    return __rotl(
      _Value,
      _Shift,
    );
  }

  late final __rotlPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Int)>>('_rotl');
  late final __rotl = __rotlPtr.asFunction<int Function(int, int)>();

  int _lrotl(
    int _Value,
    int _Shift,
  ) {
    return __lrotl(
      _Value,
      _Shift,
    );
  }

  late final __lrotlPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.UnsignedLong, ffi.Int)>>('_lrotl');
  late final __lrotl = __lrotlPtr.asFunction<int Function(int, int)>();

  int _rotl64(
    int _Value,
    int _Shift,
  ) {
    return __rotl64(
      _Value,
      _Shift,
    );
  }

  late final __rotl64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.Int)>>('_rotl64');
  late final __rotl64 = __rotl64Ptr.asFunction<int Function(int, int)>();

  int _rotr(
    int _Value,
    int _Shift,
  ) {
    return __rotr(
      _Value,
      _Shift,
    );
  }

  late final __rotrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Int)>>('_rotr');
  late final __rotr = __rotrPtr.asFunction<int Function(int, int)>();

  int _lrotr(
    int _Value,
    int _Shift,
  ) {
    return __lrotr(
      _Value,
      _Shift,
    );
  }

  late final __lrotrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.UnsignedLong, ffi.Int)>>('_lrotr');
  late final __lrotr = __lrotrPtr.asFunction<int Function(int, int)>();

  int _rotr64(
    int _Value,
    int _Shift,
  ) {
    return __rotr64(
      _Value,
      _Shift,
    );
  }

  late final __rotr64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.Int)>>('_rotr64');
  late final __rotr64 = __rotr64Ptr.asFunction<int Function(int, int)>();

  void srand(
    int _Seed,
  ) {
    return _srand(
      _Seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atof(
      _String,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atoi(
      _String,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atol(
      _String,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atoll(
      _String,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _atoi64(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoi64(
      _String,
    );
  }

  late final __atoi64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          '_atoi64');
  late final __atoi64 =
      __atoi64Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double _atof_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atof_l(
      _String,
      _Locale,
    );
  }

  late final __atof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atof_l');
  late final __atof_l = __atof_lPtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoi_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoi_l(
      _String,
      _Locale,
    );
  }

  late final __atoi_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atoi_l');
  late final __atoi_l =
      __atoi_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atol_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atol_l(
      _String,
      _Locale,
    );
  }

  late final __atol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atol_l');
  late final __atol_l =
      __atol_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoll_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoll_l(
      _String,
      _Locale,
    );
  }

  late final __atoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atoll_l');
  late final __atoll_l =
      __atoll_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoi64_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoi64_l(
      _String,
      _Locale,
    );
  }

  late final __atoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>, _locale_t)>>('_atoi64_l');
  late final __atoi64_l = __atoi64_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoflt(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoflt(
      _Result,
      _String,
    );
  }

  late final __atofltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>)>>('_atoflt');
  late final __atoflt = __atofltPtr.asFunction<
      int Function(ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>)>();

  int _atodbl(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atodbl(
      _Result,
      _String,
    );
  }

  late final __atodblPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>)>>('_atodbl');
  late final __atodbl = __atodblPtr.asFunction<
      int Function(ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>)>();

  int _atoldbl(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoldbl(
      _Result,
      _String,
    );
  }

  late final __atoldblPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>)>>('_atoldbl');
  late final __atoldbl = __atoldblPtr
      .asFunction<int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>)>();

  int _atoflt_l(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoflt_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atoflt_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atoflt_l');
  late final __atoflt_l = __atoflt_lPtr.asFunction<
      int Function(
          ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atodbl_l(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atodbl_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atodbl_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atodbl_l');
  late final __atodbl_l = __atodbl_lPtr.asFunction<
      int Function(
          ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoldbl_l(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoldbl_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atoldbl_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atoldbl_l');
  late final __atoldbl_l = __atoldbl_lPtr.asFunction<
      int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>, _locale_t)>();

  double strtof(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
  ) {
    return _strtof(
      _String,
      _EndPtr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double _strtof_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __strtof_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __strtof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, _locale_t)>>('_strtof_l');
  late final __strtof_l = __strtof_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          _locale_t)>();

  double strtod(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
  ) {
    return _strtod(
      _String,
      _EndPtr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double _strtod_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __strtod_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __strtod_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, _locale_t)>>('_strtod_l');
  late final __strtod_l = __strtod_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          _locale_t)>();

  int strtol(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtol_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtol_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtol_l');
  late final __strtol_l = __strtol_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoll(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoll_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoll_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoll_l');
  late final __strtoll_l = __strtoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoul(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoul_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoul_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoul_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoul_l');
  late final __strtoul_l = __strtoul_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoull(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoull_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoull_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoull_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoull_l');
  late final __strtoull_l = __strtoull_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _strtoi64(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return __strtoi64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __strtoi64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('_strtoi64');
  late final __strtoi64 = __strtoi64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoi64_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoi64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoi64_l');
  late final __strtoi64_l = __strtoi64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _strtoui64(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return __strtoui64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __strtoui64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('_strtoui64');
  late final __strtoui64 = __strtoui64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoui64_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoui64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoui64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoui64_l');
  late final __strtoui64_l = __strtoui64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _itoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __itoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __itoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>('_itoa_s');
  late final __itoa_s = __itoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _itoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __itoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __itoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('_itoa');
  late final __itoa = __itoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ltoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ltoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ltoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>('_ltoa_s');
  late final __ltoa_s = __ltoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ltoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ltoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ltoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Int)>>('_ltoa');
  late final __ltoa = __ltoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ultoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ultoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ultoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Int)>>('_ultoa_s');
  late final __ultoa_s = __ultoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ultoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ultoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ultoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('_ultoa');
  late final __ultoa = __ultoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _i64toa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __i64toa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __i64toa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.LongLong, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Int)>>('_i64toa_s');
  late final __i64toa_s = __i64toa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _i64toa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __i64toa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __i64toaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.LongLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('_i64toa');
  late final __i64toa = __i64toaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ui64toa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ui64toa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ui64toa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLongLong, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Int)>>('_ui64toa_s');
  late final __ui64toa_s = __ui64toa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ui64toa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ui64toa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ui64toaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('_ui64toa');
  late final __ui64toa = __ui64toaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ecvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __ecvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __ecvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_ecvt_s');
  late final __ecvt_s = __ecvt_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, double, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> _ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __ecvt(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_ecvt');
  late final __ecvt = __ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int _fcvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __fcvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __fcvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_fcvt_s');
  late final __fcvt_s = __fcvt_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, double, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> _fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __fcvt(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_fcvt');
  late final __fcvt = __fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int _gcvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
  ) {
    return __gcvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
    );
  }

  late final __gcvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double,
              ffi.Int)>>('_gcvt_s');
  late final __gcvt_s = __gcvt_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, double, int)>();

  ffi.Pointer<ffi.Char> _gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __gcvt(
      _Value,
      _DigitCount,
      _Buffer,
    );
  }

  late final __gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('_gcvt');
  late final __gcvt = __gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ___mb_cur_max_func() {
    return ____mb_cur_max_func();
  }

  late final ____mb_cur_max_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('___mb_cur_max_func');
  late final ____mb_cur_max_func =
      ____mb_cur_max_funcPtr.asFunction<int Function()>();

  int ___mb_cur_max_l_func(
    _locale_t _Locale,
  ) {
    return ____mb_cur_max_l_func(
      _Locale,
    );
  }

  late final ____mb_cur_max_l_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(_locale_t)>>(
          '___mb_cur_max_l_func');
  late final ____mb_cur_max_l_func =
      ____mb_cur_max_l_funcPtr.asFunction<int Function(_locale_t)>();

  int mblen(
    ffi.Pointer<ffi.Char> _Ch,
    int _MaxCount,
  ) {
    return _mblen(
      _Ch,
      _MaxCount,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _mblen_l(
    ffi.Pointer<ffi.Char> _Ch,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mblen_l(
      _Ch,
      _MaxCount,
      _Locale,
    );
  }

  late final __mblen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Size, _locale_t)>>('_mblen_l');
  late final __mblen_l = __mblen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int _mbstrlen(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __mbstrlen(
      _String,
    );
  }

  late final __mbstrlenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>)>>(
          '_mbstrlen');
  late final __mbstrlen =
      __mbstrlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _mbstrlen_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __mbstrlen_l(
      _String,
      _Locale,
    );
  }

  late final __mbstrlen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_mbstrlen_l');
  late final __mbstrlen_l = __mbstrlen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _mbstrnlen(
    ffi.Pointer<ffi.Char> _String,
    int _MaxCount,
  ) {
    return __mbstrnlen(
      _String,
      _MaxCount,
    );
  }

  late final __mbstrnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('_mbstrnlen');
  late final __mbstrnlen =
      __mbstrnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _mbstrnlen_l(
    ffi.Pointer<ffi.Char> _String,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstrnlen_l(
      _String,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstrnlen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>, ffi.Size, _locale_t)>>('_mbstrnlen_l');
  late final __mbstrnlen_l = __mbstrnlen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> _DstCh,
    ffi.Pointer<ffi.Char> _SrcCh,
    int _SrcSizeInBytes,
  ) {
    return _mbtowc(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int _mbtowc_l(
    ffi.Pointer<ffi.WChar> _DstCh,
    ffi.Pointer<ffi.Char> _SrcCh,
    int _SrcSizeInBytes,
    _locale_t _Locale,
  ) {
    return __mbtowc_l(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
      _Locale,
    );
  }

  late final __mbtowc_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_mbtowc_l');
  late final __mbtowc_l = __mbtowc_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int mbstowcs_s(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.WChar> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Char> _SrcBuf,
    int _MaxCount,
  ) {
    return _mbstowcs_s(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
    );
  }

  late final _mbstowcs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Size)>>('mbstowcs_s');
  late final _mbstowcs_s = _mbstowcs_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> _Dest,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
  ) {
    return _mbstowcs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int _mbstowcs_s_l(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.WChar> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Char> _SrcBuf,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstowcs_s_l(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstowcs_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              _locale_t)>>('_mbstowcs_s_l');
  late final __mbstowcs_s_l = __mbstowcs_s_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int _mbstowcs_l(
    ffi.Pointer<ffi.WChar> _Dest,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstowcs_l(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstowcs_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_mbstowcs_l');
  late final __mbstowcs_l = __mbstowcs_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int wctomb(
    ffi.Pointer<ffi.Char> _MbCh,
    int _WCh,
  ) {
    return _wctomb(
      _MbCh,
      _WCh,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _wctomb_l(
    ffi.Pointer<ffi.Char> _MbCh,
    int _WCh,
    _locale_t _Locale,
  ) {
    return __wctomb_l(
      _MbCh,
      _WCh,
      _Locale,
    );
  }

  late final __wctomb_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.WChar, _locale_t)>>('_wctomb_l');
  late final __wctomb_l = __wctomb_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int wctomb_s(
    ffi.Pointer<ffi.Int> _SizeConverted,
    ffi.Pointer<ffi.Char> _MbCh,
    int _SizeInBytes,
    int _WCh,
  ) {
    return _wctomb_s(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
    );
  }

  late final _wctomb_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, rsize_t,
              ffi.WChar)>>('wctomb_s');
  late final _wctomb_s = _wctomb_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int, int)>();

  int _wctomb_s_l(
    ffi.Pointer<ffi.Int> _SizeConverted,
    ffi.Pointer<ffi.Char> _MbCh,
    int _SizeInBytes,
    int _WCh,
    _locale_t _Locale,
  ) {
    return __wctomb_s_l(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
      _Locale,
    );
  }

  late final __wctomb_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.WChar, _locale_t)>>('_wctomb_s_l');
  late final __wctomb_s_l = __wctomb_s_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int, int, _locale_t)>();

  int wcstombs_s(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Char> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.WChar> _Src,
    int _MaxCountInBytes,
  ) {
    return _wcstombs_s(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
    );
  }

  late final _wcstombs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcstombs_s');
  late final _wcstombs_s = _wcstombs_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.WChar>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> _Dest,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
  ) {
    return _wcstombs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int _wcstombs_s_l(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Char> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.WChar> _Src,
    int _MaxCountInBytes,
    _locale_t _Locale,
  ) {
    return __wcstombs_s_l(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
      _Locale,
    );
  }

  late final __wcstombs_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              _locale_t)>>('_wcstombs_s_l');
  late final __wcstombs_s_l = __wcstombs_s_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  int _wcstombs_l(
    ffi.Pointer<ffi.Char> _Dest,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcstombs_l(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcstombs_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size, _locale_t)>>('_wcstombs_l');
  late final __wcstombs_l = __wcstombs_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  ffi.Pointer<ffi.Char> _fullpath(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<ffi.Char> _Path,
    int _BufferCount,
  ) {
    return __fullpath(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final __fullpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('_fullpath');
  late final __fullpath = __fullpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int _makepath_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __makepath_s(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __makepath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_makepath_s');
  late final __makepath_s = __makepath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _makepath(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __makepath(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __makepathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_makepath');
  late final __makepath = __makepathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _splitpath(
    ffi.Pointer<ffi.Char> _FullPath,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __splitpath(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __splitpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_splitpath');
  late final __splitpath = __splitpathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int _splitpath_s(
    ffi.Pointer<ffi.Char> _FullPath,
    ffi.Pointer<ffi.Char> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.Char> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.Char> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.Char> _Ext,
    int _ExtCount,
  ) {
    return __splitpath_s(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final __splitpath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('_splitpath_s');
  late final __splitpath_s = __splitpath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int)>();

  int getenv_s(
    ffi.Pointer<ffi.Size> _RequiredCount,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return _getenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final _getenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>,
              rsize_t, ffi.Pointer<ffi.Char>)>>('getenv_s');
  late final _getenv_s = _getenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> __p___argc() {
    return ___p___argc();
  }

  late final ___p___argcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__p___argc');
  late final ___p___argc =
      ___p___argcPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> __p___argv() {
    return ___p___argv();
  }

  late final ___p___argvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>
              Function()>>('__p___argv');
  late final ___p___argv = ___p___argvPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> __p___wargv() {
    return ___p___wargv();
  }

  late final ___p___wargvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>>
              Function()>>('__p___wargv');
  late final ___p___wargv = ___p___wargvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> __p__environ() {
    return ___p__environ();
  }

  late final ___p__environPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>
              Function()>>('__p__environ');
  late final ___p__environ = ___p__environPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> __p__wenviron() {
    return ___p__wenviron();
  }

  late final ___p__wenvironPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>>
              Function()>>('__p__wenviron');
  late final ___p__wenviron = ___p__wenvironPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> Function()>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return _getenv(
      _VarName,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _dupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.Char>> _Buffer,
    ffi.Pointer<ffi.Size> _BufferCount,
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return __dupenv_s(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __dupenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>)>>('_dupenv_s');
  late final __dupenv_s = __dupenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> _Command,
  ) {
    return _system(
      _Command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _putenv(
    ffi.Pointer<ffi.Char> _EnvString,
  ) {
    return __putenv(
      _EnvString,
    );
  }

  late final __putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          '_putenv');
  late final __putenv =
      __putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _putenv_s(
    ffi.Pointer<ffi.Char> _Name,
    ffi.Pointer<ffi.Char> _Value,
  ) {
    return __putenv_s(
      _Name,
      _Value,
    );
  }

  late final __putenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_putenv_s');
  late final __putenv_s = __putenv_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _searchenv_s(
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _VarName,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
  ) {
    return __searchenv_s(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final __searchenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('_searchenv_s');
  late final __searchenv_s = __searchenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  void _searchenv(
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _VarName,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __searchenv(
      _Filename,
      _VarName,
      _Buffer,
    );
  }

  late final __searchenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_searchenv');
  late final __searchenv = __searchenvPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _seterrormode(
    int _Mode,
  ) {
    return __seterrormode(
      _Mode,
    );
  }

  late final __seterrormodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_seterrormode');
  late final __seterrormode =
      __seterrormodePtr.asFunction<void Function(int)>();

  void _beep(
    int _Frequency,
    int _Duration,
  ) {
    return __beep(
      _Frequency,
      _Duration,
    );
  }

  late final __beepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt)>>('_beep');
  late final __beep = __beepPtr.asFunction<void Function(int, int)>();

  void _sleep(
    int _Duration,
  ) {
    return __sleep(
      _Duration,
    );
  }

  late final __sleepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          '_sleep');
  late final __sleep = __sleepPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return _ecvt1(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt1 = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return _fcvt1(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt1 = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Char> _DstBuf,
  ) {
    return _gcvt1(
      _Value,
      _DigitCount,
      _DstBuf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt1 = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> itoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _itoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _itoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('itoa');
  late final _itoa1 = _itoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ltoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _ltoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ltoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Int)>>('ltoa');
  late final _ltoa1 = _ltoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  void swab(
    ffi.Pointer<ffi.Char> _Buf1,
    ffi.Pointer<ffi.Char> _Buf2,
    int _SizeInBytes,
  ) {
    return _swab1(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('swab');
  late final _swab1 = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ultoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _ultoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ultoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('ultoa');
  late final _ultoa1 = _ultoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> _EnvString,
  ) {
    return _putenv1(
      _EnvString,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv1 =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  _onexit_t onexit(
    _onexit_t _Func,
  ) {
    return _onexit1(
      _Func,
    );
  }

  late final _onexitPtr =
      _lookup<ffi.NativeFunction<_onexit_t Function(_onexit_t)>>('onexit');
  late final _onexit1 = _onexitPtr.asFunction<_onexit_t Function(_onexit_t)>();

  late final ffi.Pointer<ffi.Double> __HUGE = _lookup<ffi.Double>('_HUGE');

  double get _HUGE => __HUGE.value;

  set _HUGE(double value) => __HUGE.value = value;

  void _fperrraise(
    int _Except,
  ) {
    return __fperrraise(
      _Except,
    );
  }

  late final __fperrraisePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_fperrraise');
  late final __fperrraise = __fperrraisePtr.asFunction<void Function(int)>();

  int _dclass(
    double _X,
  ) {
    return __dclass(
      _X,
    );
  }

  late final __dclassPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Double)>>('_dclass');
  late final __dclass = __dclassPtr.asFunction<int Function(double)>();

  int _fdclass(
    double _X,
  ) {
    return __fdclass(
      _X,
    );
  }

  late final __fdclassPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Float)>>('_fdclass');
  late final __fdclass = __fdclassPtr.asFunction<int Function(double)>();

  int _dsign(
    double _X,
  ) {
    return __dsign(
      _X,
    );
  }

  late final __dsignPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('_dsign');
  late final __dsign = __dsignPtr.asFunction<int Function(double)>();

  int _fdsign(
    double _X,
  ) {
    return __fdsign(
      _X,
    );
  }

  late final __fdsignPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_fdsign');
  late final __fdsign = __fdsignPtr.asFunction<int Function(double)>();

  int _dpcomp(
    double _X,
    double _Y,
  ) {
    return __dpcomp(
      _X,
      _Y,
    );
  }

  late final __dpcompPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double, ffi.Double)>>(
          '_dpcomp');
  late final __dpcomp = __dpcompPtr.asFunction<int Function(double, double)>();

  int _fdpcomp(
    double _X,
    double _Y,
  ) {
    return __fdpcomp(
      _X,
      _Y,
    );
  }

  late final __fdpcompPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float, ffi.Float)>>(
          '_fdpcomp');
  late final __fdpcomp =
      __fdpcompPtr.asFunction<int Function(double, double)>();

  int _dtest(
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dtest(
      _Px,
    );
  }

  late final __dtestPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<ffi.Double>)>>(
          '_dtest');
  late final __dtest =
      __dtestPtr.asFunction<int Function(ffi.Pointer<ffi.Double>)>();

  int _fdtest(
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdtest(
      _Px,
    );
  }

  late final __fdtestPtr =
      _lookup<ffi.NativeFunction<ffi.Short Function(ffi.Pointer<ffi.Float>)>>(
          '_fdtest');
  late final __fdtest =
      __fdtestPtr.asFunction<int Function(ffi.Pointer<ffi.Float>)>();

  int _d_int(
    ffi.Pointer<ffi.Double> _Px,
    int _Xexp,
  ) {
    return __d_int(
      _Px,
      _Xexp,
    );
  }

  late final __d_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Double>, ffi.Short)>>('_d_int');
  late final __d_int =
      __d_intPtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int _fd_int(
    ffi.Pointer<ffi.Float> _Px,
    int _Xexp,
  ) {
    return __fd_int(
      _Px,
      _Xexp,
    );
  }

  late final __fd_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Float>, ffi.Short)>>('_fd_int');
  late final __fd_int =
      __fd_intPtr.asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int _dscale(
    ffi.Pointer<ffi.Double> _Px,
    int _Lexp,
  ) {
    return __dscale(
      _Px,
      _Lexp,
    );
  }

  late final __dscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Double>, ffi.Long)>>('_dscale');
  late final __dscale =
      __dscalePtr.asFunction<int Function(ffi.Pointer<ffi.Double>, int)>();

  int _fdscale(
    ffi.Pointer<ffi.Float> _Px,
    int _Lexp,
  ) {
    return __fdscale(
      _Px,
      _Lexp,
    );
  }

  late final __fdscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.Float>, ffi.Long)>>('_fdscale');
  late final __fdscale =
      __fdscalePtr.asFunction<int Function(ffi.Pointer<ffi.Float>, int)>();

  int _dunscale(
    ffi.Pointer<ffi.Short> _Pex,
    ffi.Pointer<ffi.Double> _Px,
  ) {
    return __dunscale(
      _Pex,
      _Px,
    );
  }

  late final __dunscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Double>)>>('_dunscale');
  late final __dunscale = __dunscalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Double>)>();

  int _fdunscale(
    ffi.Pointer<ffi.Short> _Pex,
    ffi.Pointer<ffi.Float> _Px,
  ) {
    return __fdunscale(
      _Pex,
      _Px,
    );
  }

  late final __fdunscalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>)>>('_fdunscale');
  late final __fdunscale = __fdunscalePtr.asFunction<
      int Function(ffi.Pointer<ffi.Short>, ffi.Pointer<ffi.Float>)>();

  int _dexp(
    ffi.Pointer<ffi.Double> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __dexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __dexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Double>, ffi.Double, ffi.Long)>>('_dexp');
  late final __dexp = __dexpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Double>, double, int)>();

  int _fdexp(
    ffi.Pointer<ffi.Float> _Px,
    double _Y,
    int _Eoff,
  ) {
    return __fdexp(
      _Px,
      _Y,
      _Eoff,
    );
  }

  late final __fdexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(
              ffi.Pointer<ffi.Float>, ffi.Float, ffi.Long)>>('_fdexp');
  late final __fdexp = __fdexpPtr
      .asFunction<int Function(ffi.Pointer<ffi.Float>, double, int)>();

  int _dnorm(
    ffi.Pointer<ffi.UnsignedShort> _Ps,
  ) {
    return __dnorm(
      _Ps,
    );
  }

  late final __dnormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.UnsignedShort>)>>('_dnorm');
  late final __dnorm =
      __dnormPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  int _fdnorm(
    ffi.Pointer<ffi.UnsignedShort> _Ps,
  ) {
    return __fdnorm(
      _Ps,
    );
  }

  late final __fdnormPtr = _lookup<
      ffi.NativeFunction<
          ffi.Short Function(ffi.Pointer<ffi.UnsignedShort>)>>('_fdnorm');
  late final __fdnorm =
      __fdnormPtr.asFunction<int Function(ffi.Pointer<ffi.UnsignedShort>)>();

  double _dpoly(
    double _X,
    ffi.Pointer<ffi.Double> _Tab,
    int _N,
  ) {
    return __dpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __dpolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Pointer<ffi.Double>, ffi.Int)>>('_dpoly');
  late final __dpoly = __dpolyPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Double>, int)>();

  double _fdpoly(
    double _X,
    ffi.Pointer<ffi.Float> _Tab,
    int _N,
  ) {
    return __fdpoly(
      _X,
      _Tab,
      _N,
    );
  }

  late final __fdpolyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Pointer<ffi.Float>, ffi.Int)>>('_fdpoly');
  late final __fdpoly = __fdpolyPtr
      .asFunction<double Function(double, ffi.Pointer<ffi.Float>, int)>();

  double _dlog(
    double _X,
    int _Baseflag,
  ) {
    return __dlog(
      _X,
      _Baseflag,
    );
  }

  late final __dlogPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          '_dlog');
  late final __dlog = __dlogPtr.asFunction<double Function(double, int)>();

  double _fdlog(
    double _X,
    int _Baseflag,
  ) {
    return __fdlog(
      _X,
      _Baseflag,
    );
  }

  late final __fdlogPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          '_fdlog');
  late final __fdlog = __fdlogPtr.asFunction<double Function(double, int)>();

  double _dsin(
    double _X,
    int _Qoff,
  ) {
    return __dsin(
      _X,
      _Qoff,
    );
  }

  late final __dsinPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.UnsignedInt)>>(
      '_dsin');
  late final __dsin = __dsinPtr.asFunction<double Function(double, int)>();

  double _fdsin(
    double _X,
    int _Qoff,
  ) {
    return __fdsin(
      _X,
      _Qoff,
    );
  }

  late final __fdsinPtr = _lookup<
          ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.UnsignedInt)>>(
      '_fdsin');
  late final __fdsin = __fdsinPtr.asFunction<double Function(double, int)>();

  late final ffi.Pointer<_float_const> __Denorm_C =
      _lookup<_float_const>('_Denorm_C');

  ffi.Pointer<_float_const> get _Denorm_C => __Denorm_C;

  late final ffi.Pointer<_float_const> __Inf_C =
      _lookup<_float_const>('_Inf_C');

  ffi.Pointer<_float_const> get _Inf_C => __Inf_C;

  late final ffi.Pointer<_float_const> __Nan_C =
      _lookup<_float_const>('_Nan_C');

  ffi.Pointer<_float_const> get _Nan_C => __Nan_C;

  late final ffi.Pointer<_float_const> __Snan_C =
      _lookup<_float_const>('_Snan_C');

  ffi.Pointer<_float_const> get _Snan_C => __Snan_C;

  late final ffi.Pointer<_float_const> __Hugeval_C =
      _lookup<_float_const>('_Hugeval_C');

  ffi.Pointer<_float_const> get _Hugeval_C => __Hugeval_C;

  late final ffi.Pointer<_float_const> __FDenorm_C =
      _lookup<_float_const>('_FDenorm_C');

  ffi.Pointer<_float_const> get _FDenorm_C => __FDenorm_C;

  late final ffi.Pointer<_float_const> __FInf_C =
      _lookup<_float_const>('_FInf_C');

  ffi.Pointer<_float_const> get _FInf_C => __FInf_C;

  late final ffi.Pointer<_float_const> __FNan_C =
      _lookup<_float_const>('_FNan_C');

  ffi.Pointer<_float_const> get _FNan_C => __FNan_C;

  late final ffi.Pointer<_float_const> __FSnan_C =
      _lookup<_float_const>('_FSnan_C');

  ffi.Pointer<_float_const> get _FSnan_C => __FSnan_C;

  late final ffi.Pointer<_float_const> __LDenorm_C =
      _lookup<_float_const>('_LDenorm_C');

  ffi.Pointer<_float_const> get _LDenorm_C => __LDenorm_C;

  late final ffi.Pointer<_float_const> __LInf_C =
      _lookup<_float_const>('_LInf_C');

  ffi.Pointer<_float_const> get _LInf_C => __LInf_C;

  late final ffi.Pointer<_float_const> __LNan_C =
      _lookup<_float_const>('_LNan_C');

  ffi.Pointer<_float_const> get _LNan_C => __LNan_C;

  late final ffi.Pointer<_float_const> __LSnan_C =
      _lookup<_float_const>('_LSnan_C');

  ffi.Pointer<_float_const> get _LSnan_C => __LSnan_C;

  late final ffi.Pointer<_float_const> __Eps_C =
      _lookup<_float_const>('_Eps_C');

  ffi.Pointer<_float_const> get _Eps_C => __Eps_C;

  late final ffi.Pointer<_float_const> __Rteps_C =
      _lookup<_float_const>('_Rteps_C');

  ffi.Pointer<_float_const> get _Rteps_C => __Rteps_C;

  late final ffi.Pointer<_float_const> __FEps_C =
      _lookup<_float_const>('_FEps_C');

  ffi.Pointer<_float_const> get _FEps_C => __FEps_C;

  late final ffi.Pointer<_float_const> __FRteps_C =
      _lookup<_float_const>('_FRteps_C');

  ffi.Pointer<_float_const> get _FRteps_C => __FRteps_C;

  late final ffi.Pointer<_float_const> __LEps_C =
      _lookup<_float_const>('_LEps_C');

  ffi.Pointer<_float_const> get _LEps_C => __LEps_C;

  late final ffi.Pointer<_float_const> __LRteps_C =
      _lookup<_float_const>('_LRteps_C');

  ffi.Pointer<_float_const> get _LRteps_C => __LRteps_C;

  late final ffi.Pointer<ffi.Double> __Zero_C = _lookup<ffi.Double>('_Zero_C');

  double get _Zero_C => __Zero_C.value;

  set _Zero_C(double value) => __Zero_C.value = value;

  late final ffi.Pointer<ffi.Double> __Xbig_C = _lookup<ffi.Double>('_Xbig_C');

  double get _Xbig_C => __Xbig_C.value;

  set _Xbig_C(double value) => __Xbig_C.value = value;

  late final ffi.Pointer<ffi.Float> __FZero_C = _lookup<ffi.Float>('_FZero_C');

  double get _FZero_C => __FZero_C.value;

  set _FZero_C(double value) => __FZero_C.value = value;

  late final ffi.Pointer<ffi.Float> __FXbig_C = _lookup<ffi.Float>('_FXbig_C');

  double get _FXbig_C => __FXbig_C.value;

  set _FXbig_C(double value) => __FXbig_C.value = value;

  double acos(
    double _X,
  ) {
    return _acos(
      _X,
    );
  }

  late final _acosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acos');
  late final _acos = _acosPtr.asFunction<double Function(double)>();

  double asin(
    double _X,
  ) {
    return _asin(
      _X,
    );
  }

  late final _asinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asin');
  late final _asin = _asinPtr.asFunction<double Function(double)>();

  double atan(
    double _X,
  ) {
    return _atan(
      _X,
    );
  }

  late final _atanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atan');
  late final _atan = _atanPtr.asFunction<double Function(double)>();

  double atan2(
    double _Y,
    double _X,
  ) {
    return _atan2(
      _Y,
      _X,
    );
  }

  late final _atan2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'atan2');
  late final _atan2 = _atan2Ptr.asFunction<double Function(double, double)>();

  double cos(
    double _X,
  ) {
    return _cos(
      _X,
    );
  }

  late final _cosPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cos');
  late final _cos = _cosPtr.asFunction<double Function(double)>();

  double cosh(
    double _X,
  ) {
    return _cosh(
      _X,
    );
  }

  late final _coshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cosh');
  late final _cosh = _coshPtr.asFunction<double Function(double)>();

  double exp(
    double _X,
  ) {
    return _exp(
      _X,
    );
  }

  late final _expPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp');
  late final _exp = _expPtr.asFunction<double Function(double)>();

  double fabs(
    double _X,
  ) {
    return _fabs(
      _X,
    );
  }

  late final _fabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('fabs');
  late final _fabs = _fabsPtr.asFunction<double Function(double)>();

  double fmod(
    double _X,
    double _Y,
  ) {
    return _fmod(
      _X,
      _Y,
    );
  }

  late final _fmodPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmod');
  late final _fmod = _fmodPtr.asFunction<double Function(double, double)>();

  double log(
    double _X,
  ) {
    return _log(
      _X,
    );
  }

  late final _logPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log');
  late final _log = _logPtr.asFunction<double Function(double)>();

  double log10(
    double _X,
  ) {
    return _log10(
      _X,
    );
  }

  late final _log10Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log10');
  late final _log10 = _log10Ptr.asFunction<double Function(double)>();

  double pow(
    double _X,
    double _Y,
  ) {
    return _pow(
      _X,
      _Y,
    );
  }

  late final _powPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'pow');
  late final _pow = _powPtr.asFunction<double Function(double, double)>();

  double sin(
    double _X,
  ) {
    return _sin(
      _X,
    );
  }

  late final _sinPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sin');
  late final _sin = _sinPtr.asFunction<double Function(double)>();

  double sinh(
    double _X,
  ) {
    return _sinh(
      _X,
    );
  }

  late final _sinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sinh');
  late final _sinh = _sinhPtr.asFunction<double Function(double)>();

  double sqrt(
    double _X,
  ) {
    return _sqrt(
      _X,
    );
  }

  late final _sqrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('sqrt');
  late final _sqrt = _sqrtPtr.asFunction<double Function(double)>();

  double tan(
    double _X,
  ) {
    return _tan(
      _X,
    );
  }

  late final _tanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tan');
  late final _tan = _tanPtr.asFunction<double Function(double)>();

  double tanh(
    double _X,
  ) {
    return _tanh(
      _X,
    );
  }

  late final _tanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tanh');
  late final _tanh = _tanhPtr.asFunction<double Function(double)>();

  double acosh(
    double _X,
  ) {
    return _acosh(
      _X,
    );
  }

  late final _acoshPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('acosh');
  late final _acosh = _acoshPtr.asFunction<double Function(double)>();

  double asinh(
    double _X,
  ) {
    return _asinh(
      _X,
    );
  }

  late final _asinhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('asinh');
  late final _asinh = _asinhPtr.asFunction<double Function(double)>();

  double atanh(
    double _X,
  ) {
    return _atanh(
      _X,
    );
  }

  late final _atanhPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('atanh');
  late final _atanh = _atanhPtr.asFunction<double Function(double)>();

  double _cabs(
    _complex _Complex_value,
  ) {
    return __cabs(
      _Complex_value,
    );
  }

  late final __cabsPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(_complex)>>('_cabs');
  late final __cabs = __cabsPtr.asFunction<double Function(_complex)>();

  double cbrt(
    double _X,
  ) {
    return _cbrt(
      _X,
    );
  }

  late final _cbrtPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('cbrt');
  late final _cbrt = _cbrtPtr.asFunction<double Function(double)>();

  double ceil(
    double _X,
  ) {
    return _ceil(
      _X,
    );
  }

  late final _ceilPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('ceil');
  late final _ceil = _ceilPtr.asFunction<double Function(double)>();

  double _chgsign(
    double _X,
  ) {
    return __chgsign(
      _X,
    );
  }

  late final __chgsignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_chgsign');
  late final __chgsign = __chgsignPtr.asFunction<double Function(double)>();

  double copysign(
    double _Number,
    double _Sign,
  ) {
    return _copysign1(
      _Number,
      _Sign,
    );
  }

  late final _copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'copysign');
  late final _copysign1 =
      _copysignPtr.asFunction<double Function(double, double)>();

  double _copysign(
    double _Number,
    double _Sign,
  ) {
    return __copysign(
      _Number,
      _Sign,
    );
  }

  late final __copysignPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_copysign');
  late final __copysign =
      __copysignPtr.asFunction<double Function(double, double)>();

  double erf(
    double _X,
  ) {
    return _erf(
      _X,
    );
  }

  late final _erfPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erf');
  late final _erf = _erfPtr.asFunction<double Function(double)>();

  double erfc(
    double _X,
  ) {
    return _erfc(
      _X,
    );
  }

  late final _erfcPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('erfc');
  late final _erfc = _erfcPtr.asFunction<double Function(double)>();

  double exp2(
    double _X,
  ) {
    return _exp2(
      _X,
    );
  }

  late final _exp2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('exp2');
  late final _exp2 = _exp2Ptr.asFunction<double Function(double)>();

  double expm1(
    double _X,
  ) {
    return _expm1(
      _X,
    );
  }

  late final _expm1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('expm1');
  late final _expm1 = _expm1Ptr.asFunction<double Function(double)>();

  double fdim(
    double _X,
    double _Y,
  ) {
    return _fdim(
      _X,
      _Y,
    );
  }

  late final _fdimPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fdim');
  late final _fdim = _fdimPtr.asFunction<double Function(double, double)>();

  double floor(
    double _X,
  ) {
    return _floor(
      _X,
    );
  }

  late final _floorPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('floor');
  late final _floor = _floorPtr.asFunction<double Function(double)>();

  double fma(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fma(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Double, ffi.Double)>>('fma');
  late final _fma =
      _fmaPtr.asFunction<double Function(double, double, double)>();

  double fmax(
    double _X,
    double _Y,
  ) {
    return _fmax(
      _X,
      _Y,
    );
  }

  late final _fmaxPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmax');
  late final _fmax = _fmaxPtr.asFunction<double Function(double, double)>();

  double fmin(
    double _X,
    double _Y,
  ) {
    return _fmin(
      _X,
      _Y,
    );
  }

  late final _fminPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'fmin');
  late final _fmin = _fminPtr.asFunction<double Function(double, double)>();

  double frexp(
    double _X,
    ffi.Pointer<ffi.Int> _Y,
  ) {
    return _frexp(
      _X,
      _Y,
    );
  }

  late final _frexpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Int>)>>('frexp');
  late final _frexp =
      _frexpPtr.asFunction<double Function(double, ffi.Pointer<ffi.Int>)>();

  double hypot(
    double _X,
    double _Y,
  ) {
    return _hypot1(
      _X,
      _Y,
    );
  }

  late final _hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'hypot');
  late final _hypot1 = _hypotPtr.asFunction<double Function(double, double)>();

  double _hypot(
    double _X,
    double _Y,
  ) {
    return __hypot(
      _X,
      _Y,
    );
  }

  late final __hypotPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_hypot');
  late final __hypot = __hypotPtr.asFunction<double Function(double, double)>();

  int ilogb(
    double _X,
  ) {
    return _ilogb(
      _X,
    );
  }

  late final _ilogbPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('ilogb');
  late final _ilogb = _ilogbPtr.asFunction<int Function(double)>();

  double ldexp(
    double _X,
    int _Y,
  ) {
    return _ldexp(
      _X,
      _Y,
    );
  }

  late final _ldexpPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'ldexp');
  late final _ldexp = _ldexpPtr.asFunction<double Function(double, int)>();

  double lgamma(
    double _X,
  ) {
    return _lgamma(
      _X,
    );
  }

  late final _lgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('lgamma');
  late final _lgamma = _lgammaPtr.asFunction<double Function(double)>();

  int llrint(
    double _X,
  ) {
    return _llrint(
      _X,
    );
  }

  late final _llrintPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llrint');
  late final _llrint = _llrintPtr.asFunction<int Function(double)>();

  int llround(
    double _X,
  ) {
    return _llround(
      _X,
    );
  }

  late final _llroundPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Double)>>('llround');
  late final _llround = _llroundPtr.asFunction<int Function(double)>();

  double log1p(
    double _X,
  ) {
    return _log1p(
      _X,
    );
  }

  late final _log1pPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log1p');
  late final _log1p = _log1pPtr.asFunction<double Function(double)>();

  double log2(
    double _X,
  ) {
    return _log2(
      _X,
    );
  }

  late final _log2Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('log2');
  late final _log2 = _log2Ptr.asFunction<double Function(double)>();

  double logb(
    double _X,
  ) {
    return _logb1(
      _X,
    );
  }

  late final _logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('logb');
  late final _logb1 = _logbPtr.asFunction<double Function(double)>();

  int lrint(
    double _X,
  ) {
    return _lrint(
      _X,
    );
  }

  late final _lrintPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lrint');
  late final _lrint = _lrintPtr.asFunction<int Function(double)>();

  int lround(
    double _X,
  ) {
    return _lround(
      _X,
    );
  }

  late final _lroundPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Double)>>('lround');
  late final _lround = _lroundPtr.asFunction<int Function(double)>();

  int _matherr(
    ffi.Pointer<_exception> _Except,
  ) {
    return __matherr(
      _Except,
    );
  }

  late final __matherrPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<_exception>)>>(
          '_matherr');
  late final __matherr =
      __matherrPtr.asFunction<int Function(ffi.Pointer<_exception>)>();

  double modf(
    double _X,
    ffi.Pointer<ffi.Double> _Y,
  ) {
    return _modf(
      _X,
      _Y,
    );
  }

  late final _modfPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Double, ffi.Pointer<ffi.Double>)>>('modf');
  late final _modf =
      _modfPtr.asFunction<double Function(double, ffi.Pointer<ffi.Double>)>();

  double nan(
    ffi.Pointer<ffi.Char> _X,
  ) {
    return _nan(
      _X,
    );
  }

  late final _nanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'nan');
  late final _nan =
      _nanPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nearbyint(
    double _X,
  ) {
    return _nearbyint(
      _X,
    );
  }

  late final _nearbyintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('nearbyint');
  late final _nearbyint = _nearbyintPtr.asFunction<double Function(double)>();

  double nextafter(
    double _X,
    double _Y,
  ) {
    return _nextafter1(
      _X,
      _Y,
    );
  }

  late final _nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'nextafter');
  late final _nextafter1 =
      _nextafterPtr.asFunction<double Function(double, double)>();

  double remainder(
    double _X,
    double _Y,
  ) {
    return _remainder(
      _X,
      _Y,
    );
  }

  late final _remainderPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          'remainder');
  late final _remainder =
      _remainderPtr.asFunction<double Function(double, double)>();

  double remquo(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int> _Z,
  ) {
    return _remquo(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(
              ffi.Double, ffi.Double, ffi.Pointer<ffi.Int>)>>('remquo');
  late final _remquo = _remquoPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double rint(
    double _X,
  ) {
    return _rint(
      _X,
    );
  }

  late final _rintPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('rint');
  late final _rint = _rintPtr.asFunction<double Function(double)>();

  double round(
    double _X,
  ) {
    return _round(
      _X,
    );
  }

  late final _roundPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('round');
  late final _round = _roundPtr.asFunction<double Function(double)>();

  double scalbln(
    double _X,
    int _Y,
  ) {
    return _scalbln(
      _X,
      _Y,
    );
  }

  late final _scalblnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          'scalbln');
  late final _scalbln = _scalblnPtr.asFunction<double Function(double, int)>();

  double scalbn(
    double _X,
    int _Y,
  ) {
    return _scalbn(
      _X,
      _Y,
    );
  }

  late final _scalbnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Int)>>(
          'scalbn');
  late final _scalbn = _scalbnPtr.asFunction<double Function(double, int)>();

  double tgamma(
    double _X,
  ) {
    return _tgamma(
      _X,
    );
  }

  late final _tgammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('tgamma');
  late final _tgamma = _tgammaPtr.asFunction<double Function(double)>();

  double trunc(
    double _X,
  ) {
    return _trunc(
      _X,
    );
  }

  late final _truncPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('trunc');
  late final _trunc = _truncPtr.asFunction<double Function(double)>();

  double _j0(
    double _X,
  ) {
    return __j0(
      _X,
    );
  }

  late final __j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j0');
  late final __j0 = __j0Ptr.asFunction<double Function(double)>();

  double _j1(
    double _X,
  ) {
    return __j1(
      _X,
    );
  }

  late final __j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_j1');
  late final __j1 = __j1Ptr.asFunction<double Function(double)>();

  double _jn(
    int _X,
    double _Y,
  ) {
    return __jn(
      _X,
      _Y,
    );
  }

  late final __jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '_jn');
  late final __jn = __jnPtr.asFunction<double Function(int, double)>();

  double _y0(
    double _X,
  ) {
    return __y0(
      _X,
    );
  }

  late final __y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y0');
  late final __y0 = __y0Ptr.asFunction<double Function(double)>();

  double _y1(
    double _X,
  ) {
    return __y1(
      _X,
    );
  }

  late final __y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_y1');
  late final __y1 = __y1Ptr.asFunction<double Function(double)>();

  double _yn(
    int _X,
    double _Y,
  ) {
    return __yn(
      _X,
      _Y,
    );
  }

  late final __ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          '_yn');
  late final __yn = __ynPtr.asFunction<double Function(int, double)>();

  double acoshf(
    double _X,
  ) {
    return _acoshf(
      _X,
    );
  }

  late final _acoshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acoshf');
  late final _acoshf = _acoshfPtr.asFunction<double Function(double)>();

  double asinhf(
    double _X,
  ) {
    return _asinhf(
      _X,
    );
  }

  late final _asinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinhf');
  late final _asinhf = _asinhfPtr.asFunction<double Function(double)>();

  double atanhf(
    double _X,
  ) {
    return _atanhf(
      _X,
    );
  }

  late final _atanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanhf');
  late final _atanhf = _atanhfPtr.asFunction<double Function(double)>();

  double cbrtf(
    double _X,
  ) {
    return _cbrtf(
      _X,
    );
  }

  late final _cbrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cbrtf');
  late final _cbrtf = _cbrtfPtr.asFunction<double Function(double)>();

  double _chgsignf(
    double _X,
  ) {
    return __chgsignf(
      _X,
    );
  }

  late final __chgsignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_chgsignf');
  late final __chgsignf = __chgsignfPtr.asFunction<double Function(double)>();

  double copysignf(
    double _Number,
    double _Sign,
  ) {
    return _copysignf1(
      _Number,
      _Sign,
    );
  }

  late final _copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'copysignf');
  late final _copysignf1 =
      _copysignfPtr.asFunction<double Function(double, double)>();

  double _copysignf(
    double _Number,
    double _Sign,
  ) {
    return __copysignf(
      _Number,
      _Sign,
    );
  }

  late final __copysignfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_copysignf');
  late final __copysignf =
      __copysignfPtr.asFunction<double Function(double, double)>();

  double erff(
    double _X,
  ) {
    return _erff(
      _X,
    );
  }

  late final _erffPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erff');
  late final _erff = _erffPtr.asFunction<double Function(double)>();

  double erfcf(
    double _X,
  ) {
    return _erfcf(
      _X,
    );
  }

  late final _erfcfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('erfcf');
  late final _erfcf = _erfcfPtr.asFunction<double Function(double)>();

  double expm1f(
    double _X,
  ) {
    return _expm1f(
      _X,
    );
  }

  late final _expm1fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expm1f');
  late final _expm1f = _expm1fPtr.asFunction<double Function(double)>();

  double exp2f(
    double _X,
  ) {
    return _exp2f(
      _X,
    );
  }

  late final _exp2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('exp2f');
  late final _exp2f = _exp2fPtr.asFunction<double Function(double)>();

  double fdimf(
    double _X,
    double _Y,
  ) {
    return _fdimf(
      _X,
      _Y,
    );
  }

  late final _fdimfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fdimf');
  late final _fdimf = _fdimfPtr.asFunction<double Function(double, double)>();

  double fmaf(
    double _X,
    double _Y,
    double _Z,
  ) {
    return _fmaf(
      _X,
      _Y,
      _Z,
    );
  }

  late final _fmafPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Float, ffi.Float)>>('fmaf');
  late final _fmaf =
      _fmafPtr.asFunction<double Function(double, double, double)>();

  double fmaxf(
    double _X,
    double _Y,
  ) {
    return _fmaxf(
      _X,
      _Y,
    );
  }

  late final _fmaxfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmaxf');
  late final _fmaxf = _fmaxfPtr.asFunction<double Function(double, double)>();

  double fminf(
    double _X,
    double _Y,
  ) {
    return _fminf(
      _X,
      _Y,
    );
  }

  late final _fminfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fminf');
  late final _fminf = _fminfPtr.asFunction<double Function(double, double)>();

  double _hypotf(
    double _X,
    double _Y,
  ) {
    return __hypotf(
      _X,
      _Y,
    );
  }

  late final __hypotfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_hypotf');
  late final __hypotf =
      __hypotfPtr.asFunction<double Function(double, double)>();

  int ilogbf(
    double _X,
  ) {
    return _ilogbf(
      _X,
    );
  }

  late final _ilogbfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('ilogbf');
  late final _ilogbf = _ilogbfPtr.asFunction<int Function(double)>();

  double lgammaf(
    double _X,
  ) {
    return _lgammaf(
      _X,
    );
  }

  late final _lgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('lgammaf');
  late final _lgammaf = _lgammafPtr.asFunction<double Function(double)>();

  int llrintf(
    double _X,
  ) {
    return _llrintf(
      _X,
    );
  }

  late final _llrintfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llrintf');
  late final _llrintf = _llrintfPtr.asFunction<int Function(double)>();

  int llroundf(
    double _X,
  ) {
    return _llroundf(
      _X,
    );
  }

  late final _llroundfPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Float)>>('llroundf');
  late final _llroundf = _llroundfPtr.asFunction<int Function(double)>();

  double log1pf(
    double _X,
  ) {
    return _log1pf(
      _X,
    );
  }

  late final _log1pfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log1pf');
  late final _log1pf = _log1pfPtr.asFunction<double Function(double)>();

  double log2f(
    double _X,
  ) {
    return _log2f(
      _X,
    );
  }

  late final _log2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log2f');
  late final _log2f = _log2fPtr.asFunction<double Function(double)>();

  double logbf(
    double _X,
  ) {
    return _logbf1(
      _X,
    );
  }

  late final _logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logbf');
  late final _logbf1 = _logbfPtr.asFunction<double Function(double)>();

  int lrintf(
    double _X,
  ) {
    return _lrintf(
      _X,
    );
  }

  late final _lrintfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lrintf');
  late final _lrintf = _lrintfPtr.asFunction<int Function(double)>();

  int lroundf(
    double _X,
  ) {
    return _lroundf(
      _X,
    );
  }

  late final _lroundfPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Float)>>('lroundf');
  late final _lroundf = _lroundfPtr.asFunction<int Function(double)>();

  double nanf(
    ffi.Pointer<ffi.Char> _X,
  ) {
    return _nanf(
      _X,
    );
  }

  late final _nanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Pointer<ffi.Char>)>>(
          'nanf');
  late final _nanf =
      _nanfPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  double nearbyintf(
    double _X,
  ) {
    return _nearbyintf(
      _X,
    );
  }

  late final _nearbyintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('nearbyintf');
  late final _nearbyintf = _nearbyintfPtr.asFunction<double Function(double)>();

  double nextafterf(
    double _X,
    double _Y,
  ) {
    return _nextafterf1(
      _X,
      _Y,
    );
  }

  late final _nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'nextafterf');
  late final _nextafterf1 =
      _nextafterfPtr.asFunction<double Function(double, double)>();

  double remainderf(
    double _X,
    double _Y,
  ) {
    return _remainderf(
      _X,
      _Y,
    );
  }

  late final _remainderfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'remainderf');
  late final _remainderf =
      _remainderfPtr.asFunction<double Function(double, double)>();

  double remquof(
    double _X,
    double _Y,
    ffi.Pointer<ffi.Int> _Z,
  ) {
    return _remquof(
      _X,
      _Y,
      _Z,
    );
  }

  late final _remquofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Float, ffi.Float, ffi.Pointer<ffi.Int>)>>('remquof');
  late final _remquof = _remquofPtr
      .asFunction<double Function(double, double, ffi.Pointer<ffi.Int>)>();

  double rintf(
    double _X,
  ) {
    return _rintf(
      _X,
    );
  }

  late final _rintfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('rintf');
  late final _rintf = _rintfPtr.asFunction<double Function(double)>();

  double roundf(
    double _X,
  ) {
    return _roundf(
      _X,
    );
  }

  late final _roundfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('roundf');
  late final _roundf = _roundfPtr.asFunction<double Function(double)>();

  double scalblnf(
    double _X,
    int _Y,
  ) {
    return _scalblnf(
      _X,
      _Y,
    );
  }

  late final _scalblnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          'scalblnf');
  late final _scalblnf =
      _scalblnfPtr.asFunction<double Function(double, int)>();

  double scalbnf(
    double _X,
    int _Y,
  ) {
    return _scalbnf(
      _X,
      _Y,
    );
  }

  late final _scalbnfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Int)>>(
          'scalbnf');
  late final _scalbnf = _scalbnfPtr.asFunction<double Function(double, int)>();

  double tgammaf(
    double _X,
  ) {
    return _tgammaf(
      _X,
    );
  }

  late final _tgammafPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tgammaf');
  late final _tgammaf = _tgammafPtr.asFunction<double Function(double)>();

  double truncf(
    double _X,
  ) {
    return _truncf(
      _X,
    );
  }

  late final _truncfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('truncf');
  late final _truncf = _truncfPtr.asFunction<double Function(double)>();

  double _logbf(
    double _X,
  ) {
    return __logbf(
      _X,
    );
  }

  late final __logbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('_logbf');
  late final __logbf = __logbfPtr.asFunction<double Function(double)>();

  double _nextafterf(
    double _X,
    double _Y,
  ) {
    return __nextafterf(
      _X,
      _Y,
    );
  }

  late final __nextafterfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          '_nextafterf');
  late final __nextafterf =
      __nextafterfPtr.asFunction<double Function(double, double)>();

  int _finitef(
    double _X,
  ) {
    return __finitef(
      _X,
    );
  }

  late final __finitefPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_finitef');
  late final __finitef = __finitefPtr.asFunction<int Function(double)>();

  int _isnanf(
    double _X,
  ) {
    return __isnanf(
      _X,
    );
  }

  late final __isnanfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_isnanf');
  late final __isnanf = __isnanfPtr.asFunction<int Function(double)>();

  int _fpclassf(
    double _X,
  ) {
    return __fpclassf(
      _X,
    );
  }

  late final __fpclassfPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Float)>>('_fpclassf');
  late final __fpclassf = __fpclassfPtr.asFunction<int Function(double)>();

  int _set_FMA3_enable(
    int _Flag,
  ) {
    return __set_FMA3_enable(
      _Flag,
    );
  }

  late final __set_FMA3_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          '_set_FMA3_enable');
  late final __set_FMA3_enable =
      __set_FMA3_enablePtr.asFunction<int Function(int)>();

  int _get_FMA3_enable() {
    return __get_FMA3_enable();
  }

  late final __get_FMA3_enablePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('_get_FMA3_enable');
  late final __get_FMA3_enable =
      __get_FMA3_enablePtr.asFunction<int Function()>();

  double acosf(
    double _X,
  ) {
    return _acosf(
      _X,
    );
  }

  late final _acosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('acosf');
  late final _acosf = _acosfPtr.asFunction<double Function(double)>();

  double asinf(
    double _X,
  ) {
    return _asinf(
      _X,
    );
  }

  late final _asinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('asinf');
  late final _asinf = _asinfPtr.asFunction<double Function(double)>();

  double atan2f(
    double _Y,
    double _X,
  ) {
    return _atan2f(
      _Y,
      _X,
    );
  }

  late final _atan2fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'atan2f');
  late final _atan2f = _atan2fPtr.asFunction<double Function(double, double)>();

  double atanf(
    double _X,
  ) {
    return _atanf(
      _X,
    );
  }

  late final _atanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('atanf');
  late final _atanf = _atanfPtr.asFunction<double Function(double)>();

  double ceilf(
    double _X,
  ) {
    return _ceilf(
      _X,
    );
  }

  late final _ceilfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('ceilf');
  late final _ceilf = _ceilfPtr.asFunction<double Function(double)>();

  double cosf(
    double _X,
  ) {
    return _cosf(
      _X,
    );
  }

  late final _cosfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('cosf');
  late final _cosf = _cosfPtr.asFunction<double Function(double)>();

  double coshf(
    double _X,
  ) {
    return _coshf(
      _X,
    );
  }

  late final _coshfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('coshf');
  late final _coshf = _coshfPtr.asFunction<double Function(double)>();

  double expf(
    double _X,
  ) {
    return _expf(
      _X,
    );
  }

  late final _expfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('expf');
  late final _expf = _expfPtr.asFunction<double Function(double)>();

  double floorf(
    double _X,
  ) {
    return _floorf(
      _X,
    );
  }

  late final _floorfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('floorf');
  late final _floorf = _floorfPtr.asFunction<double Function(double)>();

  double fmodf(
    double _X,
    double _Y,
  ) {
    return _fmodf(
      _X,
      _Y,
    );
  }

  late final _fmodfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'fmodf');
  late final _fmodf = _fmodfPtr.asFunction<double Function(double, double)>();

  double log10f(
    double _X,
  ) {
    return _log10f(
      _X,
    );
  }

  late final _log10fPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('log10f');
  late final _log10f = _log10fPtr.asFunction<double Function(double)>();

  double logf(
    double _X,
  ) {
    return _logf(
      _X,
    );
  }

  late final _logfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('logf');
  late final _logf = _logfPtr.asFunction<double Function(double)>();

  double modff(
    double _X,
    ffi.Pointer<ffi.Float> _Y,
  ) {
    return _modff(
      _X,
      _Y,
    );
  }

  late final _modffPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Float, ffi.Pointer<ffi.Float>)>>('modff');
  late final _modff =
      _modffPtr.asFunction<double Function(double, ffi.Pointer<ffi.Float>)>();

  double powf(
    double _X,
    double _Y,
  ) {
    return _powf(
      _X,
      _Y,
    );
  }

  late final _powfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Float)>>(
          'powf');
  late final _powf = _powfPtr.asFunction<double Function(double, double)>();

  double sinf(
    double _X,
  ) {
    return _sinf(
      _X,
    );
  }

  late final _sinfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinf');
  late final _sinf = _sinfPtr.asFunction<double Function(double)>();

  double sinhf(
    double _X,
  ) {
    return _sinhf(
      _X,
    );
  }

  late final _sinhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sinhf');
  late final _sinhf = _sinhfPtr.asFunction<double Function(double)>();

  double sqrtf(
    double _X,
  ) {
    return _sqrtf(
      _X,
    );
  }

  late final _sqrtfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('sqrtf');
  late final _sqrtf = _sqrtfPtr.asFunction<double Function(double)>();

  double tanf(
    double _X,
  ) {
    return _tanf(
      _X,
    );
  }

  late final _tanfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanf');
  late final _tanf = _tanfPtr.asFunction<double Function(double)>();

  double tanhf(
    double _X,
  ) {
    return _tanhf(
      _X,
    );
  }

  late final _tanhfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float)>>('tanhf');
  late final _tanhf = _tanhfPtr.asFunction<double Function(double)>();

  late final ffi.Pointer<ffi.Double> _HUGE1 = _lookup<ffi.Double>('HUGE');

  double get HUGE => _HUGE1.value;

  set HUGE(double value) => _HUGE1.value = value;

  double j0(
    double _X,
  ) {
    return _j01(
      _X,
    );
  }

  late final _j0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j0');
  late final _j01 = _j0Ptr.asFunction<double Function(double)>();

  double j1(
    double _X,
  ) {
    return _j11(
      _X,
    );
  }

  late final _j1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('j1');
  late final _j11 = _j1Ptr.asFunction<double Function(double)>();

  double jn(
    int _X,
    double _Y,
  ) {
    return _jn1(
      _X,
      _Y,
    );
  }

  late final _jnPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'jn');
  late final _jn1 = _jnPtr.asFunction<double Function(int, double)>();

  double y0(
    double _X,
  ) {
    return _y01(
      _X,
    );
  }

  late final _y0Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y0');
  late final _y01 = _y0Ptr.asFunction<double Function(double)>();

  double y1(
    double _X,
  ) {
    return _y11(
      _X,
    );
  }

  late final _y1Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('y1');
  late final _y11 = _y1Ptr.asFunction<double Function(double)>();

  double yn(
    int _X,
    double _Y,
  ) {
    return _yn1(
      _X,
      _Y,
    );
  }

  late final _ynPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Int, ffi.Double)>>(
          'yn');
  late final _yn1 = _ynPtr.asFunction<double Function(int, double)>();

  ffi.Pointer<ffi.WChar> _wasctime(
    ffi.Pointer<tm> _Tm,
  ) {
    return __wasctime(
      _Tm,
    );
  }

  late final __wasctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<tm>)>>(
      '_wasctime');
  late final __wasctime = __wasctimePtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<tm>)>();

  int _wasctime_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    ffi.Pointer<tm> _Tm,
  ) {
    return __wasctime_s(
      _Buffer,
      _SizeInWords,
      _Tm,
    );
  }

  late final __wasctime_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<tm>)>>('_wasctime_s');
  late final __wasctime_s = __wasctime_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<tm>)>();

  int wcsftime(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.WChar> _Format,
    ffi.Pointer<tm> _Tm,
  ) {
    return _wcsftime(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
    );
  }

  late final _wcsftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<ffi.WChar>, ffi.Pointer<tm>)>>('wcsftime');
  late final _wcsftime = _wcsftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<tm>)>();

  int _wcsftime_l(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    ffi.Pointer<ffi.WChar> _Format,
    ffi.Pointer<tm> _Tm,
    _locale_t _Locale,
  ) {
    return __wcsftime_l(
      _Buffer,
      _SizeInWords,
      _Format,
      _Tm,
      _Locale,
    );
  }

  late final __wcsftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<tm>,
              _locale_t)>>('_wcsftime_l');
  late final __wcsftime_l = __wcsftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<tm>, _locale_t)>();

  ffi.Pointer<ffi.WChar> _wctime32(
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __wctime32(
      _Time,
    );
  }

  late final __wctime32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<__time32_t>)>>('_wctime32');
  late final __wctime32 = __wctime32Ptr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<__time32_t>)>();

  int _wctime32_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __wctime32_s(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  late final __wctime32_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<__time32_t>)>>('_wctime32_s');
  late final __wctime32_s = __wctime32_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<__time32_t>)>();

  ffi.Pointer<ffi.WChar> _wctime64(
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __wctime64(
      _Time,
    );
  }

  late final __wctime64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<__time64_t>)>>('_wctime64');
  late final __wctime64 = __wctime64Ptr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<__time64_t>)>();

  int _wctime64_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __wctime64_s(
      _Buffer,
      _SizeInWords,
      _Time,
    );
  }

  late final __wctime64_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Pointer<__time64_t>)>>('_wctime64_s');
  late final __wctime64_s = __wctime64_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, int, ffi.Pointer<__time64_t>)>();

  int _wstrdate_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
  ) {
    return __wstrdate_s(
      _Buffer,
      _SizeInWords,
    );
  }

  late final __wstrdate_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wstrdate_s');
  late final __wstrdate_s =
      __wstrdate_sPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> _wstrdate(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __wstrdate(
      _Buffer,
    );
  }

  late final __wstrdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>)>>('_wstrdate');
  late final __wstrdate = __wstrdatePtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _wstrtime_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _SizeInWords,
  ) {
    return __wstrtime_s(
      _Buffer,
      _SizeInWords,
    );
  }

  late final __wstrtime_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wstrtime_s');
  late final __wstrtime_s =
      __wstrtime_sPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, int)>();

  ffi.Pointer<ffi.WChar> _wstrtime(
    ffi.Pointer<ffi.WChar> _Buffer,
  ) {
    return __wstrtime(
      _Buffer,
    );
  }

  late final __wstrtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Pointer<ffi.WChar>)>>('_wstrtime');
  late final __wstrtime = __wstrtimePtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.Int> __daylight() {
    return ___daylight();
  }

  late final ___daylightPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__daylight');
  late final ___daylight =
      ___daylightPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<ffi.Long> __dstbias() {
    return ___dstbias();
  }

  late final ___dstbiasPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Long> Function()>>(
          '__dstbias');
  late final ___dstbias =
      ___dstbiasPtr.asFunction<ffi.Pointer<ffi.Long> Function()>();

  ffi.Pointer<ffi.Long> __timezone() {
    return ___timezone();
  }

  late final ___timezonePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Long> Function()>>(
          '__timezone');
  late final ___timezone =
      ___timezonePtr.asFunction<ffi.Pointer<ffi.Long> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __tzname() {
    return ___tzname();
  }

  late final ___tznamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__tzname');
  late final ___tzname =
      ___tznamePtr.asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  int _get_daylight(
    ffi.Pointer<ffi.Int> _Daylight,
  ) {
    return __get_daylight(
      _Daylight,
    );
  }

  late final __get_daylightPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_daylight');
  late final __get_daylight =
      __get_daylightPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int _get_dstbias(
    ffi.Pointer<ffi.Long> _DaylightSavingsBias,
  ) {
    return __get_dstbias(
      _DaylightSavingsBias,
    );
  }

  late final __get_dstbiasPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Long>)>>(
          '_get_dstbias');
  late final __get_dstbias =
      __get_dstbiasPtr.asFunction<int Function(ffi.Pointer<ffi.Long>)>();

  int _get_timezone(
    ffi.Pointer<ffi.Long> _TimeZone,
  ) {
    return __get_timezone(
      _TimeZone,
    );
  }

  late final __get_timezonePtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Long>)>>(
          '_get_timezone');
  late final __get_timezone =
      __get_timezonePtr.asFunction<int Function(ffi.Pointer<ffi.Long>)>();

  int _get_tzname(
    ffi.Pointer<ffi.Size> _ReturnValue,
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    int _Index,
  ) {
    return __get_tzname(
      _ReturnValue,
      _Buffer,
      _SizeInBytes,
      _Index,
    );
  }

  late final __get_tznamePtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Int)>>('_get_tzname');
  late final __get_tzname = __get_tznamePtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> asctime(
    ffi.Pointer<tm> _Tm,
  ) {
    return _asctime(
      _Tm,
    );
  }

  late final _asctimePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>>(
      'asctime');
  late final _asctime =
      _asctimePtr.asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<tm>)>();

  int asctime_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<tm> _Tm,
  ) {
    return _asctime_s(
      _Buffer,
      _SizeInBytes,
      _Tm,
    );
  }

  late final _asctime_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>, ffi.Size, ffi.Pointer<tm>)>>('asctime_s');
  late final _asctime_s = _asctime_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<tm>)>();

  int clock() {
    return _clock();
  }

  late final _clockPtr =
      _lookup<ffi.NativeFunction<clock_t Function()>>('clock');
  late final _clock = _clockPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Char> _ctime32(
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __ctime32(
      _Time,
    );
  }

  late final __ctime32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<__time32_t>)>>('_ctime32');
  late final __ctime32 = __ctime32Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<__time32_t>)>();

  int _ctime32_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __ctime32_s(
      _Buffer,
      _SizeInBytes,
      _Time,
    );
  }

  late final __ctime32_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<__time32_t>)>>('_ctime32_s');
  late final __ctime32_s = __ctime32_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<__time32_t>)>();

  ffi.Pointer<ffi.Char> _ctime64(
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __ctime64(
      _Time,
    );
  }

  late final __ctime64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<__time64_t>)>>('_ctime64');
  late final __ctime64 = __ctime64Ptr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<__time64_t>)>();

  int _ctime64_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __ctime64_s(
      _Buffer,
      _SizeInBytes,
      _Time,
    );
  }

  late final __ctime64_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<__time64_t>)>>('_ctime64_s');
  late final __ctime64_s = __ctime64_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<__time64_t>)>();

  double _difftime32(
    int _Time1,
    int _Time2,
  ) {
    return __difftime32(
      _Time1,
      _Time2,
    );
  }

  late final __difftime32Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(__time32_t, __time32_t)>>(
          '_difftime32');
  late final __difftime32 =
      __difftime32Ptr.asFunction<double Function(int, int)>();

  double _difftime64(
    int _Time1,
    int _Time2,
  ) {
    return __difftime64(
      _Time1,
      _Time2,
    );
  }

  late final __difftime64Ptr =
      _lookup<ffi.NativeFunction<ffi.Double Function(__time64_t, __time64_t)>>(
          '_difftime64');
  late final __difftime64 =
      __difftime64Ptr.asFunction<double Function(int, int)>();

  ffi.Pointer<tm> _gmtime32(
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __gmtime32(
      _Time,
    );
  }

  late final __gmtime32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<__time32_t>)>>('_gmtime32');
  late final __gmtime32 = __gmtime32Ptr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<__time32_t>)>();

  int _gmtime32_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __gmtime32_s(
      _Tm,
      _Time,
    );
  }

  late final __gmtime32_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<tm>, ffi.Pointer<__time32_t>)>>('_gmtime32_s');
  late final __gmtime32_s = __gmtime32_sPtr
      .asFunction<int Function(ffi.Pointer<tm>, ffi.Pointer<__time32_t>)>();

  ffi.Pointer<tm> _gmtime64(
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __gmtime64(
      _Time,
    );
  }

  late final __gmtime64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<__time64_t>)>>('_gmtime64');
  late final __gmtime64 = __gmtime64Ptr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<__time64_t>)>();

  int _gmtime64_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __gmtime64_s(
      _Tm,
      _Time,
    );
  }

  late final __gmtime64_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<tm>, ffi.Pointer<__time64_t>)>>('_gmtime64_s');
  late final __gmtime64_s = __gmtime64_sPtr
      .asFunction<int Function(ffi.Pointer<tm>, ffi.Pointer<__time64_t>)>();

  ffi.Pointer<tm> _localtime32(
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __localtime32(
      _Time,
    );
  }

  late final __localtime32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<__time32_t>)>>('_localtime32');
  late final __localtime32 = __localtime32Ptr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<__time32_t>)>();

  int _localtime32_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __localtime32_s(
      _Tm,
      _Time,
    );
  }

  late final __localtime32_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<tm>, ffi.Pointer<__time32_t>)>>('_localtime32_s');
  late final __localtime32_s = __localtime32_sPtr
      .asFunction<int Function(ffi.Pointer<tm>, ffi.Pointer<__time32_t>)>();

  ffi.Pointer<tm> _localtime64(
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __localtime64(
      _Time,
    );
  }

  late final __localtime64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<tm> Function(ffi.Pointer<__time64_t>)>>('_localtime64');
  late final __localtime64 = __localtime64Ptr
      .asFunction<ffi.Pointer<tm> Function(ffi.Pointer<__time64_t>)>();

  int _localtime64_s(
    ffi.Pointer<tm> _Tm,
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __localtime64_s(
      _Tm,
      _Time,
    );
  }

  late final __localtime64_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<tm>, ffi.Pointer<__time64_t>)>>('_localtime64_s');
  late final __localtime64_s = __localtime64_sPtr
      .asFunction<int Function(ffi.Pointer<tm>, ffi.Pointer<__time64_t>)>();

  int _mkgmtime32(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mkgmtime32(
      _Tm,
    );
  }

  late final __mkgmtime32Ptr =
      _lookup<ffi.NativeFunction<__time32_t Function(ffi.Pointer<tm>)>>(
          '_mkgmtime32');
  late final __mkgmtime32 =
      __mkgmtime32Ptr.asFunction<int Function(ffi.Pointer<tm>)>();

  int _mkgmtime64(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mkgmtime64(
      _Tm,
    );
  }

  late final __mkgmtime64Ptr =
      _lookup<ffi.NativeFunction<__time64_t Function(ffi.Pointer<tm>)>>(
          '_mkgmtime64');
  late final __mkgmtime64 =
      __mkgmtime64Ptr.asFunction<int Function(ffi.Pointer<tm>)>();

  int _mktime32(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mktime32(
      _Tm,
    );
  }

  late final __mktime32Ptr =
      _lookup<ffi.NativeFunction<__time32_t Function(ffi.Pointer<tm>)>>(
          '_mktime32');
  late final __mktime32 =
      __mktime32Ptr.asFunction<int Function(ffi.Pointer<tm>)>();

  int _mktime64(
    ffi.Pointer<tm> _Tm,
  ) {
    return __mktime64(
      _Tm,
    );
  }

  late final __mktime64Ptr =
      _lookup<ffi.NativeFunction<__time64_t Function(ffi.Pointer<tm>)>>(
          '_mktime64');
  late final __mktime64 =
      __mktime64Ptr.asFunction<int Function(ffi.Pointer<tm>)>();

  int strftime(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
    ffi.Pointer<ffi.Char> _Format,
    ffi.Pointer<tm> _Tm,
  ) {
    return _strftime(
      _Buffer,
      _SizeInBytes,
      _Format,
      _Tm,
    );
  }

  late final _strftimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>, ffi.Pointer<tm>)>>('strftime');
  late final _strftime = _strftimePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>)>();

  int _strftime_l(
    ffi.Pointer<ffi.Char> _Buffer,
    int _MaxSize,
    ffi.Pointer<ffi.Char> _Format,
    ffi.Pointer<tm> _Tm,
    _locale_t _Locale,
  ) {
    return __strftime_l(
      _Buffer,
      _MaxSize,
      _Format,
      _Tm,
      _Locale,
    );
  }

  late final __strftime_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<tm>,
              _locale_t)>>('_strftime_l');
  late final __strftime_l = __strftime_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<tm>, _locale_t)>();

  int _strdate_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
  ) {
    return __strdate_s(
      _Buffer,
      _SizeInBytes,
    );
  }

  late final __strdate_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('_strdate_s');
  late final __strdate_s =
      __strdate_sPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> _strdate(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __strdate(
      _Buffer,
    );
  }

  late final __strdatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('_strdate');
  late final __strdate = __strdatePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _strtime_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _SizeInBytes,
  ) {
    return __strtime_s(
      _Buffer,
      _SizeInBytes,
    );
  }

  late final __strtime_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('_strtime_s');
  late final __strtime_s =
      __strtime_sPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> _strtime(
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __strtime(
      _Buffer,
    );
  }

  late final __strtimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('_strtime');
  late final __strtime = __strtimePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _time32(
    ffi.Pointer<__time32_t> _Time,
  ) {
    return __time32(
      _Time,
    );
  }

  late final __time32Ptr =
      _lookup<ffi.NativeFunction<__time32_t Function(ffi.Pointer<__time32_t>)>>(
          '_time32');
  late final __time32 =
      __time32Ptr.asFunction<int Function(ffi.Pointer<__time32_t>)>();

  int _time64(
    ffi.Pointer<__time64_t> _Time,
  ) {
    return __time64(
      _Time,
    );
  }

  late final __time64Ptr =
      _lookup<ffi.NativeFunction<__time64_t Function(ffi.Pointer<__time64_t>)>>(
          '_time64');
  late final __time64 =
      __time64Ptr.asFunction<int Function(ffi.Pointer<__time64_t>)>();

  int _timespec32_get(
    ffi.Pointer<_timespec32> _Ts,
    int _Base,
  ) {
    return __timespec32_get(
      _Ts,
      _Base,
    );
  }

  late final __timespec32_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_timespec32>, ffi.Int)>>('_timespec32_get');
  late final __timespec32_get = __timespec32_getPtr
      .asFunction<int Function(ffi.Pointer<_timespec32>, int)>();

  int _timespec64_get(
    ffi.Pointer<_timespec64> _Ts,
    int _Base,
  ) {
    return __timespec64_get(
      _Ts,
      _Base,
    );
  }

  late final __timespec64_getPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_timespec64>, ffi.Int)>>('_timespec64_get');
  late final __timespec64_get = __timespec64_getPtr
      .asFunction<int Function(ffi.Pointer<_timespec64>, int)>();

  void _tzset() {
    return __tzset();
  }

  late final __tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('_tzset');
  late final __tzset = __tzsetPtr.asFunction<void Function()>();

  int _getsystime(
    ffi.Pointer<tm> _Tm,
  ) {
    return __getsystime(
      _Tm,
    );
  }

  late final __getsystimePtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function(ffi.Pointer<tm>)>>(
          '_getsystime');
  late final __getsystime =
      __getsystimePtr.asFunction<int Function(ffi.Pointer<tm>)>();

  int _setsystime(
    ffi.Pointer<tm> _Tm,
    int _Milliseconds,
  ) {
    return __setsystime(
      _Tm,
      _Milliseconds,
    );
  }

  late final __setsystimePtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.Pointer<tm>, ffi.UnsignedInt)>>('_setsystime');
  late final __setsystime =
      __setsystimePtr.asFunction<int Function(ffi.Pointer<tm>, int)>();

  void tzset() {
    return _tzset1();
  }

  late final _tzsetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('tzset');
  late final _tzset1 = _tzsetPtr.asFunction<void Function()>();

  int _clearfp() {
    return __clearfp();
  }

  late final __clearfpPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('_clearfp');
  late final __clearfp = __clearfpPtr.asFunction<int Function()>();

  int _controlfp(
    int _NewValue,
    int _Mask,
  ) {
    return __controlfp(
      _NewValue,
      _Mask,
    );
  }

  late final __controlfpPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.UnsignedInt, ffi.UnsignedInt)>>('_controlfp');
  late final __controlfp = __controlfpPtr.asFunction<int Function(int, int)>();

  void _set_controlfp(
    int _NewValue,
    int _Mask,
  ) {
    return __set_controlfp(
      _NewValue,
      _Mask,
    );
  }

  late final __set_controlfpPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.UnsignedInt, ffi.UnsignedInt)>>('_set_controlfp');
  late final __set_controlfp =
      __set_controlfpPtr.asFunction<void Function(int, int)>();

  int _controlfp_s(
    ffi.Pointer<ffi.UnsignedInt> _CurrentState,
    int _NewValue,
    int _Mask,
  ) {
    return __controlfp_s(
      _CurrentState,
      _NewValue,
      _Mask,
    );
  }

  late final __controlfp_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.UnsignedInt>, ffi.UnsignedInt,
              ffi.UnsignedInt)>>('_controlfp_s');
  late final __controlfp_s = __controlfp_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedInt>, int, int)>();

  int _statusfp() {
    return __statusfp();
  }

  late final __statusfpPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedInt Function()>>('_statusfp');
  late final __statusfp = __statusfpPtr.asFunction<int Function()>();

  void _fpreset() {
    return __fpreset();
  }

  late final __fpresetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('_fpreset');
  late final __fpreset = __fpresetPtr.asFunction<void Function()>();

  int _control87(
    int _NewValue,
    int _Mask,
  ) {
    return __control87(
      _NewValue,
      _Mask,
    );
  }

  late final __control87Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.UnsignedInt, ffi.UnsignedInt)>>('_control87');
  late final __control87 = __control87Ptr.asFunction<int Function(int, int)>();

  ffi.Pointer<ffi.Int> __fpecode() {
    return ___fpecode();
  }

  late final ___fpecodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('__fpecode');
  late final ___fpecode =
      ___fpecodePtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int __fpe_flt_rounds() {
    return ___fpe_flt_rounds();
  }

  late final ___fpe_flt_roundsPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('__fpe_flt_rounds');
  late final ___fpe_flt_rounds =
      ___fpe_flt_roundsPtr.asFunction<int Function()>();

  double _scalb(
    double _X,
    int _Y,
  ) {
    return __scalb(
      _X,
      _Y,
    );
  }

  late final __scalbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Long)>>(
          '_scalb');
  late final __scalb = __scalbPtr.asFunction<double Function(double, int)>();

  double _logb(
    double _X,
  ) {
    return __logb(
      _X,
    );
  }

  late final __logbPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double)>>('_logb');
  late final __logb = __logbPtr.asFunction<double Function(double)>();

  double _nextafter(
    double _X,
    double _Y,
  ) {
    return __nextafter(
      _X,
      _Y,
    );
  }

  late final __nextafterPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Double, ffi.Double)>>(
          '_nextafter');
  late final __nextafter =
      __nextafterPtr.asFunction<double Function(double, double)>();

  int _finite(
    double _X,
  ) {
    return __finite(
      _X,
    );
  }

  late final __finitePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('_finite');
  late final __finite = __finitePtr.asFunction<int Function(double)>();

  int _isnan(
    double _X,
  ) {
    return __isnan(
      _X,
    );
  }

  late final __isnanPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('_isnan');
  late final __isnan = __isnanPtr.asFunction<int Function(double)>();

  int _fpclass(
    double _X,
  ) {
    return __fpclass(
      _X,
    );
  }

  late final __fpclassPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Double)>>('_fpclass');
  late final __fpclass = __fpclassPtr.asFunction<int Function(double)>();

  double _scalbf(
    double _X,
    int _Y,
  ) {
    return __scalbf(
      _X,
      _Y,
    );
  }

  late final __scalbfPtr =
      _lookup<ffi.NativeFunction<ffi.Float Function(ffi.Float, ffi.Long)>>(
          '_scalbf');
  late final __scalbf = __scalbfPtr.asFunction<double Function(double, int)>();

  void fpreset() {
    return _fpreset1();
  }

  late final _fpresetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('fpreset');
  late final _fpreset1 = _fpresetPtr.asFunction<void Function()>();

  int AnimateImages(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _AnimateImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AnimateImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('AnimateImages');
  late final _AnimateImages = _AnimateImagesPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetPageGeometry(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _GetPageGeometry(
      arg0,
    );
  }

  late final _GetPageGeometryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetPageGeometry');
  late final _GetPageGeometry = _GetPageGeometryPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int IsGeometry(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _IsGeometry(
      arg0,
    );
  }

  late final _IsGeometryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'IsGeometry');
  late final _IsGeometry =
      _IsGeometryPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int IsSceneGeometry(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _IsSceneGeometry(
      arg0,
      arg1,
    );
  }

  late final _IsSceneGeometryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('IsSceneGeometry');
  late final _IsSceneGeometry = _IsSceneGeometryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int)>();

  int GetGeometry(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ssize_t> arg1,
    ffi.Pointer<ssize_t> arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _GetGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _GetGeometryPtr = _lookup<
      ffi.NativeFunction<
          MagickStatusType Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ssize_t>,
              ffi.Pointer<ssize_t>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('GetGeometry');
  late final _GetGeometry = _GetGeometryPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ssize_t>,
          ffi.Pointer<ssize_t>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>)>();

  int ParseAbsoluteGeometry(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<RectangleInfo> arg1,
  ) {
    return _ParseAbsoluteGeometry(
      arg0,
      arg1,
    );
  }

  late final _ParseAbsoluteGeometryPtr = _lookup<
      ffi.NativeFunction<
          MagickStatusType Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<RectangleInfo>)>>('ParseAbsoluteGeometry');
  late final _ParseAbsoluteGeometry = _ParseAbsoluteGeometryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<RectangleInfo>)>();

  int ParseAffineGeometry(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<AffineMatrix> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ParseAffineGeometry(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ParseAffineGeometryPtr = _lookup<
      ffi.NativeFunction<
          MagickStatusType Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<AffineMatrix>,
              ffi.Pointer<ExceptionInfo>)>>('ParseAffineGeometry');
  late final _ParseAffineGeometry = _ParseAffineGeometryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<AffineMatrix>,
          ffi.Pointer<ExceptionInfo>)>();

  int ParseGeometry(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<GeometryInfo> arg1,
  ) {
    return _ParseGeometry(
      arg0,
      arg1,
    );
  }

  late final _ParseGeometryPtr = _lookup<
      ffi.NativeFunction<
          MagickStatusType Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<GeometryInfo>)>>('ParseGeometry');
  late final _ParseGeometry = _ParseGeometryPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<GeometryInfo>)>();

  int ParseGravityGeometry(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<RectangleInfo> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ParseGravityGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ParseGravityGeometryPtr = _lookup<
      ffi.NativeFunction<
          MagickStatusType Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ParseGravityGeometry');
  late final _ParseGravityGeometry = _ParseGravityGeometryPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<RectangleInfo>, ffi.Pointer<ExceptionInfo>)>();

  int ParseMetaGeometry(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ssize_t> arg1,
    ffi.Pointer<ssize_t> arg2,
    ffi.Pointer<ffi.Size> arg3,
    ffi.Pointer<ffi.Size> arg4,
  ) {
    return _ParseMetaGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ParseMetaGeometryPtr = _lookup<
      ffi.NativeFunction<
          MagickStatusType Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ssize_t>,
              ffi.Pointer<ssize_t>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('ParseMetaGeometry');
  late final _ParseMetaGeometry = _ParseMetaGeometryPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ssize_t>,
          ffi.Pointer<ssize_t>,
          ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>)>();

  int ParsePageGeometry(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<RectangleInfo> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ParsePageGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ParsePageGeometryPtr = _lookup<
      ffi.NativeFunction<
          MagickStatusType Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ParsePageGeometry');
  late final _ParsePageGeometry = _ParsePageGeometryPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<RectangleInfo>, ffi.Pointer<ExceptionInfo>)>();

  int ParseRegionGeometry(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<RectangleInfo> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ParseRegionGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ParseRegionGeometryPtr = _lookup<
      ffi.NativeFunction<
          MagickStatusType Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ParseRegionGeometry');
  late final _ParseRegionGeometry = _ParseRegionGeometryPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<RectangleInfo>, ffi.Pointer<ExceptionInfo>)>();

  void GravityAdjustGeometry(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<RectangleInfo> arg3,
  ) {
    return _GravityAdjustGeometry(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GravityAdjustGeometryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Size, ffi.Size, ffi.Int32,
              ffi.Pointer<RectangleInfo>)>>('GravityAdjustGeometry');
  late final _GravityAdjustGeometry = _GravityAdjustGeometryPtr.asFunction<
      void Function(int, int, int, ffi.Pointer<RectangleInfo>)>();

  void SetGeometry(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<RectangleInfo> arg1,
  ) {
    return _SetGeometry(
      arg0,
      arg1,
    );
  }

  late final _SetGeometryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, ffi.Pointer<RectangleInfo>)>>('SetGeometry');
  late final _SetGeometry = _SetGeometryPtr.asFunction<
      void Function(ffi.Pointer<Image>, ffi.Pointer<RectangleInfo>)>();

  void SetGeometryInfo(
    ffi.Pointer<GeometryInfo> arg0,
  ) {
    return _SetGeometryInfo(
      arg0,
    );
  }

  late final _SetGeometryInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<GeometryInfo>)>>(
          'SetGeometryInfo');
  late final _SetGeometryInfo = _SetGeometryInfoPtr.asFunction<
      void Function(ffi.Pointer<GeometryInfo>)>();

  int GetImageColorspaceType(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetImageColorspaceType(
      arg0,
      arg1,
    );
  }

  late final _GetImageColorspaceTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageColorspaceType');
  late final _GetImageColorspaceType = _GetImageColorspaceTypePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int SetImageColorspace(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetImageColorspace(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageColorspacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('SetImageColorspace');
  late final _SetImageColorspace = _SetImageColorspacePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int SetImageGray(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _SetImageGray(
      arg0,
      arg1,
    );
  }

  late final _SetImageGrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('SetImageGray');
  late final _SetImageGray = _SetImageGrayPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int SetImageMonochrome(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _SetImageMonochrome(
      arg0,
      arg1,
    );
  }

  late final _SetImageMonochromePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SetImageMonochrome');
  late final _SetImageMonochrome = _SetImageMonochromePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int TransformImageColorspace(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _TransformImageColorspace(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _TransformImageColorspacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('TransformImageColorspace');
  late final _TransformImageColorspace =
      _TransformImageColorspacePtr.asFunction<
          int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  /// Pixel method declarations.
  int SetPixelChannelMask(
    ffi.Pointer<Image> arg0,
    int arg1,
  ) {
    return _SetPixelChannelMask(
      arg0,
      arg1,
    );
  }

  late final _SetPixelChannelMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>, ffi.Int32)>>('SetPixelChannelMask');
  late final _SetPixelChannelMask = _SetPixelChannelMaskPtr.asFunction<
      int Function(ffi.Pointer<Image>, int)>();

  int ExportImagePixels(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
    int arg6,
    ffi.Pointer<ffi.Void> arg7,
    ffi.Pointer<ExceptionInfo> arg8,
  ) {
    return _ExportImagePixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _ExportImagePixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ssize_t,
              ssize_t,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ExceptionInfo>)>>('ExportImagePixels');
  late final _ExportImagePixels = _ExportImagePixelsPtr.asFunction<
      int Function(
          ffi.Pointer<Image>,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ExceptionInfo>)>();

  int ImportImagePixels(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
    int arg6,
    ffi.Pointer<ffi.Void> arg7,
    ffi.Pointer<ExceptionInfo> arg8,
  ) {
    return _ImportImagePixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
    );
  }

  late final _ImportImagePixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ssize_t,
              ssize_t,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ExceptionInfo>)>>('ImportImagePixels');
  late final _ImportImagePixels = _ImportImagePixelsPtr.asFunction<
      int Function(
          ffi.Pointer<Image>,
          int,
          int,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ExceptionInfo>)>();

  int InterpolatePixelChannel(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<CacheView_> arg1,
    int arg2,
    int arg3,
    double arg4,
    double arg5,
    ffi.Pointer<ffi.Double> arg6,
    ffi.Pointer<ExceptionInfo> arg7,
  ) {
    return _InterpolatePixelChannel(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _InterpolatePixelChannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<CacheView_>,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('InterpolatePixelChannel');
  late final _InterpolatePixelChannel = _InterpolatePixelChannelPtr.asFunction<
      int Function(
          ffi.Pointer<Image>,
          ffi.Pointer<CacheView_>,
          int,
          int,
          double,
          double,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ExceptionInfo>)>();

  int InterpolatePixelChannels(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<CacheView_> arg1,
    ffi.Pointer<Image> arg2,
    int arg3,
    double arg4,
    double arg5,
    ffi.Pointer<Quantum> arg6,
    ffi.Pointer<ExceptionInfo> arg7,
  ) {
    return _InterpolatePixelChannels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _InterpolatePixelChannelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<CacheView_>,
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<Quantum>,
              ffi.Pointer<ExceptionInfo>)>>('InterpolatePixelChannels');
  late final _InterpolatePixelChannels =
      _InterpolatePixelChannelsPtr.asFunction<
          int Function(
              ffi.Pointer<Image>,
              ffi.Pointer<CacheView_>,
              ffi.Pointer<Image>,
              int,
              double,
              double,
              ffi.Pointer<Quantum>,
              ffi.Pointer<ExceptionInfo>)>();

  int InterpolatePixelInfo(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<CacheView_> arg1,
    int arg2,
    double arg3,
    double arg4,
    ffi.Pointer<PixelInfo> arg5,
    ffi.Pointer<ExceptionInfo> arg6,
  ) {
    return _InterpolatePixelInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _InterpolatePixelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<CacheView_>,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('InterpolatePixelInfo');
  late final _InterpolatePixelInfo = _InterpolatePixelInfoPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<CacheView_>, int, double,
          double, ffi.Pointer<PixelInfo>, ffi.Pointer<ExceptionInfo>)>();

  int IsFuzzyEquivalencePixel(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Quantum> arg1,
    ffi.Pointer<Image> arg2,
    ffi.Pointer<Quantum> arg3,
  ) {
    return _IsFuzzyEquivalencePixel(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _IsFuzzyEquivalencePixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<Quantum>,
              ffi.Pointer<Image>,
              ffi.Pointer<Quantum>)>>('IsFuzzyEquivalencePixel');
  late final _IsFuzzyEquivalencePixel = _IsFuzzyEquivalencePixelPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Quantum>, ffi.Pointer<Image>,
          ffi.Pointer<Quantum>)>();

  int IsFuzzyEquivalencePixelInfo(
    ffi.Pointer<PixelInfo> arg0,
    ffi.Pointer<PixelInfo> arg1,
  ) {
    return _IsFuzzyEquivalencePixelInfo(
      arg0,
      arg1,
    );
  }

  late final _IsFuzzyEquivalencePixelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<PixelInfo>,
              ffi.Pointer<PixelInfo>)>>('IsFuzzyEquivalencePixelInfo');
  late final _IsFuzzyEquivalencePixelInfo =
      _IsFuzzyEquivalencePixelInfoPtr.asFunction<
          int Function(ffi.Pointer<PixelInfo>, ffi.Pointer<PixelInfo>)>();

  int SetPixelMetaChannels(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetPixelMetaChannels(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetPixelMetaChannelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('SetPixelMetaChannels');
  late final _SetPixelMetaChannels = _SetPixelMetaChannelsPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int SortImagePixels(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _SortImagePixels(
      arg0,
      arg1,
    );
  }

  late final _SortImagePixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SortImagePixels');
  late final _SortImagePixels = _SortImagePixelsPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  double GetPixelInfoIntensity(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<PixelInfo> arg1,
  ) {
    return _GetPixelInfoIntensity(
      arg0,
      arg1,
    );
  }

  late final _GetPixelInfoIntensityPtr = _lookup<
      ffi.NativeFunction<
          MagickRealType Function(ffi.Pointer<Image>,
              ffi.Pointer<PixelInfo>)>>('GetPixelInfoIntensity');
  late final _GetPixelInfoIntensity = _GetPixelInfoIntensityPtr.asFunction<
      double Function(ffi.Pointer<Image>, ffi.Pointer<PixelInfo>)>();

  double GetPixelIntensity(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Quantum> arg1,
  ) {
    return _GetPixelIntensity(
      arg0,
      arg1,
    );
  }

  late final _GetPixelIntensityPtr = _lookup<
      ffi.NativeFunction<
          MagickRealType Function(
              ffi.Pointer<Image>, ffi.Pointer<Quantum>)>>('GetPixelIntensity');
  late final _GetPixelIntensity = _GetPixelIntensityPtr.asFunction<
      double Function(ffi.Pointer<Image>, ffi.Pointer<Quantum>)>();

  ffi.Pointer<PixelChannelMap> AcquirePixelChannelMap() {
    return _AcquirePixelChannelMap();
  }

  late final _AcquirePixelChannelMapPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PixelChannelMap> Function()>>(
          'AcquirePixelChannelMap');
  late final _AcquirePixelChannelMap = _AcquirePixelChannelMapPtr.asFunction<
      ffi.Pointer<PixelChannelMap> Function()>();

  ffi.Pointer<PixelChannelMap> ClonePixelChannelMap(
    ffi.Pointer<PixelChannelMap> arg0,
  ) {
    return _ClonePixelChannelMap(
      arg0,
    );
  }

  late final _ClonePixelChannelMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PixelChannelMap> Function(
              ffi.Pointer<PixelChannelMap>)>>('ClonePixelChannelMap');
  late final _ClonePixelChannelMap = _ClonePixelChannelMapPtr.asFunction<
      ffi.Pointer<PixelChannelMap> Function(ffi.Pointer<PixelChannelMap>)>();

  ffi.Pointer<PixelChannelMap> DestroyPixelChannelMap(
    ffi.Pointer<PixelChannelMap> arg0,
  ) {
    return _DestroyPixelChannelMap(
      arg0,
    );
  }

  late final _DestroyPixelChannelMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PixelChannelMap> Function(
              ffi.Pointer<PixelChannelMap>)>>('DestroyPixelChannelMap');
  late final _DestroyPixelChannelMap = _DestroyPixelChannelMapPtr.asFunction<
      ffi.Pointer<PixelChannelMap> Function(ffi.Pointer<PixelChannelMap>)>();

  ffi.Pointer<PixelInfo> ClonePixelInfo(
    ffi.Pointer<PixelInfo> arg0,
  ) {
    return _ClonePixelInfo(
      arg0,
    );
  }

  late final _ClonePixelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PixelInfo> Function(
              ffi.Pointer<PixelInfo>)>>('ClonePixelInfo');
  late final _ClonePixelInfo = _ClonePixelInfoPtr.asFunction<
      ffi.Pointer<PixelInfo> Function(ffi.Pointer<PixelInfo>)>();

  double DecodePixelGamma(
    double arg0,
  ) {
    return _DecodePixelGamma(
      arg0,
    );
  }

  late final _DecodePixelGammaPtr =
      _lookup<ffi.NativeFunction<MagickRealType Function(MagickRealType)>>(
          'DecodePixelGamma');
  late final _DecodePixelGamma =
      _DecodePixelGammaPtr.asFunction<double Function(double)>();

  double EncodePixelGamma(
    double arg0,
  ) {
    return _EncodePixelGamma(
      arg0,
    );
  }

  late final _EncodePixelGammaPtr =
      _lookup<ffi.NativeFunction<MagickRealType Function(MagickRealType)>>(
          'EncodePixelGamma');
  late final _EncodePixelGamma =
      _EncodePixelGammaPtr.asFunction<double Function(double)>();

  void ConformPixelInfo(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<PixelInfo> arg1,
    ffi.Pointer<PixelInfo> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ConformPixelInfo(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ConformPixelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ConformPixelInfo');
  late final _ConformPixelInfo = _ConformPixelInfoPtr.asFunction<
      void Function(ffi.Pointer<Image>, ffi.Pointer<PixelInfo>,
          ffi.Pointer<PixelInfo>, ffi.Pointer<ExceptionInfo>)>();

  void GetPixelInfo(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<PixelInfo> arg1,
  ) {
    return _GetPixelInfo(
      arg0,
      arg1,
    );
  }

  late final _GetPixelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, ffi.Pointer<PixelInfo>)>>('GetPixelInfo');
  late final _GetPixelInfo = _GetPixelInfoPtr.asFunction<
      void Function(ffi.Pointer<Image>, ffi.Pointer<PixelInfo>)>();

  void InitializePixelChannelMap(
    ffi.Pointer<Image> arg0,
  ) {
    return _InitializePixelChannelMap(
      arg0,
    );
  }

  late final _InitializePixelChannelMapPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'InitializePixelChannelMap');
  late final _InitializePixelChannelMap = _InitializePixelChannelMapPtr
      .asFunction<void Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Image> ReadStream(
    ffi.Pointer<ImageInfo> arg0,
    StreamHandler arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ReadStream(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ReadStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>, StreamHandler,
              ffi.Pointer<ExceptionInfo>)>>('ReadStream');
  late final _ReadStream = _ReadStreamPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<ImageInfo>, StreamHandler, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> StreamImage(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<StreamInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _StreamImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _StreamImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<StreamInfo>,
              ffi.Pointer<ExceptionInfo>)>>('StreamImage');
  late final _StreamImage = _StreamImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>,
          ffi.Pointer<StreamInfo>, ffi.Pointer<ExceptionInfo>)>();

  int OpenStream(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<StreamInfo> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _OpenStream(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _OpenStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<StreamInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('OpenStream');
  late final _OpenStream = _OpenStreamPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<StreamInfo>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  int WriteStream(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    StreamHandler arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _WriteStream(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _WriteStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
              StreamHandler, ffi.Pointer<ExceptionInfo>)>>('WriteStream');
  late final _WriteStream = _WriteStreamPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>, StreamHandler,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<StreamInfo> AcquireStreamInfo(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _AcquireStreamInfo(
      arg0,
      arg1,
    );
  }

  late final _AcquireStreamInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StreamInfo> Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<ExceptionInfo>)>>('AcquireStreamInfo');
  late final _AcquireStreamInfo = _AcquireStreamInfoPtr.asFunction<
      ffi.Pointer<StreamInfo> Function(
          ffi.Pointer<ImageInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<StreamInfo> DestroyStreamInfo(
    ffi.Pointer<StreamInfo> arg0,
  ) {
    return _DestroyStreamInfo(
      arg0,
    );
  }

  late final _DestroyStreamInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StreamInfo> Function(
              ffi.Pointer<StreamInfo>)>>('DestroyStreamInfo');
  late final _DestroyStreamInfo = _DestroyStreamInfoPtr.asFunction<
      ffi.Pointer<StreamInfo> Function(ffi.Pointer<StreamInfo>)>();

  void SetStreamInfoMap(
    ffi.Pointer<StreamInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _SetStreamInfoMap(
      arg0,
      arg1,
    );
  }

  late final _SetStreamInfoMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<StreamInfo>,
              ffi.Pointer<ffi.Char>)>>('SetStreamInfoMap');
  late final _SetStreamInfoMap = _SetStreamInfoMapPtr.asFunction<
      void Function(ffi.Pointer<StreamInfo>, ffi.Pointer<ffi.Char>)>();

  void SetStreamInfoStorageType(
    ffi.Pointer<StreamInfo> arg0,
    int arg1,
  ) {
    return _SetStreamInfoStorageType(
      arg0,
      arg1,
    );
  }

  late final _SetStreamInfoStorageTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<StreamInfo>, ffi.Int32)>>('SetStreamInfoStorageType');
  late final _SetStreamInfoStorageType = _SetStreamInfoStorageTypePtr
      .asFunction<void Function(ffi.Pointer<StreamInfo>, int)>();

  ffi.Pointer<CustomStreamInfo> AcquireCustomStreamInfo(
    ffi.Pointer<ExceptionInfo> arg0,
  ) {
    return _AcquireCustomStreamInfo(
      arg0,
    );
  }

  late final _AcquireCustomStreamInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CustomStreamInfo> Function(
              ffi.Pointer<ExceptionInfo>)>>('AcquireCustomStreamInfo');
  late final _AcquireCustomStreamInfo = _AcquireCustomStreamInfoPtr.asFunction<
      ffi.Pointer<CustomStreamInfo> Function(ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<CustomStreamInfo> DestroyCustomStreamInfo(
    ffi.Pointer<CustomStreamInfo> arg0,
  ) {
    return _DestroyCustomStreamInfo(
      arg0,
    );
  }

  late final _DestroyCustomStreamInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CustomStreamInfo> Function(
              ffi.Pointer<CustomStreamInfo>)>>('DestroyCustomStreamInfo');
  late final _DestroyCustomStreamInfo = _DestroyCustomStreamInfoPtr.asFunction<
      ffi.Pointer<CustomStreamInfo> Function(ffi.Pointer<CustomStreamInfo>)>();

  ffi.Pointer<FILE> GetBlobFileHandle(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetBlobFileHandle(
      arg0,
    );
  }

  late final _GetBlobFileHandlePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<FILE> Function(ffi.Pointer<Image>)>>(
      'GetBlobFileHandle');
  late final _GetBlobFileHandle = _GetBlobFileHandlePtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Image> BlobToImage(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _BlobToImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BlobToImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('BlobToImage');
  late final _BlobToImage = _BlobToImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Void>,
          int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> PingBlob(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _PingBlob(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PingBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('PingBlob');
  late final _PingBlob = _PingBlobPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Void>,
          int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> CustomStreamToImage(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _CustomStreamToImage(
      arg0,
      arg1,
    );
  }

  late final _CustomStreamToImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<ExceptionInfo>)>>('CustomStreamToImage');
  late final _CustomStreamToImage = _CustomStreamToImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<ImageInfo>, ffi.Pointer<ExceptionInfo>)>();

  int BlobToFile(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _BlobToFile(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BlobToFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
              ffi.Size, ffi.Pointer<ExceptionInfo>)>>('BlobToFile');
  late final _BlobToFile = _BlobToFilePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>, int,
          ffi.Pointer<ExceptionInfo>)>();

  int FileToImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _FileToImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _FileToImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('FileToImage');
  late final _FileToImage = _FileToImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int GetBlobError(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetBlobError(
      arg0,
    );
  }

  late final _GetBlobErrorPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'GetBlobError');
  late final _GetBlobError =
      _GetBlobErrorPtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int ImageToFile(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ImageToFile(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ImageToFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('ImageToFile');
  late final _ImageToFile = _ImageToFilePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int InjectImageBlob(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<Image> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _InjectImageBlob(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _InjectImageBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('InjectImageBlob');
  late final _InjectImageBlob = _InjectImageBlobPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          ffi.Pointer<Image>,
          ffi.Pointer<Image>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int IsBlobExempt(
    ffi.Pointer<Image> arg0,
  ) {
    return _IsBlobExempt(
      arg0,
    );
  }

  late final _IsBlobExemptPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'IsBlobExempt');
  late final _IsBlobExempt =
      _IsBlobExemptPtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int IsBlobSeekable(
    ffi.Pointer<Image> arg0,
  ) {
    return _IsBlobSeekable(
      arg0,
    );
  }

  late final _IsBlobSeekablePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'IsBlobSeekable');
  late final _IsBlobSeekable =
      _IsBlobSeekablePtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int IsBlobTemporary(
    ffi.Pointer<Image> arg0,
  ) {
    return _IsBlobTemporary(
      arg0,
    );
  }

  late final _IsBlobTemporaryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'IsBlobTemporary');
  late final _IsBlobTemporary =
      _IsBlobTemporaryPtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int GetBlobSize(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetBlobSize(
      arg0,
    );
  }

  late final _GetBlobSizePtr =
      _lookup<ffi.NativeFunction<MagickSizeType Function(ffi.Pointer<Image>)>>(
          'GetBlobSize');
  late final _GetBlobSize =
      _GetBlobSizePtr.asFunction<int Function(ffi.Pointer<Image>)>();

  StreamHandler GetBlobStreamHandler(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetBlobStreamHandler(
      arg0,
    );
  }

  late final _GetBlobStreamHandlerPtr =
      _lookup<ffi.NativeFunction<StreamHandler Function(ffi.Pointer<Image>)>>(
          'GetBlobStreamHandler');
  late final _GetBlobStreamHandler = _GetBlobStreamHandlerPtr.asFunction<
      StreamHandler Function(ffi.Pointer<Image>)>();

  ffi.Pointer<ffi.Void> GetBlobStreamData(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetBlobStreamData(
      arg0,
    );
  }

  late final _GetBlobStreamDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<Image>)>>('GetBlobStreamData');
  late final _GetBlobStreamData = _GetBlobStreamDataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<Image>)>();

  void DestroyBlob(
    ffi.Pointer<Image> arg0,
  ) {
    return _DestroyBlob(
      arg0,
    );
  }

  late final _DestroyBlobPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'DestroyBlob');
  late final _DestroyBlob =
      _DestroyBlobPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void DuplicateBlob(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
  ) {
    return _DuplicateBlob(
      arg0,
      arg1,
    );
  }

  late final _DuplicateBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, ffi.Pointer<Image>)>>('DuplicateBlob');
  late final _DuplicateBlob = _DuplicateBlobPtr.asFunction<
      void Function(ffi.Pointer<Image>, ffi.Pointer<Image>)>();

  ffi.Pointer<ffi.Void> FileToBlob(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Size> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _FileToBlob(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _FileToBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('FileToBlob');
  late final _FileToBlob = _FileToBlobPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Void> ImageToBlob(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ffi.Size> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ImageToBlob(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ImageToBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('ImageToBlob');
  late final _ImageToBlob = _ImageToBlobPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  void ImageToCustomStream(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ImageToCustomStream(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ImageToCustomStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('ImageToCustomStream');
  late final _ImageToCustomStream = _ImageToCustomStreamPtr.asFunction<
      void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Void> ImagesToBlob(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ffi.Size> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ImagesToBlob(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ImagesToBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('ImagesToBlob');
  late final _ImagesToBlob = _ImagesToBlobPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  void ImagesToCustomStream(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ImagesToCustomStream(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ImagesToCustomStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('ImagesToCustomStream');
  late final _ImagesToCustomStream = _ImagesToCustomStreamPtr.asFunction<
      void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  void SetBlobExempt(
    ffi.Pointer<Image> arg0,
    int arg1,
  ) {
    return _SetBlobExempt(
      arg0,
      arg1,
    );
  }

  late final _SetBlobExemptPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int32)>>(
      'SetBlobExempt');
  late final _SetBlobExempt =
      _SetBlobExemptPtr.asFunction<void Function(ffi.Pointer<Image>, int)>();

  void SetCustomStreamData(
    ffi.Pointer<CustomStreamInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _SetCustomStreamData(
      arg0,
      arg1,
    );
  }

  late final _SetCustomStreamDataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CustomStreamInfo>,
              ffi.Pointer<ffi.Void>)>>('SetCustomStreamData');
  late final _SetCustomStreamData = _SetCustomStreamDataPtr.asFunction<
      void Function(ffi.Pointer<CustomStreamInfo>, ffi.Pointer<ffi.Void>)>();

  void SetCustomStreamReader(
    ffi.Pointer<CustomStreamInfo> arg0,
    CustomStreamHandler arg1,
  ) {
    return _SetCustomStreamReader(
      arg0,
      arg1,
    );
  }

  late final _SetCustomStreamReaderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CustomStreamInfo>,
              CustomStreamHandler)>>('SetCustomStreamReader');
  late final _SetCustomStreamReader = _SetCustomStreamReaderPtr.asFunction<
      void Function(ffi.Pointer<CustomStreamInfo>, CustomStreamHandler)>();

  void SetCustomStreamSeeker(
    ffi.Pointer<CustomStreamInfo> arg0,
    CustomStreamSeeker arg1,
  ) {
    return _SetCustomStreamSeeker(
      arg0,
      arg1,
    );
  }

  late final _SetCustomStreamSeekerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CustomStreamInfo>,
              CustomStreamSeeker)>>('SetCustomStreamSeeker');
  late final _SetCustomStreamSeeker = _SetCustomStreamSeekerPtr.asFunction<
      void Function(ffi.Pointer<CustomStreamInfo>, CustomStreamSeeker)>();

  void SetCustomStreamTeller(
    ffi.Pointer<CustomStreamInfo> arg0,
    CustomStreamTeller arg1,
  ) {
    return _SetCustomStreamTeller(
      arg0,
      arg1,
    );
  }

  late final _SetCustomStreamTellerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CustomStreamInfo>,
              CustomStreamTeller)>>('SetCustomStreamTeller');
  late final _SetCustomStreamTeller = _SetCustomStreamTellerPtr.asFunction<
      void Function(ffi.Pointer<CustomStreamInfo>, CustomStreamTeller)>();

  void SetCustomStreamWriter(
    ffi.Pointer<CustomStreamInfo> arg0,
    CustomStreamHandler arg1,
  ) {
    return _SetCustomStreamWriter(
      arg0,
      arg1,
    );
  }

  late final _SetCustomStreamWriterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<CustomStreamInfo>,
              CustomStreamHandler)>>('SetCustomStreamWriter');
  late final _SetCustomStreamWriter = _SetCustomStreamWriterPtr.asFunction<
      void Function(ffi.Pointer<CustomStreamInfo>, CustomStreamHandler)>();

  ffi.Pointer<CacheView> AcquireAuthenticCacheView(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _AcquireAuthenticCacheView(
      arg0,
      arg1,
    );
  }

  late final _AcquireAuthenticCacheViewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CacheView> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('AcquireAuthenticCacheView');
  late final _AcquireAuthenticCacheView =
      _AcquireAuthenticCacheViewPtr.asFunction<
          ffi.Pointer<CacheView> Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<CacheView> AcquireVirtualCacheView(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _AcquireVirtualCacheView(
      arg0,
      arg1,
    );
  }

  late final _AcquireVirtualCacheViewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CacheView> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('AcquireVirtualCacheView');
  late final _AcquireVirtualCacheView = _AcquireVirtualCacheViewPtr.asFunction<
      ffi.Pointer<CacheView> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<CacheView> CloneCacheView(
    ffi.Pointer<CacheView> arg0,
  ) {
    return _CloneCacheView(
      arg0,
    );
  }

  late final _CloneCacheViewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CacheView> Function(
              ffi.Pointer<CacheView>)>>('CloneCacheView');
  late final _CloneCacheView = _CloneCacheViewPtr.asFunction<
      ffi.Pointer<CacheView> Function(ffi.Pointer<CacheView>)>();

  ffi.Pointer<CacheView> DestroyCacheView(
    ffi.Pointer<CacheView> arg0,
  ) {
    return _DestroyCacheView(
      arg0,
    );
  }

  late final _DestroyCacheViewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CacheView> Function(
              ffi.Pointer<CacheView>)>>('DestroyCacheView');
  late final _DestroyCacheView = _DestroyCacheViewPtr.asFunction<
      ffi.Pointer<CacheView> Function(ffi.Pointer<CacheView>)>();

  int GetCacheViewStorageClass(
    ffi.Pointer<CacheView> arg0,
  ) {
    return _GetCacheViewStorageClass(
      arg0,
    );
  }

  late final _GetCacheViewStorageClassPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CacheView>)>>(
          'GetCacheViewStorageClass');
  late final _GetCacheViewStorageClass = _GetCacheViewStorageClassPtr
      .asFunction<int Function(ffi.Pointer<CacheView>)>();

  int GetCacheViewColorspace(
    ffi.Pointer<CacheView> arg0,
  ) {
    return _GetCacheViewColorspace(
      arg0,
    );
  }

  late final _GetCacheViewColorspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<CacheView>)>>(
          'GetCacheViewColorspace');
  late final _GetCacheViewColorspace = _GetCacheViewColorspacePtr.asFunction<
      int Function(ffi.Pointer<CacheView>)>();

  ffi.Pointer<Image> GetCacheViewImage(
    ffi.Pointer<CacheView> arg0,
  ) {
    return _GetCacheViewImage(
      arg0,
    );
  }

  late final _GetCacheViewImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<CacheView>)>>('GetCacheViewImage');
  late final _GetCacheViewImage = _GetCacheViewImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<CacheView>)>();

  ffi.Pointer<Quantum> GetCacheViewVirtualPixels(
    ffi.Pointer<CacheView> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _GetCacheViewVirtualPixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _GetCacheViewVirtualPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<CacheView>,
              ssize_t,
              ssize_t,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('GetCacheViewVirtualPixels');
  late final _GetCacheViewVirtualPixels =
      _GetCacheViewVirtualPixelsPtr.asFunction<
          ffi.Pointer<Quantum> Function(ffi.Pointer<CacheView>, int, int, int,
              int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Quantum> GetCacheViewVirtualPixelQueue(
    ffi.Pointer<CacheView> arg0,
  ) {
    return _GetCacheViewVirtualPixelQueue(
      arg0,
    );
  }

  late final _GetCacheViewVirtualPixelQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<CacheView>)>>('GetCacheViewVirtualPixelQueue');
  late final _GetCacheViewVirtualPixelQueue = _GetCacheViewVirtualPixelQueuePtr
      .asFunction<ffi.Pointer<Quantum> Function(ffi.Pointer<CacheView>)>();

  ffi.Pointer<ffi.Void> GetCacheViewVirtualMetacontent(
    ffi.Pointer<CacheView> arg0,
  ) {
    return _GetCacheViewVirtualMetacontent(
      arg0,
    );
  }

  late final _GetCacheViewVirtualMetacontentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CacheView>)>>('GetCacheViewVirtualMetacontent');
  late final _GetCacheViewVirtualMetacontent =
      _GetCacheViewVirtualMetacontentPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<CacheView>)>();

  int GetOneCacheViewAuthenticPixel(
    ffi.Pointer<CacheView> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<Quantum> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _GetOneCacheViewAuthenticPixel(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _GetOneCacheViewAuthenticPixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CacheView>,
              ssize_t,
              ssize_t,
              ffi.Pointer<Quantum>,
              ffi.Pointer<ExceptionInfo>)>>('GetOneCacheViewAuthenticPixel');
  late final _GetOneCacheViewAuthenticPixel =
      _GetOneCacheViewAuthenticPixelPtr.asFunction<
          int Function(ffi.Pointer<CacheView>, int, int, ffi.Pointer<Quantum>,
              ffi.Pointer<ExceptionInfo>)>();

  int GetOneCacheViewVirtualMethodPixel(
    ffi.Pointer<CacheView> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<Quantum> arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _GetOneCacheViewVirtualMethodPixel(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _GetOneCacheViewVirtualMethodPixelPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<CacheView>, ffi.Int32, ssize_t,
                  ssize_t, ffi.Pointer<Quantum>, ffi.Pointer<ExceptionInfo>)>>(
      'GetOneCacheViewVirtualMethodPixel');
  late final _GetOneCacheViewVirtualMethodPixel =
      _GetOneCacheViewVirtualMethodPixelPtr.asFunction<
          int Function(ffi.Pointer<CacheView>, int, int, int,
              ffi.Pointer<Quantum>, ffi.Pointer<ExceptionInfo>)>();

  int GetOneCacheViewVirtualPixel(
    ffi.Pointer<CacheView> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<Quantum> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _GetOneCacheViewVirtualPixel(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _GetOneCacheViewVirtualPixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CacheView>,
              ssize_t,
              ssize_t,
              ffi.Pointer<Quantum>,
              ffi.Pointer<ExceptionInfo>)>>('GetOneCacheViewVirtualPixel');
  late final _GetOneCacheViewVirtualPixel =
      _GetOneCacheViewVirtualPixelPtr.asFunction<
          int Function(ffi.Pointer<CacheView>, int, int, ffi.Pointer<Quantum>,
              ffi.Pointer<ExceptionInfo>)>();

  int GetOneCacheViewVirtualPixelInfo(
    ffi.Pointer<CacheView> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<PixelInfo> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _GetOneCacheViewVirtualPixelInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _GetOneCacheViewVirtualPixelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<CacheView>,
              ssize_t,
              ssize_t,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('GetOneCacheViewVirtualPixelInfo');
  late final _GetOneCacheViewVirtualPixelInfo =
      _GetOneCacheViewVirtualPixelInfoPtr.asFunction<
          int Function(ffi.Pointer<CacheView>, int, int, ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>();

  int SetCacheViewStorageClass(
    ffi.Pointer<CacheView> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetCacheViewStorageClass(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetCacheViewStorageClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CacheView>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('SetCacheViewStorageClass');
  late final _SetCacheViewStorageClass =
      _SetCacheViewStorageClassPtr.asFunction<
          int Function(
              ffi.Pointer<CacheView>, int, ffi.Pointer<ExceptionInfo>)>();

  int SetCacheViewVirtualPixelMethod(
    ffi.Pointer<CacheView> arg0,
    int arg1,
  ) {
    return _SetCacheViewVirtualPixelMethod(
      arg0,
      arg1,
    );
  }

  late final _SetCacheViewVirtualPixelMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CacheView>,
              ffi.Int32)>>('SetCacheViewVirtualPixelMethod');
  late final _SetCacheViewVirtualPixelMethod =
      _SetCacheViewVirtualPixelMethodPtr.asFunction<
          int Function(ffi.Pointer<CacheView>, int)>();

  int SyncCacheViewAuthenticPixels(
    ffi.Pointer<CacheView> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _SyncCacheViewAuthenticPixels(
      arg0,
      arg1,
    );
  }

  late final _SyncCacheViewAuthenticPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<CacheView>,
              ffi.Pointer<ExceptionInfo>)>>('SyncCacheViewAuthenticPixels');
  late final _SyncCacheViewAuthenticPixels =
      _SyncCacheViewAuthenticPixelsPtr.asFunction<
          int Function(ffi.Pointer<CacheView>, ffi.Pointer<ExceptionInfo>)>();

  int GetCacheViewExtent(
    ffi.Pointer<CacheView> arg0,
  ) {
    return _GetCacheViewExtent(
      arg0,
    );
  }

  late final _GetCacheViewExtentPtr = _lookup<
          ffi.NativeFunction<MagickSizeType Function(ffi.Pointer<CacheView>)>>(
      'GetCacheViewExtent');
  late final _GetCacheViewExtent =
      _GetCacheViewExtentPtr.asFunction<int Function(ffi.Pointer<CacheView>)>();

  ffi.Pointer<Quantum> GetCacheViewAuthenticPixelQueue(
    ffi.Pointer<CacheView> arg0,
  ) {
    return _GetCacheViewAuthenticPixelQueue(
      arg0,
    );
  }

  late final _GetCacheViewAuthenticPixelQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<CacheView>)>>('GetCacheViewAuthenticPixelQueue');
  late final _GetCacheViewAuthenticPixelQueue =
      _GetCacheViewAuthenticPixelQueuePtr.asFunction<
          ffi.Pointer<Quantum> Function(ffi.Pointer<CacheView>)>();

  ffi.Pointer<Quantum> GetCacheViewAuthenticPixels(
    ffi.Pointer<CacheView> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _GetCacheViewAuthenticPixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _GetCacheViewAuthenticPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<CacheView>,
              ssize_t,
              ssize_t,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('GetCacheViewAuthenticPixels');
  late final _GetCacheViewAuthenticPixels =
      _GetCacheViewAuthenticPixelsPtr.asFunction<
          ffi.Pointer<Quantum> Function(ffi.Pointer<CacheView>, int, int, int,
              int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Quantum> QueueCacheViewAuthenticPixels(
    ffi.Pointer<CacheView> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _QueueCacheViewAuthenticPixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _QueueCacheViewAuthenticPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<CacheView>,
              ssize_t,
              ssize_t,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('QueueCacheViewAuthenticPixels');
  late final _QueueCacheViewAuthenticPixels =
      _QueueCacheViewAuthenticPixelsPtr.asFunction<
          ffi.Pointer<Quantum> Function(ffi.Pointer<CacheView>, int, int, int,
              int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Void> GetCacheViewAuthenticMetacontent(
    ffi.Pointer<CacheView> arg0,
  ) {
    return _GetCacheViewAuthenticMetacontent(
      arg0,
    );
  }

  late final _GetCacheViewAuthenticMetacontentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<CacheView>)>>('GetCacheViewAuthenticMetacontent');
  late final _GetCacheViewAuthenticMetacontent =
      _GetCacheViewAuthenticMetacontentPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<CacheView>)>();

  ffi.Pointer<SemaphoreInfo> AcquireSemaphoreInfo() {
    return _AcquireSemaphoreInfo();
  }

  late final _AcquireSemaphoreInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<SemaphoreInfo> Function()>>(
          'AcquireSemaphoreInfo');
  late final _AcquireSemaphoreInfo = _AcquireSemaphoreInfoPtr.asFunction<
      ffi.Pointer<SemaphoreInfo> Function()>();

  void ActivateSemaphoreInfo(
    ffi.Pointer<ffi.Pointer<SemaphoreInfo>> arg0,
  ) {
    return _ActivateSemaphoreInfo(
      arg0,
    );
  }

  late final _ActivateSemaphoreInfoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<SemaphoreInfo>>)>>(
      'ActivateSemaphoreInfo');
  late final _ActivateSemaphoreInfo = _ActivateSemaphoreInfoPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<SemaphoreInfo>>)>();

  void LockSemaphoreInfo(
    ffi.Pointer<SemaphoreInfo> arg0,
  ) {
    return _LockSemaphoreInfo(
      arg0,
    );
  }

  late final _LockSemaphoreInfoPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SemaphoreInfo>)>>(
      'LockSemaphoreInfo');
  late final _LockSemaphoreInfo = _LockSemaphoreInfoPtr.asFunction<
      void Function(ffi.Pointer<SemaphoreInfo>)>();

  void RelinquishSemaphoreInfo(
    ffi.Pointer<ffi.Pointer<SemaphoreInfo>> arg0,
  ) {
    return _RelinquishSemaphoreInfo(
      arg0,
    );
  }

  late final _RelinquishSemaphoreInfoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<ffi.Pointer<SemaphoreInfo>>)>>(
      'RelinquishSemaphoreInfo');
  late final _RelinquishSemaphoreInfo = _RelinquishSemaphoreInfoPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<SemaphoreInfo>>)>();

  void UnlockSemaphoreInfo(
    ffi.Pointer<SemaphoreInfo> arg0,
  ) {
    return _UnlockSemaphoreInfo(
      arg0,
    );
  }

  late final _UnlockSemaphoreInfoPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SemaphoreInfo>)>>(
      'UnlockSemaphoreInfo');
  late final _UnlockSemaphoreInfo = _UnlockSemaphoreInfoPtr.asFunction<
      void Function(ffi.Pointer<SemaphoreInfo>)>();

  ffi.Pointer<ffi.Char> GetExceptionMessage(
    int arg0,
  ) {
    return _GetExceptionMessage(
      arg0,
    );
  }

  late final _GetExceptionMessagePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(ffi.Int)>>(
          'GetExceptionMessage');
  late final _GetExceptionMessage =
      _GetExceptionMessagePtr.asFunction<ffi.Pointer<ffi.Char> Function(int)>();

  ffi.Pointer<ffi.Char> GetLocaleExceptionMessage(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _GetLocaleExceptionMessage(
      arg0,
      arg1,
    );
  }

  late final _GetLocaleExceptionMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32, ffi.Pointer<ffi.Char>)>>('GetLocaleExceptionMessage');
  late final _GetLocaleExceptionMessage = _GetLocaleExceptionMessagePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>)>();

  ErrorHandler SetErrorHandler(
    ErrorHandler arg0,
  ) {
    return _SetErrorHandler(
      arg0,
    );
  }

  late final _SetErrorHandlerPtr =
      _lookup<ffi.NativeFunction<ErrorHandler Function(ErrorHandler)>>(
          'SetErrorHandler');
  late final _SetErrorHandler =
      _SetErrorHandlerPtr.asFunction<ErrorHandler Function(ErrorHandler)>();

  ffi.Pointer<ExceptionInfo> AcquireExceptionInfo() {
    return _AcquireExceptionInfo();
  }

  late final _AcquireExceptionInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ExceptionInfo> Function()>>(
          'AcquireExceptionInfo');
  late final _AcquireExceptionInfo = _AcquireExceptionInfoPtr.asFunction<
      ffi.Pointer<ExceptionInfo> Function()>();

  ffi.Pointer<ExceptionInfo> CloneExceptionInfo(
    ffi.Pointer<ExceptionInfo> arg0,
  ) {
    return _CloneExceptionInfo(
      arg0,
    );
  }

  late final _CloneExceptionInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ExceptionInfo> Function(
              ffi.Pointer<ExceptionInfo>)>>('CloneExceptionInfo');
  late final _CloneExceptionInfo = _CloneExceptionInfoPtr.asFunction<
      ffi.Pointer<ExceptionInfo> Function(ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ExceptionInfo> DestroyExceptionInfo(
    ffi.Pointer<ExceptionInfo> arg0,
  ) {
    return _DestroyExceptionInfo(
      arg0,
    );
  }

  late final _DestroyExceptionInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ExceptionInfo> Function(
              ffi.Pointer<ExceptionInfo>)>>('DestroyExceptionInfo');
  late final _DestroyExceptionInfo = _DestroyExceptionInfoPtr.asFunction<
      ffi.Pointer<ExceptionInfo> Function(ffi.Pointer<ExceptionInfo>)>();

  FatalErrorHandler SetFatalErrorHandler(
    FatalErrorHandler arg0,
  ) {
    return _SetFatalErrorHandler(
      arg0,
    );
  }

  late final _SetFatalErrorHandlerPtr = _lookup<
          ffi.NativeFunction<FatalErrorHandler Function(FatalErrorHandler)>>(
      'SetFatalErrorHandler');
  late final _SetFatalErrorHandler = _SetFatalErrorHandlerPtr.asFunction<
      FatalErrorHandler Function(FatalErrorHandler)>();

  int ThrowException(
    ffi.Pointer<ExceptionInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _ThrowException(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ThrowExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ExceptionInfo>, ffi.Int32,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('ThrowException');
  late final _ThrowException = _ThrowExceptionPtr.asFunction<
      int Function(ffi.Pointer<ExceptionInfo>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int ThrowMagickExceptionList(
    ffi.Pointer<ExceptionInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
    ffi.Pointer<ffi.Char> arg6,
    va_list arg7,
  ) {
    return _ThrowMagickExceptionList(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _ThrowMagickExceptionListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ExceptionInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              va_list)>>('ThrowMagickExceptionList');
  late final _ThrowMagickExceptionList =
      _ThrowMagickExceptionListPtr.asFunction<
          int Function(
              ffi.Pointer<ExceptionInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              int,
              int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              va_list)>();

  int ThrowMagickException(
    ffi.Pointer<ExceptionInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
    ffi.Pointer<ffi.Char> arg6,
  ) {
    return _ThrowMagickException(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _ThrowMagickExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ExceptionInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('ThrowMagickException');
  late final _ThrowMagickException = _ThrowMagickExceptionPtr.asFunction<
      int Function(
          ffi.Pointer<ExceptionInfo>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void CatchException(
    ffi.Pointer<ExceptionInfo> arg0,
  ) {
    return _CatchException(
      arg0,
    );
  }

  late final _CatchExceptionPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ExceptionInfo>)>>(
      'CatchException');
  late final _CatchException = _CatchExceptionPtr.asFunction<
      void Function(ffi.Pointer<ExceptionInfo>)>();

  void ClearMagickException(
    ffi.Pointer<ExceptionInfo> arg0,
  ) {
    return _ClearMagickException(
      arg0,
    );
  }

  late final _ClearMagickExceptionPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ExceptionInfo>)>>(
      'ClearMagickException');
  late final _ClearMagickException = _ClearMagickExceptionPtr.asFunction<
      void Function(ffi.Pointer<ExceptionInfo>)>();

  void InheritException(
    ffi.Pointer<ExceptionInfo> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _InheritException(
      arg0,
      arg1,
    );
  }

  late final _InheritExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ExceptionInfo>,
              ffi.Pointer<ExceptionInfo>)>>('InheritException');
  late final _InheritException = _InheritExceptionPtr.asFunction<
      void Function(ffi.Pointer<ExceptionInfo>, ffi.Pointer<ExceptionInfo>)>();

  void MagickError(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _MagickError(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MagickError');
  late final _MagickError = _MagickErrorPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void MagickFatalError(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _MagickFatalError(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickFatalErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MagickFatalError');
  late final _MagickFatalError = _MagickFatalErrorPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void MagickWarning(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _MagickWarning(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickWarningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MagickWarning');
  late final _MagickWarning = _MagickWarningPtr.asFunction<
      void Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  WarningHandler SetWarningHandler(
    WarningHandler arg0,
  ) {
    return _SetWarningHandler(
      arg0,
    );
  }

  late final _SetWarningHandlerPtr =
      _lookup<ffi.NativeFunction<WarningHandler Function(WarningHandler)>>(
          'SetWarningHandler');
  late final _SetWarningHandler = _SetWarningHandlerPtr.asFunction<
      WarningHandler Function(WarningHandler)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetColorList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetColorList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetColorListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetColorList');
  late final _GetColorList = _GetColorListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ColorInfo> GetColorInfo(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetColorInfo(
      arg0,
      arg1,
    );
  }

  late final _GetColorInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ColorInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetColorInfo');
  late final _GetColorInfo = _GetColorInfoPtr.asFunction<
      ffi.Pointer<ColorInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<ColorInfo>> GetColorInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetColorInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetColorInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ColorInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetColorInfoList');
  late final _GetColorInfoList = _GetColorInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ColorInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  int IsEquivalentImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ssize_t> x,
    ffi.Pointer<ssize_t> y,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _IsEquivalentImage(
      arg0,
      arg1,
      x,
      y,
      arg4,
    );
  }

  late final _IsEquivalentImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ffi.Pointer<ssize_t>,
              ffi.Pointer<ssize_t>,
              ffi.Pointer<ExceptionInfo>)>>('IsEquivalentImage');
  late final _IsEquivalentImage = _IsEquivalentImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>, ffi.Pointer<ssize_t>,
          ffi.Pointer<ssize_t>, ffi.Pointer<ExceptionInfo>)>();

  int ListColorInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListColorInfo(
      arg0,
      arg1,
    );
  }

  late final _ListColorInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>>('ListColorInfo');
  late final _ListColorInfo = _ListColorInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  int QueryColorCompliance(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<PixelInfo> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _QueryColorCompliance(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _QueryColorCompliancePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('QueryColorCompliance');
  late final _QueryColorCompliance = _QueryColorCompliancePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<PixelInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  int QueryColorname(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<PixelInfo> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _QueryColorname(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _QueryColornamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<PixelInfo>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('QueryColorname');
  late final _QueryColorname = _QueryColornamePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<PixelInfo>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  void ConcatenateColorComponent(
    ffi.Pointer<PixelInfo> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _ConcatenateColorComponent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ConcatenateColorComponentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PixelInfo>, ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('ConcatenateColorComponent');
  late final _ConcatenateColorComponent =
      _ConcatenateColorComponentPtr.asFunction<
          void Function(
              ffi.Pointer<PixelInfo>, int, int, ffi.Pointer<ffi.Char>)>();

  void GetColorTuple(
    ffi.Pointer<PixelInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _GetColorTuple(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetColorTuplePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PixelInfo>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('GetColorTuple');
  late final _GetColorTuple = _GetColorTuplePtr.asFunction<
      void Function(ffi.Pointer<PixelInfo>, int, ffi.Pointer<ffi.Char>)>();

  int CompositeImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ExceptionInfo> arg6,
  ) {
    return _CompositeImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _CompositeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Int32,
              ssize_t,
              ssize_t,
              ffi.Pointer<ExceptionInfo>)>>('CompositeImage');
  late final _CompositeImage = _CompositeImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>, int, int, int, int,
          ffi.Pointer<ExceptionInfo>)>();

  int TextureImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _TextureImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _TextureImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('TextureImage');
  late final _TextureImage = _TextureImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  int HuffmanDecodeImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _HuffmanDecodeImage(
      arg0,
      arg1,
    );
  }

  late final _HuffmanDecodeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('HuffmanDecodeImage');
  late final _HuffmanDecodeImage = _HuffmanDecodeImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int HuffmanEncodeImage(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<Image> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _HuffmanEncodeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _HuffmanEncodeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('HuffmanEncodeImage');
  late final _HuffmanEncodeImage = _HuffmanEncodeImagePtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int LZWEncodeImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ffi.UnsignedChar> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _LZWEncodeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _LZWEncodeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ExceptionInfo>)>>('LZWEncodeImage');
  late final _LZWEncodeImage = _LZWEncodeImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ExceptionInfo>)>();

  int PackbitsEncodeImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ffi.UnsignedChar> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _PackbitsEncodeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PackbitsEncodeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ExceptionInfo>)>>('PackbitsEncodeImage');
  late final _PackbitsEncodeImage = _PackbitsEncodeImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ExceptionInfo>)>();

  int ZLIBEncodeImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ffi.UnsignedChar> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ZLIBEncodeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ZLIBEncodeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ExceptionInfo>)>>('ZLIBEncodeImage');
  late final _ZLIBEncodeImage = _ZLIBEncodeImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ExceptionInfo>)>();

  void Ascii85Encode(
    ffi.Pointer<Image> arg0,
    int arg1,
  ) {
    return _Ascii85Encode(
      arg0,
      arg1,
    );
  }

  late final _Ascii85EncodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>, ffi.UnsignedChar)>>('Ascii85Encode');
  late final _Ascii85Encode =
      _Ascii85EncodePtr.asFunction<void Function(ffi.Pointer<Image>, int)>();

  void Ascii85Flush(
    ffi.Pointer<Image> arg0,
  ) {
    return _Ascii85Flush(
      arg0,
    );
  }

  late final _Ascii85FlushPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'Ascii85Flush');
  late final _Ascii85Flush =
      _Ascii85FlushPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void Ascii85Initialize(
    ffi.Pointer<Image> arg0,
  ) {
    return _Ascii85Initialize(
      arg0,
    );
  }

  late final _Ascii85InitializePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'Ascii85Initialize');
  late final _Ascii85Initialize =
      _Ascii85InitializePtr.asFunction<void Function(ffi.Pointer<Image>)>();

  ffi.Pointer<KernelInfo> AcquireKernelInfo(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _AcquireKernelInfo(
      arg0,
      arg1,
    );
  }

  late final _AcquireKernelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<KernelInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('AcquireKernelInfo');
  late final _AcquireKernelInfo = _AcquireKernelInfoPtr.asFunction<
      ffi.Pointer<KernelInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<KernelInfo> AcquireKernelBuiltIn(
    int arg0,
    ffi.Pointer<GeometryInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _AcquireKernelBuiltIn(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AcquireKernelBuiltInPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<KernelInfo> Function(ffi.Int32, ffi.Pointer<GeometryInfo>,
              ffi.Pointer<ExceptionInfo>)>>('AcquireKernelBuiltIn');
  late final _AcquireKernelBuiltIn = _AcquireKernelBuiltInPtr.asFunction<
      ffi.Pointer<KernelInfo> Function(
          int, ffi.Pointer<GeometryInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<KernelInfo> CloneKernelInfo(
    ffi.Pointer<KernelInfo> arg0,
  ) {
    return _CloneKernelInfo(
      arg0,
    );
  }

  late final _CloneKernelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<KernelInfo> Function(
              ffi.Pointer<KernelInfo>)>>('CloneKernelInfo');
  late final _CloneKernelInfo = _CloneKernelInfoPtr.asFunction<
      ffi.Pointer<KernelInfo> Function(ffi.Pointer<KernelInfo>)>();

  ffi.Pointer<KernelInfo> DestroyKernelInfo(
    ffi.Pointer<KernelInfo> arg0,
  ) {
    return _DestroyKernelInfo(
      arg0,
    );
  }

  late final _DestroyKernelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<KernelInfo> Function(
              ffi.Pointer<KernelInfo>)>>('DestroyKernelInfo');
  late final _DestroyKernelInfo = _DestroyKernelInfoPtr.asFunction<
      ffi.Pointer<KernelInfo> Function(ffi.Pointer<KernelInfo>)>();

  ffi.Pointer<Image> MorphologyImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<KernelInfo> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _MorphologyImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MorphologyImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Int32,
              ssize_t,
              ffi.Pointer<KernelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('MorphologyImage');
  late final _MorphologyImage = _MorphologyImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, int, int,
          ffi.Pointer<KernelInfo>, ffi.Pointer<ExceptionInfo>)>();

  void ScaleGeometryKernelInfo(
    ffi.Pointer<KernelInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _ScaleGeometryKernelInfo(
      arg0,
      arg1,
    );
  }

  late final _ScaleGeometryKernelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<KernelInfo>,
              ffi.Pointer<ffi.Char>)>>('ScaleGeometryKernelInfo');
  late final _ScaleGeometryKernelInfo = _ScaleGeometryKernelInfoPtr.asFunction<
      void Function(ffi.Pointer<KernelInfo>, ffi.Pointer<ffi.Char>)>();

  void ScaleKernelInfo(
    ffi.Pointer<KernelInfo> arg0,
    double arg1,
    int arg2,
  ) {
    return _ScaleKernelInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ScaleKernelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<KernelInfo>, ffi.Double,
              ffi.Int32)>>('ScaleKernelInfo');
  late final _ScaleKernelInfo = _ScaleKernelInfoPtr.asFunction<
      void Function(ffi.Pointer<KernelInfo>, double, int)>();

  void UnityAddKernelInfo(
    ffi.Pointer<KernelInfo> arg0,
    double arg1,
  ) {
    return _UnityAddKernelInfo(
      arg0,
      arg1,
    );
  }

  late final _UnityAddKernelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<KernelInfo>, ffi.Double)>>('UnityAddKernelInfo');
  late final _UnityAddKernelInfo = _UnityAddKernelInfoPtr.asFunction<
      void Function(ffi.Pointer<KernelInfo>, double)>();

  ffi.Pointer<Image> AdaptiveBlurImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _AdaptiveBlurImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _AdaptiveBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('AdaptiveBlurImage');
  late final _AdaptiveBlurImage = _AdaptiveBlurImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> AdaptiveSharpenImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _AdaptiveSharpenImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _AdaptiveSharpenImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('AdaptiveSharpenImage');
  late final _AdaptiveSharpenImage = _AdaptiveSharpenImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> BilateralBlurImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    double arg3,
    double arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _BilateralBlurImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _BilateralBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Size,
              ffi.Size,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('BilateralBlurImage');
  late final _BilateralBlurImage = _BilateralBlurImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, int, int, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> BlurImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _BlurImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('BlurImage');
  late final _BlurImage = _BlurImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ConvolveImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<KernelInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ConvolveImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ConvolveImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<KernelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ConvolveImage');
  late final _ConvolveImage = _ConvolveImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<KernelInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> DespeckleImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _DespeckleImage(
      arg0,
      arg1,
    );
  }

  late final _DespeckleImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('DespeckleImage');
  late final _DespeckleImage = _DespeckleImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> EdgeImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _EdgeImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _EdgeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('EdgeImage');
  late final _EdgeImage = _EdgeImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> EmbossImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _EmbossImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _EmbossImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('EmbossImage');
  late final _EmbossImage = _EmbossImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> GaussianBlurImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _GaussianBlurImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GaussianBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('GaussianBlurImage');
  late final _GaussianBlurImage = _GaussianBlurImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> KuwaharaImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _KuwaharaImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _KuwaharaImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('KuwaharaImage');
  late final _KuwaharaImage = _KuwaharaImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> LocalContrastImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _LocalContrastImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _LocalContrastImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('LocalContrastImage');
  late final _LocalContrastImage = _LocalContrastImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> MotionBlurImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    double arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _MotionBlurImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MotionBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('MotionBlurImage');
  late final _MotionBlurImage = _MotionBlurImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, double, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> PreviewImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _PreviewImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PreviewImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('PreviewImage');
  late final _PreviewImage = _PreviewImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> RotationalBlurImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _RotationalBlurImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _RotationalBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('RotationalBlurImage');
  late final _RotationalBlurImage = _RotationalBlurImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SelectiveBlurImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    double arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _SelectiveBlurImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _SelectiveBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('SelectiveBlurImage');
  late final _SelectiveBlurImage = _SelectiveBlurImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, double, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ShadeImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    double arg2,
    double arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _ShadeImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ShadeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('ShadeImage');
  late final _ShadeImage = _ShadeImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, int, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SharpenImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SharpenImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SharpenImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('SharpenImage');
  late final _SharpenImage = _SharpenImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SpreadImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SpreadImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SpreadImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('SpreadImage');
  late final _SpreadImage = _SpreadImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> UnsharpMaskImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _UnsharpMaskImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _UnsharpMaskImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('UnsharpMaskImage');
  late final _UnsharpMaskImage = _UnsharpMaskImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, double, double, double,
          double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> CoalesceImages(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _CoalesceImages(
      arg0,
      arg1,
    );
  }

  late final _CoalesceImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('CoalesceImages');
  late final _CoalesceImages = _CoalesceImagesPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> DisposeImages(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _DisposeImages(
      arg0,
      arg1,
    );
  }

  late final _DisposeImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('DisposeImages');
  late final _DisposeImages = _DisposeImagesPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> CompareImagesLayers(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _CompareImagesLayers(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _CompareImagesLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('CompareImagesLayers');
  late final _CompareImagesLayers = _CompareImagesLayersPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> MergeImageLayers(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _MergeImageLayers(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MergeImageLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('MergeImageLayers');
  late final _MergeImageLayers = _MergeImageLayersPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> OptimizeImageLayers(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _OptimizeImageLayers(
      arg0,
      arg1,
    );
  }

  late final _OptimizeImageLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('OptimizeImageLayers');
  late final _OptimizeImageLayers = _OptimizeImageLayersPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> OptimizePlusImageLayers(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _OptimizePlusImageLayers(
      arg0,
      arg1,
    );
  }

  late final _OptimizePlusImageLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('OptimizePlusImageLayers');
  late final _OptimizePlusImageLayers = _OptimizePlusImageLayersPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  void CompositeLayers(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<Image> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _CompositeLayers(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _CompositeLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Pointer<Image>,
              ssize_t,
              ssize_t,
              ffi.Pointer<ExceptionInfo>)>>('CompositeLayers');
  late final _CompositeLayers = _CompositeLayersPtr.asFunction<
      void Function(ffi.Pointer<Image>, int, ffi.Pointer<Image>, int, int,
          ffi.Pointer<ExceptionInfo>)>();

  void OptimizeImageTransparency(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _OptimizeImageTransparency(
      arg0,
      arg1,
    );
  }

  late final _OptimizeImageTransparencyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('OptimizeImageTransparency');
  late final _OptimizeImageTransparency =
      _OptimizeImageTransparencyPtr.asFunction<
          void Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  void RemoveDuplicateLayers(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _RemoveDuplicateLayers(
      arg0,
      arg1,
    );
  }

  late final _RemoveDuplicateLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<ExceptionInfo>)>>('RemoveDuplicateLayers');
  late final _RemoveDuplicateLayers = _RemoveDuplicateLayersPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<Image>>, ffi.Pointer<ExceptionInfo>)>();

  void RemoveZeroDelayLayers(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _RemoveZeroDelayLayers(
      arg0,
      arg1,
    );
  }

  late final _RemoveZeroDelayLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<ExceptionInfo>)>>('RemoveZeroDelayLayers');
  late final _RemoveZeroDelayLayers = _RemoveZeroDelayLayersPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Pointer<Image>>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<LinkedListInfo> DestroyLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg1,
  ) {
    return _DestroyLinkedList(
      arg0,
      arg1,
    );
  }

  late final _DestroyLinkedListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LinkedListInfo> Function(
              ffi.Pointer<LinkedListInfo>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<ffi.Void>)>>)>>('DestroyLinkedList');
  late final _DestroyLinkedList = _DestroyLinkedListPtr.asFunction<
      ffi.Pointer<LinkedListInfo> Function(
          ffi.Pointer<LinkedListInfo>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<LinkedListInfo> NewLinkedList(
    int arg0,
  ) {
    return _NewLinkedList(
      arg0,
    );
  }

  late final _NewLinkedListPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<LinkedListInfo> Function(ffi.Size)>>(
      'NewLinkedList');
  late final _NewLinkedList =
      _NewLinkedListPtr.asFunction<ffi.Pointer<LinkedListInfo> Function(int)>();

  int AppendValueToLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _AppendValueToLinkedList(
      arg0,
      arg1,
    );
  }

  late final _AppendValueToLinkedListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<LinkedListInfo>,
              ffi.Pointer<ffi.Void>)>>('AppendValueToLinkedList');
  late final _AppendValueToLinkedList = _AppendValueToLinkedListPtr.asFunction<
      int Function(ffi.Pointer<LinkedListInfo>, ffi.Pointer<ffi.Void>)>();

  int InsertValueInLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _InsertValueInLinkedList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _InsertValueInLinkedListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<LinkedListInfo>, ffi.Size,
              ffi.Pointer<ffi.Void>)>>('InsertValueInLinkedList');
  late final _InsertValueInLinkedList = _InsertValueInLinkedListPtr.asFunction<
      int Function(ffi.Pointer<LinkedListInfo>, int, ffi.Pointer<ffi.Void>)>();

  int InsertValueInSortedLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        arg1,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _InsertValueInSortedLinkedList(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _InsertValueInSortedLinkedListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<LinkedListInfo>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>)>>('InsertValueInSortedLinkedList');
  late final _InsertValueInSortedLinkedList =
      _InsertValueInSortedLinkedListPtr.asFunction<
          int Function(
              ffi.Pointer<LinkedListInfo>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>,
              ffi.Pointer<ffi.Void>)>();

  int IsLinkedListEmpty(
    ffi.Pointer<LinkedListInfo> arg0,
  ) {
    return _IsLinkedListEmpty(
      arg0,
    );
  }

  late final _IsLinkedListEmptyPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<LinkedListInfo>)>>(
      'IsLinkedListEmpty');
  late final _IsLinkedListEmpty = _IsLinkedListEmptyPtr.asFunction<
      int Function(ffi.Pointer<LinkedListInfo>)>();

  int LinkedListToArray(
    ffi.Pointer<LinkedListInfo> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Void>> arg1,
  ) {
    return _LinkedListToArray(
      arg0,
      arg1,
    );
  }

  late final _LinkedListToArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<LinkedListInfo>,
              ffi.Pointer<ffi.Pointer<ffi.Void>>)>>('LinkedListToArray');
  late final _LinkedListToArray = _LinkedListToArrayPtr.asFunction<
      int Function(
          ffi.Pointer<LinkedListInfo>, ffi.Pointer<ffi.Pointer<ffi.Void>>)>();

  int GetNumberOfElementsInLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
  ) {
    return _GetNumberOfElementsInLinkedList(
      arg0,
    );
  }

  late final _GetNumberOfElementsInLinkedListPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<LinkedListInfo>)>>(
      'GetNumberOfElementsInLinkedList');
  late final _GetNumberOfElementsInLinkedList =
      _GetNumberOfElementsInLinkedListPtr.asFunction<
          int Function(ffi.Pointer<LinkedListInfo>)>();

  void ClearLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg1,
  ) {
    return _ClearLinkedList(
      arg0,
      arg1,
    );
  }

  late final _ClearLinkedListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<LinkedListInfo>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<ffi.Void>)>>)>>('ClearLinkedList');
  late final _ClearLinkedList = _ClearLinkedListPtr.asFunction<
      void Function(
          ffi.Pointer<LinkedListInfo>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<ffi.Void> GetLastValueInLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
  ) {
    return _GetLastValueInLinkedList(
      arg0,
    );
  }

  late final _GetLastValueInLinkedListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<LinkedListInfo>)>>('GetLastValueInLinkedList');
  late final _GetLastValueInLinkedList =
      _GetLastValueInLinkedListPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<LinkedListInfo>)>();

  ffi.Pointer<ffi.Void> GetNextValueInLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
  ) {
    return _GetNextValueInLinkedList(
      arg0,
    );
  }

  late final _GetNextValueInLinkedListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<LinkedListInfo>)>>('GetNextValueInLinkedList');
  late final _GetNextValueInLinkedList =
      _GetNextValueInLinkedListPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<LinkedListInfo>)>();

  ffi.Pointer<ffi.Void> GetValueFromLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
    int arg1,
  ) {
    return _GetValueFromLinkedList(
      arg0,
      arg1,
    );
  }

  late final _GetValueFromLinkedListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<LinkedListInfo>,
              ffi.Size)>>('GetValueFromLinkedList');
  late final _GetValueFromLinkedList = _GetValueFromLinkedListPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<LinkedListInfo>, int)>();

  ffi.Pointer<ffi.Void> RemoveElementByValueFromLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _RemoveElementByValueFromLinkedList(
      arg0,
      arg1,
    );
  }

  late final _RemoveElementByValueFromLinkedListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<LinkedListInfo>,
              ffi.Pointer<ffi.Void>)>>('RemoveElementByValueFromLinkedList');
  late final _RemoveElementByValueFromLinkedList =
      _RemoveElementByValueFromLinkedListPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<LinkedListInfo>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> RemoveElementFromLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
    int arg1,
  ) {
    return _RemoveElementFromLinkedList(
      arg0,
      arg1,
    );
  }

  late final _RemoveElementFromLinkedListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<LinkedListInfo>,
              ffi.Size)>>('RemoveElementFromLinkedList');
  late final _RemoveElementFromLinkedList =
      _RemoveElementFromLinkedListPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<LinkedListInfo>, int)>();

  ffi.Pointer<ffi.Void> RemoveLastElementFromLinkedList(
    ffi.Pointer<LinkedListInfo> arg0,
  ) {
    return _RemoveLastElementFromLinkedList(
      arg0,
    );
  }

  late final _RemoveLastElementFromLinkedListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<LinkedListInfo>)>>('RemoveLastElementFromLinkedList');
  late final _RemoveLastElementFromLinkedList =
      _RemoveLastElementFromLinkedListPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<LinkedListInfo>)>();

  void ResetLinkedListIterator(
    ffi.Pointer<LinkedListInfo> arg0,
  ) {
    return _ResetLinkedListIterator(
      arg0,
    );
  }

  late final _ResetLinkedListIteratorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<LinkedListInfo>)>>(
      'ResetLinkedListIterator');
  late final _ResetLinkedListIterator = _ResetLinkedListIteratorPtr.asFunction<
      void Function(ffi.Pointer<LinkedListInfo>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetLocaleList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetLocaleList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetLocaleListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetLocaleList');
  late final _GetLocaleList = _GetLocaleListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetLocaleMessage(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _GetLocaleMessage(
      arg0,
    );
  }

  late final _GetLocaleMessagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetLocaleMessage');
  late final _GetLocaleMessage = _GetLocaleMessagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<LocaleInfo> GetLocaleInfo_(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetLocaleInfo_(
      arg0,
      arg1,
    );
  }

  late final _GetLocaleInfo_Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LocaleInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetLocaleInfo_');
  late final _GetLocaleInfo_ = _GetLocaleInfo_Ptr.asFunction<
      ffi.Pointer<LocaleInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<LocaleInfo>> GetLocaleInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetLocaleInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetLocaleInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<LocaleInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetLocaleInfoList');
  late final _GetLocaleInfoList = _GetLocaleInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<LocaleInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  double InterpretLocaleValue(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _InterpretLocaleValue(
      arg0,
      arg1,
    );
  }

  late final _InterpretLocaleValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('InterpretLocaleValue');
  late final _InterpretLocaleValue = _InterpretLocaleValuePtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int LocaleCompare(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _LocaleCompare(
      arg0,
      arg1,
    );
  }

  late final _LocaleComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('LocaleCompare');
  late final _LocaleCompare = _LocaleComparePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int LocaleLowercase(
    int arg0,
  ) {
    return _LocaleLowercase(
      arg0,
    );
  }

  late final _LocaleLowercasePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('LocaleLowercase');
  late final _LocaleLowercase =
      _LocaleLowercasePtr.asFunction<int Function(int)>();

  int LocaleNCompare(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _LocaleNCompare(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _LocaleNComparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('LocaleNCompare');
  late final _LocaleNCompare = _LocaleNComparePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int LocaleUppercase(
    int arg0,
  ) {
    return _LocaleUppercase(
      arg0,
    );
  }

  late final _LocaleUppercasePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('LocaleUppercase');
  late final _LocaleUppercase =
      _LocaleUppercasePtr.asFunction<int Function(int)>();

  ffi.Pointer<LinkedListInfo> DestroyLocaleOptions(
    ffi.Pointer<LinkedListInfo> arg0,
  ) {
    return _DestroyLocaleOptions(
      arg0,
    );
  }

  late final _DestroyLocaleOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LinkedListInfo> Function(
              ffi.Pointer<LinkedListInfo>)>>('DestroyLocaleOptions');
  late final _DestroyLocaleOptions = _DestroyLocaleOptionsPtr.asFunction<
      ffi.Pointer<LinkedListInfo> Function(ffi.Pointer<LinkedListInfo>)>();

  ffi.Pointer<LinkedListInfo> GetLocaleOptions(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetLocaleOptions(
      arg0,
      arg1,
    );
  }

  late final _GetLocaleOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LinkedListInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetLocaleOptions');
  late final _GetLocaleOptions = _GetLocaleOptionsPtr.asFunction<
      ffi.Pointer<LinkedListInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  int ListLocaleInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListLocaleInfo(
      arg0,
      arg1,
    );
  }

  late final _ListLocaleInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<ExceptionInfo>)>>('ListLocaleInfo');
  late final _ListLocaleInfo = _ListLocaleInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  int FormatLocaleFile(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _FormatLocaleFile(
      arg0,
      arg1,
    );
  }

  late final _FormatLocaleFilePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>>('FormatLocaleFile');
  late final _FormatLocaleFile = _FormatLocaleFilePtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>)>();

  int FormatLocaleString(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _FormatLocaleString(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _FormatLocaleStringPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('FormatLocaleString');
  late final _FormatLocaleString = _FormatLocaleStringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void LocaleLower(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _LocaleLower(
      arg0,
    );
  }

  late final _LocaleLowerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'LocaleLower');
  late final _LocaleLower =
      _LocaleLowerPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void LocaleUpper(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _LocaleUpper(
      arg0,
    );
  }

  late final _LocaleUpperPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'LocaleUpper');
  late final _LocaleUpper =
      _LocaleUpperPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  int SetImageProgress(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    int arg3,
  ) {
    return _SetImageProgress(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SetImageProgressPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              MagickOffsetType, MagickSizeType)>>('SetImageProgress');
  late final _SetImageProgress = _SetImageProgressPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>, int, int)>();

  MagickProgressMonitor SetImageProgressMonitor(
    ffi.Pointer<Image> arg0,
    MagickProgressMonitor arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _SetImageProgressMonitor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageProgressMonitorPtr = _lookup<
      ffi.NativeFunction<
          MagickProgressMonitor Function(
              ffi.Pointer<Image>,
              MagickProgressMonitor,
              ffi.Pointer<ffi.Void>)>>('SetImageProgressMonitor');
  late final _SetImageProgressMonitor = _SetImageProgressMonitorPtr.asFunction<
      MagickProgressMonitor Function(
          ffi.Pointer<Image>, MagickProgressMonitor, ffi.Pointer<ffi.Void>)>();

  MagickProgressMonitor SetImageInfoProgressMonitor(
    ffi.Pointer<ImageInfo> arg0,
    MagickProgressMonitor arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _SetImageInfoProgressMonitor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageInfoProgressMonitorPtr = _lookup<
      ffi.NativeFunction<
          MagickProgressMonitor Function(
              ffi.Pointer<ImageInfo>,
              MagickProgressMonitor,
              ffi.Pointer<ffi.Void>)>>('SetImageInfoProgressMonitor');
  late final _SetImageInfoProgressMonitor =
      _SetImageInfoProgressMonitorPtr.asFunction<
          MagickProgressMonitor Function(ffi.Pointer<ImageInfo>,
              MagickProgressMonitor, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> AcquireString(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _AcquireString(
      arg0,
    );
  }

  late final _AcquireStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('AcquireString');
  late final _AcquireString = _AcquireStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> CloneString(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _CloneString(
      arg0,
      arg1,
    );
  }

  late final _CloneStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('CloneString');
  late final _CloneString = _CloneStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> ConstantString(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ConstantString(
      arg0,
    );
  }

  late final _ConstantStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('ConstantString');
  late final _ConstantString = _ConstantStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> DestroyString(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _DestroyString(
      arg0,
    );
  }

  late final _DestroyStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('DestroyString');
  late final _DestroyString = _DestroyStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> DestroyStringList(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
  ) {
    return _DestroyStringList(
      arg0,
    );
  }

  late final _DestroyStringListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('DestroyStringList');
  late final _DestroyStringList = _DestroyStringListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Char> EscapeString(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _EscapeString(
      arg0,
      arg1,
    );
  }

  late final _EscapeStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>, ffi.Char)>>('EscapeString');
  late final _EscapeString = _EscapeStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> FileToString(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _FileToString(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _FileToStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('FileToString');
  late final _FileToString = _FileToStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetEnvironmentValue(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _GetEnvironmentValue(
      arg0,
    );
  }

  late final _GetEnvironmentValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetEnvironmentValue');
  late final _GetEnvironmentValue = _GetEnvironmentValuePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> SanitizeString(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _SanitizeString(
      arg0,
    );
  }

  late final _SanitizeStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('SanitizeString');
  late final _SanitizeString = _SanitizeStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> StringInfoToDigest(
    ffi.Pointer<StringInfo> arg0,
  ) {
    return _StringInfoToDigest(
      arg0,
    );
  }

  late final _StringInfoToDigestPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<StringInfo>)>>('StringInfoToDigest');
  late final _StringInfoToDigest = _StringInfoToDigestPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<StringInfo>)>();

  ffi.Pointer<ffi.Char> StringInfoToHexString(
    ffi.Pointer<StringInfo> arg0,
  ) {
    return _StringInfoToHexString(
      arg0,
    );
  }

  late final _StringInfoToHexStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<StringInfo>)>>('StringInfoToHexString');
  late final _StringInfoToHexString = _StringInfoToHexStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<StringInfo>)>();

  ffi.Pointer<ffi.Char> StringInfoToString(
    ffi.Pointer<StringInfo> arg0,
  ) {
    return _StringInfoToString(
      arg0,
    );
  }

  late final _StringInfoToStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<StringInfo>)>>('StringInfoToString');
  late final _StringInfoToString = _StringInfoToStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<StringInfo>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> StringToArgv(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Int> arg1,
  ) {
    return _StringToArgv(
      arg0,
      arg1,
    );
  }

  late final _StringToArgvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>>('StringToArgv');
  late final _StringToArgv = _StringToArgvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> StringToken(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _StringToken(
      arg0,
      arg1,
    );
  }

  late final _StringTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('StringToken');
  late final _StringToken = _StringTokenPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> StringToList(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _StringToList(
      arg0,
    );
  }

  late final _StringToListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>)>>('StringToList');
  late final _StringToList = _StringToListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> StringToStrings(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _StringToStrings(
      arg0,
      arg1,
    );
  }

  late final _StringToStringsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('StringToStrings');
  late final _StringToStrings = _StringToStringsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> GetStringInfoName(
    ffi.Pointer<StringInfo> arg0,
  ) {
    return _GetStringInfoName(
      arg0,
    );
  }

  late final _GetStringInfoNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<StringInfo>)>>('GetStringInfoName');
  late final _GetStringInfoName = _GetStringInfoNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<StringInfo>)>();

  ffi.Pointer<ffi.Char> GetStringInfoPath(
    ffi.Pointer<StringInfo> arg0,
  ) {
    return _GetStringInfoPath(
      arg0,
    );
  }

  late final _GetStringInfoPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<StringInfo>)>>('GetStringInfoPath');
  late final _GetStringInfoPath = _GetStringInfoPathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<StringInfo>)>();

  double InterpretSiPrefixValue(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
  ) {
    return _InterpretSiPrefixValue(
      arg0,
      arg1,
    );
  }

  late final _InterpretSiPrefixValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('InterpretSiPrefixValue');
  late final _InterpretSiPrefixValue = _InterpretSiPrefixValuePtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Double> StringToArrayOfDoubles(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ssize_t> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _StringToArrayOfDoubles(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _StringToArrayOfDoublesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ssize_t>,
              ffi.Pointer<ExceptionInfo>)>>('StringToArrayOfDoubles');
  late final _StringToArrayOfDoubles = _StringToArrayOfDoublesPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ssize_t>, ffi.Pointer<ExceptionInfo>)>();

  int CompareStringInfo(
    ffi.Pointer<StringInfo> arg0,
    ffi.Pointer<StringInfo> arg1,
  ) {
    return _CompareStringInfo(
      arg0,
      arg1,
    );
  }

  late final _CompareStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<StringInfo>,
              ffi.Pointer<StringInfo>)>>('CompareStringInfo');
  late final _CompareStringInfo = _CompareStringInfoPtr.asFunction<
      int Function(ffi.Pointer<StringInfo>, ffi.Pointer<StringInfo>)>();

  int ConcatenateString(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _ConcatenateString(
      arg0,
      arg1,
    );
  }

  late final _ConcatenateStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>)>>('ConcatenateString');
  late final _ConcatenateString = _ConcatenateStringPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>)>();

  int IsStringTrue(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _IsStringTrue(
      arg0,
    );
  }

  late final _IsStringTruePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'IsStringTrue');
  late final _IsStringTrue =
      _IsStringTruePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int IsStringFalse(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _IsStringFalse(
      arg0,
    );
  }

  late final _IsStringFalsePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'IsStringFalse');
  late final _IsStringFalse =
      _IsStringFalsePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int SubstituteString(
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _SubstituteString(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SubstituteStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('SubstituteString');
  late final _SubstituteString = _SubstituteStringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int ConcatenateMagickString(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _ConcatenateMagickString(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ConcatenateMagickStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('ConcatenateMagickString');
  late final _ConcatenateMagickString = _ConcatenateMagickStringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int CopyMagickString(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _CopyMagickString(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _CopyMagickStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('CopyMagickString');
  late final _CopyMagickString = _CopyMagickStringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int GetStringInfoLength(
    ffi.Pointer<StringInfo> arg0,
  ) {
    return _GetStringInfoLength(
      arg0,
    );
  }

  late final _GetStringInfoLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<StringInfo>)>>(
          'GetStringInfoLength');
  late final _GetStringInfoLength = _GetStringInfoLengthPtr.asFunction<
      int Function(ffi.Pointer<StringInfo>)>();

  int StripMagickString(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _StripMagickString(
      arg0,
    );
  }

  late final _StripMagickStringPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>)>>(
          'StripMagickString');
  late final _StripMagickString =
      _StripMagickStringPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int FormatMagickSize(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _FormatMagickSize(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _FormatMagickSizePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(MagickSizeType, ffi.Int32, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<ffi.Char>)>>('FormatMagickSize');
  late final _FormatMagickSize = _FormatMagickSizePtr.asFunction<
      int Function(
          int, int, ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<StringInfo> AcquireStringInfo(
    int arg0,
  ) {
    return _AcquireStringInfo(
      arg0,
    );
  }

  late final _AcquireStringInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<StringInfo> Function(ffi.Size)>>(
          'AcquireStringInfo');
  late final _AcquireStringInfo =
      _AcquireStringInfoPtr.asFunction<ffi.Pointer<StringInfo> Function(int)>();

  ffi.Pointer<StringInfo> BlobToStringInfo(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _BlobToStringInfo(
      arg0,
      arg1,
    );
  }

  late final _BlobToStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StringInfo> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('BlobToStringInfo');
  late final _BlobToStringInfo = _BlobToStringInfoPtr.asFunction<
      ffi.Pointer<StringInfo> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<StringInfo> CloneStringInfo(
    ffi.Pointer<StringInfo> arg0,
  ) {
    return _CloneStringInfo(
      arg0,
    );
  }

  late final _CloneStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StringInfo> Function(
              ffi.Pointer<StringInfo>)>>('CloneStringInfo');
  late final _CloneStringInfo = _CloneStringInfoPtr.asFunction<
      ffi.Pointer<StringInfo> Function(ffi.Pointer<StringInfo>)>();

  ffi.Pointer<StringInfo> ConfigureFileToStringInfo(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ConfigureFileToStringInfo(
      arg0,
    );
  }

  late final _ConfigureFileToStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StringInfo> Function(
              ffi.Pointer<ffi.Char>)>>('ConfigureFileToStringInfo');
  late final _ConfigureFileToStringInfo = _ConfigureFileToStringInfoPtr
      .asFunction<ffi.Pointer<StringInfo> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<StringInfo> DestroyStringInfo(
    ffi.Pointer<StringInfo> arg0,
  ) {
    return _DestroyStringInfo(
      arg0,
    );
  }

  late final _DestroyStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StringInfo> Function(
              ffi.Pointer<StringInfo>)>>('DestroyStringInfo');
  late final _DestroyStringInfo = _DestroyStringInfoPtr.asFunction<
      ffi.Pointer<StringInfo> Function(ffi.Pointer<StringInfo>)>();

  ffi.Pointer<StringInfo> FileToStringInfo(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _FileToStringInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _FileToStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StringInfo> Function(ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('FileToStringInfo');
  late final _FileToStringInfo = _FileToStringInfoPtr.asFunction<
      ffi.Pointer<StringInfo> Function(
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<StringInfo> SplitStringInfo(
    ffi.Pointer<StringInfo> arg0,
    int arg1,
  ) {
    return _SplitStringInfo(
      arg0,
      arg1,
    );
  }

  late final _SplitStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StringInfo> Function(
              ffi.Pointer<StringInfo>, ffi.Size)>>('SplitStringInfo');
  late final _SplitStringInfo = _SplitStringInfoPtr.asFunction<
      ffi.Pointer<StringInfo> Function(ffi.Pointer<StringInfo>, int)>();

  ffi.Pointer<StringInfo> StringToStringInfo(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _StringToStringInfo(
      arg0,
    );
  }

  late final _StringToStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StringInfo> Function(
              ffi.Pointer<ffi.Char>)>>('StringToStringInfo');
  late final _StringToStringInfo = _StringToStringInfoPtr.asFunction<
      ffi.Pointer<StringInfo> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedChar> GetStringInfoDatum(
    ffi.Pointer<StringInfo> arg0,
  ) {
    return _GetStringInfoDatum(
      arg0,
    );
  }

  late final _GetStringInfoDatumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<StringInfo>)>>('GetStringInfoDatum');
  late final _GetStringInfoDatum = _GetStringInfoDatumPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<StringInfo>)>();

  void ConcatenateStringInfo(
    ffi.Pointer<StringInfo> arg0,
    ffi.Pointer<StringInfo> arg1,
  ) {
    return _ConcatenateStringInfo(
      arg0,
      arg1,
    );
  }

  late final _ConcatenateStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<StringInfo>,
              ffi.Pointer<StringInfo>)>>('ConcatenateStringInfo');
  late final _ConcatenateStringInfo = _ConcatenateStringInfoPtr.asFunction<
      void Function(ffi.Pointer<StringInfo>, ffi.Pointer<StringInfo>)>();

  void PrintStringInfo(
    ffi.Pointer<FILE> file,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<StringInfo> arg2,
  ) {
    return _PrintStringInfo(
      file,
      arg1,
      arg2,
    );
  }

  late final _PrintStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<StringInfo>)>>('PrintStringInfo');
  late final _PrintStringInfo = _PrintStringInfoPtr.asFunction<
      void Function(
          ffi.Pointer<FILE>, ffi.Pointer<ffi.Char>, ffi.Pointer<StringInfo>)>();

  void ResetStringInfo(
    ffi.Pointer<StringInfo> arg0,
  ) {
    return _ResetStringInfo(
      arg0,
    );
  }

  late final _ResetStringInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<StringInfo>)>>(
          'ResetStringInfo');
  late final _ResetStringInfo =
      _ResetStringInfoPtr.asFunction<void Function(ffi.Pointer<StringInfo>)>();

  void SetStringInfo(
    ffi.Pointer<StringInfo> arg0,
    ffi.Pointer<StringInfo> arg1,
  ) {
    return _SetStringInfo(
      arg0,
      arg1,
    );
  }

  late final _SetStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<StringInfo>,
              ffi.Pointer<StringInfo>)>>('SetStringInfo');
  late final _SetStringInfo = _SetStringInfoPtr.asFunction<
      void Function(ffi.Pointer<StringInfo>, ffi.Pointer<StringInfo>)>();

  void SetStringInfoDatum(
    ffi.Pointer<StringInfo> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
  ) {
    return _SetStringInfoDatum(
      arg0,
      arg1,
    );
  }

  late final _SetStringInfoDatumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<StringInfo>,
              ffi.Pointer<ffi.UnsignedChar>)>>('SetStringInfoDatum');
  late final _SetStringInfoDatum = _SetStringInfoDatumPtr.asFunction<
      void Function(ffi.Pointer<StringInfo>, ffi.Pointer<ffi.UnsignedChar>)>();

  void SetStringInfoLength(
    ffi.Pointer<StringInfo> arg0,
    int arg1,
  ) {
    return _SetStringInfoLength(
      arg0,
      arg1,
    );
  }

  late final _SetStringInfoLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<StringInfo>, ffi.Size)>>('SetStringInfoLength');
  late final _SetStringInfoLength = _SetStringInfoLengthPtr.asFunction<
      void Function(ffi.Pointer<StringInfo>, int)>();

  void SetStringInfoName(
    ffi.Pointer<StringInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _SetStringInfoName(
      arg0,
      arg1,
    );
  }

  late final _SetStringInfoNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<StringInfo>,
              ffi.Pointer<ffi.Char>)>>('SetStringInfoName');
  late final _SetStringInfoName = _SetStringInfoNamePtr.asFunction<
      void Function(ffi.Pointer<StringInfo>, ffi.Pointer<ffi.Char>)>();

  void SetStringInfoPath(
    ffi.Pointer<StringInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _SetStringInfoPath(
      arg0,
      arg1,
    );
  }

  late final _SetStringInfoPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<StringInfo>,
              ffi.Pointer<ffi.Char>)>>('SetStringInfoPath');
  late final _SetStringInfoPath = _SetStringInfoPathPtr.asFunction<
      void Function(ffi.Pointer<StringInfo>, ffi.Pointer<ffi.Char>)>();

  void StripString(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _StripString(
      arg0,
    );
  }

  late final _StripStringPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'StripString');
  late final _StripString =
      _StripStringPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetNextImageProfile(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetNextImageProfile(
      arg0,
    );
  }

  late final _GetNextImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Image>)>>('GetNextImageProfile');
  late final _GetNextImageProfile = _GetNextImageProfilePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<StringInfo> GetImageProfile(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _GetImageProfile(
      arg0,
      arg1,
    );
  }

  late final _GetImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StringInfo> Function(
              ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>>('GetImageProfile');
  late final _GetImageProfile = _GetImageProfilePtr.asFunction<
      ffi.Pointer<StringInfo> Function(
          ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>();

  int CloneImageProfiles(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
  ) {
    return _CloneImageProfiles(
      arg0,
      arg1,
    );
  }

  late final _CloneImageProfilesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>, ffi.Pointer<Image>)>>('CloneImageProfiles');
  late final _CloneImageProfiles = _CloneImageProfilesPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>)>();

  int DeleteImageProfile(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DeleteImageProfile(
      arg0,
      arg1,
    );
  }

  late final _DeleteImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>)>>('DeleteImageProfile');
  late final _DeleteImageProfile = _DeleteImageProfilePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>();

  int ProfileImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _ProfileImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ProfileImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('ProfileImage');
  late final _ProfileImage = _ProfileImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, int, ffi.Pointer<ExceptionInfo>)>();

  int SetImageProfile(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<StringInfo> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SetImageProfile(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SetImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<StringInfo>,
              ffi.Pointer<ExceptionInfo>)>>('SetImageProfile');
  late final _SetImageProfile = _SetImageProfilePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<StringInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<StringInfo> RemoveImageProfile(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _RemoveImageProfile(
      arg0,
      arg1,
    );
  }

  late final _RemoveImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StringInfo> Function(ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>)>>('RemoveImageProfile');
  late final _RemoveImageProfile = _RemoveImageProfilePtr.asFunction<
      ffi.Pointer<StringInfo> Function(
          ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>();

  void DestroyImageProfiles(
    ffi.Pointer<Image> arg0,
  ) {
    return _DestroyImageProfiles(
      arg0,
    );
  }

  late final _DestroyImageProfilesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'DestroyImageProfiles');
  late final _DestroyImageProfiles =
      _DestroyImageProfilesPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ResetImageProfileIterator(
    ffi.Pointer<Image> arg0,
  ) {
    return _ResetImageProfileIterator(
      arg0,
    );
  }

  late final _ResetImageProfileIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ResetImageProfileIterator');
  late final _ResetImageProfileIterator = _ResetImageProfileIteratorPtr
      .asFunction<void Function(ffi.Pointer<Image>)>();

  int GetQuantumEndian(
    ffi.Pointer<QuantumInfo> arg0,
  ) {
    return _GetQuantumEndian(
      arg0,
    );
  }

  late final _GetQuantumEndianPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<QuantumInfo>)>>(
          'GetQuantumEndian');
  late final _GetQuantumEndian =
      _GetQuantumEndianPtr.asFunction<int Function(ffi.Pointer<QuantumInfo>)>();

  int SetQuantumDepth(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<QuantumInfo> arg1,
    int arg2,
  ) {
    return _SetQuantumDepth(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetQuantumDepthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<QuantumInfo>,
              ffi.Size)>>('SetQuantumDepth');
  late final _SetQuantumDepth = _SetQuantumDepthPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<QuantumInfo>, int)>();

  int SetQuantumEndian(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<QuantumInfo> arg1,
    int arg2,
  ) {
    return _SetQuantumEndian(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetQuantumEndianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<QuantumInfo>,
              ffi.Int32)>>('SetQuantumEndian');
  late final _SetQuantumEndian = _SetQuantumEndianPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<QuantumInfo>, int)>();

  int SetQuantumFormat(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<QuantumInfo> arg1,
    int arg2,
  ) {
    return _SetQuantumFormat(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetQuantumFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<QuantumInfo>,
              ffi.Int32)>>('SetQuantumFormat');
  late final _SetQuantumFormat = _SetQuantumFormatPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<QuantumInfo>, int)>();

  int SetQuantumPad(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<QuantumInfo> arg1,
    int arg2,
  ) {
    return _SetQuantumPad(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetQuantumPadPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<QuantumInfo>,
              ffi.Size)>>('SetQuantumPad');
  late final _SetQuantumPad = _SetQuantumPadPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<QuantumInfo>, int)>();

  int GetQuantumFormat(
    ffi.Pointer<QuantumInfo> arg0,
  ) {
    return _GetQuantumFormat(
      arg0,
    );
  }

  late final _GetQuantumFormatPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<QuantumInfo>)>>(
          'GetQuantumFormat');
  late final _GetQuantumFormat =
      _GetQuantumFormatPtr.asFunction<int Function(ffi.Pointer<QuantumInfo>)>();

  ffi.Pointer<QuantumInfo> AcquireQuantumInfo(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
  ) {
    return _AcquireQuantumInfo(
      arg0,
      arg1,
    );
  }

  late final _AcquireQuantumInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<QuantumInfo> Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>)>>('AcquireQuantumInfo');
  late final _AcquireQuantumInfo = _AcquireQuantumInfoPtr.asFunction<
      ffi.Pointer<QuantumInfo> Function(
          ffi.Pointer<ImageInfo>, ffi.Pointer<Image>)>();

  ffi.Pointer<QuantumInfo> DestroyQuantumInfo(
    ffi.Pointer<QuantumInfo> arg0,
  ) {
    return _DestroyQuantumInfo(
      arg0,
    );
  }

  late final _DestroyQuantumInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<QuantumInfo> Function(
              ffi.Pointer<QuantumInfo>)>>('DestroyQuantumInfo');
  late final _DestroyQuantumInfo = _DestroyQuantumInfoPtr.asFunction<
      ffi.Pointer<QuantumInfo> Function(ffi.Pointer<QuantumInfo>)>();

  int GetQuantumType(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetQuantumType(
      arg0,
      arg1,
    );
  }

  late final _GetQuantumTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('GetQuantumType');
  late final _GetQuantumType = _GetQuantumTypePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int ExportQuantumPixels(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<CacheView> arg1,
    ffi.Pointer<QuantumInfo> arg2,
    int arg3,
    ffi.Pointer<ffi.UnsignedChar> arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _ExportQuantumPixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _ExportQuantumPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<Image>,
              ffi.Pointer<CacheView>,
              ffi.Pointer<QuantumInfo>,
              ffi.Int32,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ExceptionInfo>)>>('ExportQuantumPixels');
  late final _ExportQuantumPixels = _ExportQuantumPixelsPtr.asFunction<
      int Function(
          ffi.Pointer<Image>,
          ffi.Pointer<CacheView>,
          ffi.Pointer<QuantumInfo>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ExceptionInfo>)>();

  int GetQuantumExtent(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<QuantumInfo> arg1,
    int arg2,
  ) {
    return _GetQuantumExtent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetQuantumExtentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<Image>, ffi.Pointer<QuantumInfo>,
              ffi.Int32)>>('GetQuantumExtent');
  late final _GetQuantumExtent = _GetQuantumExtentPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<QuantumInfo>, int)>();

  int ImportQuantumPixels(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<CacheView> arg1,
    ffi.Pointer<QuantumInfo> arg2,
    int arg3,
    ffi.Pointer<ffi.UnsignedChar> arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _ImportQuantumPixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _ImportQuantumPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<Image>,
              ffi.Pointer<CacheView>,
              ffi.Pointer<QuantumInfo>,
              ffi.Int32,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Pointer<ExceptionInfo>)>>('ImportQuantumPixels');
  late final _ImportQuantumPixels = _ImportQuantumPixelsPtr.asFunction<
      int Function(
          ffi.Pointer<Image>,
          ffi.Pointer<CacheView>,
          ffi.Pointer<QuantumInfo>,
          int,
          ffi.Pointer<ffi.UnsignedChar>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.UnsignedChar> GetQuantumPixels(
    ffi.Pointer<QuantumInfo> arg0,
  ) {
    return _GetQuantumPixels(
      arg0,
    );
  }

  late final _GetQuantumPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<QuantumInfo>)>>('GetQuantumPixels');
  late final _GetQuantumPixels = _GetQuantumPixelsPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<QuantumInfo>)>();

  void GetQuantumInfo(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<QuantumInfo> arg1,
  ) {
    return _GetQuantumInfo(
      arg0,
      arg1,
    );
  }

  late final _GetQuantumInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<QuantumInfo>)>>('GetQuantumInfo');
  late final _GetQuantumInfo = _GetQuantumInfoPtr.asFunction<
      void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<QuantumInfo>)>();

  void SetQuantumAlphaType(
    ffi.Pointer<QuantumInfo> arg0,
    int arg1,
  ) {
    return _SetQuantumAlphaType(
      arg0,
      arg1,
    );
  }

  late final _SetQuantumAlphaTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<QuantumInfo>, ffi.Int32)>>('SetQuantumAlphaType');
  late final _SetQuantumAlphaType = _SetQuantumAlphaTypePtr.asFunction<
      void Function(ffi.Pointer<QuantumInfo>, int)>();

  void SetQuantumImageType(
    ffi.Pointer<Image> arg0,
    int arg1,
  ) {
    return _SetQuantumImageType(
      arg0,
      arg1,
    );
  }

  late final _SetQuantumImageTypePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>, ffi.Int32)>>(
      'SetQuantumImageType');
  late final _SetQuantumImageType = _SetQuantumImageTypePtr.asFunction<
      void Function(ffi.Pointer<Image>, int)>();

  void SetQuantumMinIsWhite(
    ffi.Pointer<QuantumInfo> arg0,
    int arg1,
  ) {
    return _SetQuantumMinIsWhite(
      arg0,
      arg1,
    );
  }

  late final _SetQuantumMinIsWhitePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<QuantumInfo>, ffi.Int32)>>('SetQuantumMinIsWhite');
  late final _SetQuantumMinIsWhite = _SetQuantumMinIsWhitePtr.asFunction<
      void Function(ffi.Pointer<QuantumInfo>, int)>();

  void SetQuantumPack(
    ffi.Pointer<QuantumInfo> arg0,
    int arg1,
  ) {
    return _SetQuantumPack(
      arg0,
      arg1,
    );
  }

  late final _SetQuantumPackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<QuantumInfo>, ffi.Int32)>>('SetQuantumPack');
  late final _SetQuantumPack = _SetQuantumPackPtr.asFunction<
      void Function(ffi.Pointer<QuantumInfo>, int)>();

  void SetQuantumQuantum(
    ffi.Pointer<QuantumInfo> arg0,
    int arg1,
  ) {
    return _SetQuantumQuantum(
      arg0,
      arg1,
    );
  }

  late final _SetQuantumQuantumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<QuantumInfo>, ffi.Size)>>('SetQuantumQuantum');
  late final _SetQuantumQuantum = _SetQuantumQuantumPtr.asFunction<
      void Function(ffi.Pointer<QuantumInfo>, int)>();

  void SetQuantumScale(
    ffi.Pointer<QuantumInfo> arg0,
    double arg1,
  ) {
    return _SetQuantumScale(
      arg0,
      arg1,
    );
  }

  late final _SetQuantumScalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<QuantumInfo>, ffi.Double)>>('SetQuantumScale');
  late final _SetQuantumScale = _SetQuantumScalePtr.asFunction<
      void Function(ffi.Pointer<QuantumInfo>, double)>();

  int ResamplePixelColor(
    ffi.Pointer<ResampleFilter> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<PixelInfo> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _ResamplePixelColor(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ResamplePixelColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ResampleFilter>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ResamplePixelColor');
  late final _ResamplePixelColor = _ResamplePixelColorPtr.asFunction<
      int Function(ffi.Pointer<ResampleFilter>, double, double,
          ffi.Pointer<PixelInfo>, ffi.Pointer<ExceptionInfo>)>();

  int SetResampleFilterInterpolateMethod(
    ffi.Pointer<ResampleFilter> arg0,
    int arg1,
  ) {
    return _SetResampleFilterInterpolateMethod(
      arg0,
      arg1,
    );
  }

  late final _SetResampleFilterInterpolateMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ResampleFilter>,
              ffi.Int32)>>('SetResampleFilterInterpolateMethod');
  late final _SetResampleFilterInterpolateMethod =
      _SetResampleFilterInterpolateMethodPtr.asFunction<
          int Function(ffi.Pointer<ResampleFilter>, int)>();

  int SetResampleFilterVirtualPixelMethod(
    ffi.Pointer<ResampleFilter> arg0,
    int arg1,
  ) {
    return _SetResampleFilterVirtualPixelMethod(
      arg0,
      arg1,
    );
  }

  late final _SetResampleFilterVirtualPixelMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ResampleFilter>,
              ffi.Int32)>>('SetResampleFilterVirtualPixelMethod');
  late final _SetResampleFilterVirtualPixelMethod =
      _SetResampleFilterVirtualPixelMethodPtr.asFunction<
          int Function(ffi.Pointer<ResampleFilter>, int)>();

  ffi.Pointer<ResampleFilter> AcquireResampleFilter(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _AcquireResampleFilter(
      arg0,
      arg1,
    );
  }

  late final _AcquireResampleFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ResampleFilter> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('AcquireResampleFilter');
  late final _AcquireResampleFilter = _AcquireResampleFilterPtr.asFunction<
      ffi.Pointer<ResampleFilter> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ResampleFilter> DestroyResampleFilter(
    ffi.Pointer<ResampleFilter> arg0,
  ) {
    return _DestroyResampleFilter(
      arg0,
    );
  }

  late final _DestroyResampleFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ResampleFilter> Function(
              ffi.Pointer<ResampleFilter>)>>('DestroyResampleFilter');
  late final _DestroyResampleFilter = _DestroyResampleFilterPtr.asFunction<
      ffi.Pointer<ResampleFilter> Function(ffi.Pointer<ResampleFilter>)>();

  void ScaleResampleFilter(
    ffi.Pointer<ResampleFilter> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _ScaleResampleFilter(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ScaleResampleFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ResampleFilter>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('ScaleResampleFilter');
  late final _ScaleResampleFilter = _ScaleResampleFilterPtr.asFunction<
      void Function(
          ffi.Pointer<ResampleFilter>, double, double, double, double)>();

  void SetResampleFilter(
    ffi.Pointer<ResampleFilter> arg0,
    int arg1,
  ) {
    return _SetResampleFilter(
      arg0,
      arg1,
    );
  }

  late final _SetResampleFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ResampleFilter>, ffi.Int32)>>('SetResampleFilter');
  late final _SetResampleFilter = _SetResampleFilterPtr.asFunction<
      void Function(ffi.Pointer<ResampleFilter>, int)>();

  ffi.Pointer<Image> AdaptiveResizeImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _AdaptiveResizeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _AdaptiveResizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Size, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('AdaptiveResizeImage');
  late final _AdaptiveResizeImage = _AdaptiveResizeImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> InterpolativeResizeImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _InterpolativeResizeImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _InterpolativeResizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Size,
              ffi.Size,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('InterpolativeResizeImage');
  late final _InterpolativeResizeImage =
      _InterpolativeResizeImagePtr.asFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>, int, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> LiquidRescaleImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    double arg3,
    double arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _LiquidRescaleImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _LiquidRescaleImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Size,
              ffi.Size,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('LiquidRescaleImage');
  late final _LiquidRescaleImage = _LiquidRescaleImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, int, int, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> MagnifyImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _MagnifyImage(
      arg0,
      arg1,
    );
  }

  late final _MagnifyImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('MagnifyImage');
  late final _MagnifyImage = _MagnifyImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> MinifyImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _MinifyImage(
      arg0,
      arg1,
    );
  }

  late final _MinifyImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('MinifyImage');
  late final _MinifyImage = _MinifyImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ResampleImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _ResampleImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ResampleImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Double,
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('ResampleImage');
  late final _ResampleImage = _ResampleImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, double, double, int,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ResizeImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _ResizeImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ResizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Size, ffi.Size,
              ffi.Int32, ffi.Pointer<ExceptionInfo>)>>('ResizeImage');
  late final _ResizeImage = _ResizeImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SampleImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SampleImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SampleImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Size, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('SampleImage');
  late final _SampleImage = _SampleImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ScaleImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ScaleImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ScaleImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Size, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('ScaleImage');
  late final _ScaleImage = _ScaleImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ThumbnailImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ThumbnailImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ThumbnailImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Size, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('ThumbnailImage');
  late final _ThumbnailImage = _ThumbnailImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, ffi.Pointer<ExceptionInfo>)>();

  double GetElapsedTime(
    ffi.Pointer<TimerInfo> arg0,
  ) {
    return _GetElapsedTime(
      arg0,
    );
  }

  late final _GetElapsedTimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<TimerInfo>)>>(
          'GetElapsedTime');
  late final _GetElapsedTime =
      _GetElapsedTimePtr.asFunction<double Function(ffi.Pointer<TimerInfo>)>();

  double GetUserTime(
    ffi.Pointer<TimerInfo> arg0,
  ) {
    return _GetUserTime(
      arg0,
    );
  }

  late final _GetUserTimePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<TimerInfo>)>>(
          'GetUserTime');
  late final _GetUserTime =
      _GetUserTimePtr.asFunction<double Function(ffi.Pointer<TimerInfo>)>();

  int ContinueTimer(
    ffi.Pointer<TimerInfo> arg0,
  ) {
    return _ContinueTimer(
      arg0,
    );
  }

  late final _ContinueTimerPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<TimerInfo>)>>(
          'ContinueTimer');
  late final _ContinueTimer =
      _ContinueTimerPtr.asFunction<int Function(ffi.Pointer<TimerInfo>)>();

  int FormatMagickTime(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _FormatMagickTime(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _FormatMagickTimePtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              time_t, ffi.Size, ffi.Pointer<ffi.Char>)>>('FormatMagickTime');
  late final _FormatMagickTime = _FormatMagickTimePtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TimerInfo> AcquireTimerInfo() {
    return _AcquireTimerInfo();
  }

  late final _AcquireTimerInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<TimerInfo> Function()>>(
          'AcquireTimerInfo');
  late final _AcquireTimerInfo =
      _AcquireTimerInfoPtr.asFunction<ffi.Pointer<TimerInfo> Function()>();

  ffi.Pointer<TimerInfo> DestroyTimerInfo(
    ffi.Pointer<TimerInfo> arg0,
  ) {
    return _DestroyTimerInfo(
      arg0,
    );
  }

  late final _DestroyTimerInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TimerInfo> Function(
              ffi.Pointer<TimerInfo>)>>('DestroyTimerInfo');
  late final _DestroyTimerInfo = _DestroyTimerInfoPtr.asFunction<
      ffi.Pointer<TimerInfo> Function(ffi.Pointer<TimerInfo>)>();

  void GetTimerInfo(
    ffi.Pointer<TimerInfo> arg0,
  ) {
    return _GetTimerInfo(
      arg0,
    );
  }

  late final _GetTimerInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TimerInfo>)>>(
          'GetTimerInfo');
  late final _GetTimerInfo =
      _GetTimerInfoPtr.asFunction<void Function(ffi.Pointer<TimerInfo>)>();

  void ResetTimer(
    ffi.Pointer<TimerInfo> arg0,
  ) {
    return _ResetTimer(
      arg0,
    );
  }

  late final _ResetTimerPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<TimerInfo>)>>(
          'ResetTimer');
  late final _ResetTimer =
      _ResetTimerPtr.asFunction<void Function(ffi.Pointer<TimerInfo>)>();

  void StartTimer(
    ffi.Pointer<TimerInfo> arg0,
    int arg1,
  ) {
    return _StartTimer(
      arg0,
      arg1,
    );
  }

  late final _StartTimerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<TimerInfo>, ffi.Int32)>>('StartTimer');
  late final _StartTimer =
      _StartTimerPtr.asFunction<void Function(ffi.Pointer<TimerInfo>, int)>();

  int SetImageChannelMask(
    ffi.Pointer<Image> arg0,
    int arg1,
  ) {
    return _SetImageChannelMask(
      arg0,
      arg1,
    );
  }

  late final _SetImageChannelMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>, ffi.Int32)>>('SetImageChannelMask');
  late final _SetImageChannelMask = _SetImageChannelMaskPtr.asFunction<
      int Function(ffi.Pointer<Image>, int)>();

  int CatchImageException(
    ffi.Pointer<Image> arg0,
  ) {
    return _CatchImageException(
      arg0,
    );
  }

  late final _CatchImageExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'CatchImageException');
  late final _CatchImageException =
      _CatchImageExceptionPtr.asFunction<int Function(ffi.Pointer<Image>)>();

  ffi.Pointer<FILE> GetImageInfoFile(
    ffi.Pointer<ImageInfo> arg0,
  ) {
    return _GetImageInfoFile(
      arg0,
    );
  }

  late final _GetImageInfoFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<FILE> Function(
              ffi.Pointer<ImageInfo>)>>('GetImageInfoFile');
  late final _GetImageInfoFile = _GetImageInfoFilePtr.asFunction<
      ffi.Pointer<FILE> Function(ffi.Pointer<ImageInfo>)>();

  ffi.Pointer<Image> AcquireImage(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _AcquireImage(
      arg0,
      arg1,
    );
  }

  late final _AcquireImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<ExceptionInfo>)>>('AcquireImage');
  late final _AcquireImage = _AcquireImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<ImageInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> AppendImages(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _AppendImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AppendImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('AppendImages');
  late final _AppendImages = _AppendImagesPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> CloneImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _CloneImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _CloneImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Size, ffi.Size,
              ffi.Int32, ffi.Pointer<ExceptionInfo>)>>('CloneImage');
  late final _CloneImage = _CloneImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> DestroyImage(
    ffi.Pointer<Image> arg0,
  ) {
    return _DestroyImage(
      arg0,
    );
  }

  late final _DestroyImagePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Image> Function(ffi.Pointer<Image>)>>(
      'DestroyImage');
  late final _DestroyImage = _DestroyImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Image> GetImageMask(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetImageMask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetImageMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('GetImageMask');
  late final _GetImageMask = _GetImageMaskPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> NewMagickImage(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<PixelInfo> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _NewMagickImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _NewMagickImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('NewMagickImage');
  late final _NewMagickImage = _NewMagickImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>, int, int,
          ffi.Pointer<PixelInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ReferenceImage(
    ffi.Pointer<Image> arg0,
  ) {
    return _ReferenceImage(
      arg0,
    );
  }

  late final _ReferenceImagePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Image> Function(ffi.Pointer<Image>)>>(
      'ReferenceImage');
  late final _ReferenceImage = _ReferenceImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Image> SmushImages(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SmushImages(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SmushImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32, ssize_t,
              ffi.Pointer<ExceptionInfo>)>>('SmushImages');
  late final _SmushImages = _SmushImagesPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ImageInfo> AcquireImageInfo() {
    return _AcquireImageInfo();
  }

  late final _AcquireImageInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ImageInfo> Function()>>(
          'AcquireImageInfo');
  late final _AcquireImageInfo =
      _AcquireImageInfoPtr.asFunction<ffi.Pointer<ImageInfo> Function()>();

  ffi.Pointer<ImageInfo> CloneImageInfo(
    ffi.Pointer<ImageInfo> arg0,
  ) {
    return _CloneImageInfo(
      arg0,
    );
  }

  late final _CloneImageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImageInfo> Function(
              ffi.Pointer<ImageInfo>)>>('CloneImageInfo');
  late final _CloneImageInfo = _CloneImageInfoPtr.asFunction<
      ffi.Pointer<ImageInfo> Function(ffi.Pointer<ImageInfo>)>();

  ffi.Pointer<ImageInfo> DestroyImageInfo(
    ffi.Pointer<ImageInfo> arg0,
  ) {
    return _DestroyImageInfo(
      arg0,
    );
  }

  late final _DestroyImageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImageInfo> Function(
              ffi.Pointer<ImageInfo>)>>('DestroyImageInfo');
  late final _DestroyImageInfo = _DestroyImageInfoPtr.asFunction<
      ffi.Pointer<ImageInfo> Function(ffi.Pointer<ImageInfo>)>();

  int ClipImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ClipImage(
      arg0,
      arg1,
    );
  }

  late final _ClipImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('ClipImage');
  late final _ClipImage = _ClipImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int ClipImagePath(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ClipImagePath(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ClipImagePathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Int32, ffi.Pointer<ExceptionInfo>)>>('ClipImagePath');
  late final _ClipImagePath = _ClipImagePathPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ExceptionInfo>)>();

  int CopyImagePixels(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<RectangleInfo> arg2,
    ffi.Pointer<OffsetInfo> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _CopyImagePixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _CopyImagePixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<OffsetInfo>,
              ffi.Pointer<ExceptionInfo>)>>('CopyImagePixels');
  late final _CopyImagePixels = _CopyImagePixelsPtr.asFunction<
      int Function(
          ffi.Pointer<Image>,
          ffi.Pointer<Image>,
          ffi.Pointer<RectangleInfo>,
          ffi.Pointer<OffsetInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  int IsTaintImage(
    ffi.Pointer<Image> arg0,
  ) {
    return _IsTaintImage(
      arg0,
    );
  }

  late final _IsTaintImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'IsTaintImage');
  late final _IsTaintImage =
      _IsTaintImagePtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int IsHighDynamicRangeImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _IsHighDynamicRangeImage(
      arg0,
      arg1,
    );
  }

  late final _IsHighDynamicRangeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('IsHighDynamicRangeImage');
  late final _IsHighDynamicRangeImage = _IsHighDynamicRangeImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int IsImageObject(
    ffi.Pointer<Image> arg0,
  ) {
    return _IsImageObject(
      arg0,
    );
  }

  late final _IsImageObjectPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'IsImageObject');
  late final _IsImageObject =
      _IsImageObjectPtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int ListMagickInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListMagickInfo(
      arg0,
      arg1,
    );
  }

  late final _ListMagickInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<ExceptionInfo>)>>('ListMagickInfo');
  late final _ListMagickInfo = _ListMagickInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  int ModifyImage(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ModifyImage(
      arg0,
      arg1,
    );
  }

  late final _ModifyImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<ExceptionInfo>)>>('ModifyImage');
  late final _ModifyImage = _ModifyImagePtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Pointer<Image>>, ffi.Pointer<ExceptionInfo>)>();

  int ResetImagePage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _ResetImagePage(
      arg0,
      arg1,
    );
  }

  late final _ResetImagePagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>>('ResetImagePage');
  late final _ResetImagePage = _ResetImagePagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>();

  int ResetImagePixels(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ResetImagePixels(
      arg0,
      arg1,
    );
  }

  late final _ResetImagePixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('ResetImagePixels');
  late final _ResetImagePixels = _ResetImagePixelsPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int SetImageAlpha(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetImageAlpha(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageAlphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, Quantum,
              ffi.Pointer<ExceptionInfo>)>>('SetImageAlpha');
  late final _SetImageAlpha = _SetImageAlphaPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int SetImageBackgroundColor(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _SetImageBackgroundColor(
      arg0,
      arg1,
    );
  }

  late final _SetImageBackgroundColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SetImageBackgroundColor');
  late final _SetImageBackgroundColor = _SetImageBackgroundColorPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int SetImageColor(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<PixelInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetImageColor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('SetImageColor');
  late final _SetImageColor = _SetImageColorPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<PixelInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  int SetImageExtent(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SetImageExtent(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SetImageExtentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Size, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('SetImageExtent');
  late final _SetImageExtent = _SetImageExtentPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, int, ffi.Pointer<ExceptionInfo>)>();

  int SetImageInfo(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetImageInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageInfo>, ffi.UnsignedInt,
              ffi.Pointer<ExceptionInfo>)>>('SetImageInfo');
  late final _SetImageInfo = _SetImageInfoPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, int, ffi.Pointer<ExceptionInfo>)>();

  int SetImageMask(
    ffi.Pointer<Image> arg0,
    int type,
    ffi.Pointer<Image> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SetImageMask(
      arg0,
      type,
      arg2,
      arg3,
    );
  }

  late final _SetImageMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SetImageMask');
  late final _SetImageMask = _SetImageMaskPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  int SetImageRegionMask(
    ffi.Pointer<Image> arg0,
    int type,
    ffi.Pointer<RectangleInfo> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SetImageRegionMask(
      arg0,
      type,
      arg2,
      arg3,
    );
  }

  late final _SetImageRegionMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ExceptionInfo>)>>('SetImageRegionMask');
  late final _SetImageRegionMask = _SetImageRegionMaskPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<RectangleInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  int SetImageStorageClass(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetImageStorageClass(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageStorageClassPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('SetImageStorageClass');
  late final _SetImageStorageClass = _SetImageStorageClassPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int StripImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _StripImage(
      arg0,
      arg1,
    );
  }

  late final _StripImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('StripImage');
  late final _StripImage = _StripImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int SyncImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _SyncImage(
      arg0,
      arg1,
    );
  }

  late final _SyncImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('SyncImage');
  late final _SyncImage = _SyncImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int SyncImageSettings(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SyncImageSettings(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SyncImageSettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SyncImageSettings');
  late final _SyncImageSettings = _SyncImageSettingsPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  int SyncImagesSettings(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SyncImagesSettings(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SyncImagesSettingsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SyncImagesSettings');
  late final _SyncImagesSettings = _SyncImagesSettingsPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  int InterpretImageFilename(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _InterpretImageFilename(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _InterpretImageFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('InterpretImageFilename');
  late final _InterpretImageFilename = _InterpretImageFilenamePtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          ffi.Pointer<Image>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int GetImageReferenceCount(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetImageReferenceCount(
      arg0,
    );
  }

  late final _GetImageReferenceCountPtr =
      _lookup<ffi.NativeFunction<ssize_t Function(ffi.Pointer<Image>)>>(
          'GetImageReferenceCount');
  late final _GetImageReferenceCount =
      _GetImageReferenceCountPtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int GetImageVirtualPixelMethod(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetImageVirtualPixelMethod(
      arg0,
    );
  }

  late final _GetImageVirtualPixelMethodPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'GetImageVirtualPixelMethod');
  late final _GetImageVirtualPixelMethod = _GetImageVirtualPixelMethodPtr
      .asFunction<int Function(ffi.Pointer<Image>)>();

  int SetImageVirtualPixelMethod(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetImageVirtualPixelMethod(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageVirtualPixelMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('SetImageVirtualPixelMethod');
  late final _SetImageVirtualPixelMethod =
      _SetImageVirtualPixelMethodPtr.asFunction<
          int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  void AcquireNextImage(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _AcquireNextImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AcquireNextImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('AcquireNextImage');
  late final _AcquireNextImage = _AcquireNextImagePtr.asFunction<
      void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  void DestroyImagePixels(
    ffi.Pointer<Image> arg0,
  ) {
    return _DestroyImagePixels(
      arg0,
    );
  }

  late final _DestroyImagePixelsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'DestroyImagePixels');
  late final _DestroyImagePixels =
      _DestroyImagePixelsPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void DisassociateImageStream(
    ffi.Pointer<Image> arg0,
  ) {
    return _DisassociateImageStream(
      arg0,
    );
  }

  late final _DisassociateImageStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'DisassociateImageStream');
  late final _DisassociateImageStream = _DisassociateImageStreamPtr.asFunction<
      void Function(ffi.Pointer<Image>)>();

  void GetImageInfo(
    ffi.Pointer<ImageInfo> arg0,
  ) {
    return _GetImageInfo(
      arg0,
    );
  }

  late final _GetImageInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImageInfo>)>>(
          'GetImageInfo');
  late final _GetImageInfo =
      _GetImageInfoPtr.asFunction<void Function(ffi.Pointer<ImageInfo>)>();

  void SetImageInfoBlob(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _SetImageInfoBlob(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageInfoBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('SetImageInfoBlob');
  late final _SetImageInfoBlob = _SetImageInfoBlobPtr.asFunction<
      void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Void>, int)>();

  void SetImageInfoFile(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _SetImageInfoFile(
      arg0,
      arg1,
    );
  }

  late final _SetImageInfoFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImageInfo>, ffi.Pointer<FILE>)>>('SetImageInfoFile');
  late final _SetImageInfoFile = _SetImageInfoFilePtr.asFunction<
      void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<FILE>)>();

  void SetImageInfoCustomStream(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<CustomStreamInfo> arg1,
  ) {
    return _SetImageInfoCustomStream(
      arg0,
      arg1,
    );
  }

  late final _SetImageInfoCustomStreamPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<CustomStreamInfo>)>>('SetImageInfoCustomStream');
  late final _SetImageInfoCustomStream =
      _SetImageInfoCustomStreamPtr.asFunction<
          void Function(
              ffi.Pointer<ImageInfo>, ffi.Pointer<CustomStreamInfo>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetTypeList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetTypeList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetTypeListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetTypeList');
  late final _GetTypeList = _GetTypeListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  int ListTypeInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListTypeInfo(
      arg0,
      arg1,
    );
  }

  late final _ListTypeInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>>('ListTypeInfo');
  late final _ListTypeInfo = _ListTypeInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<TypeInfo> GetTypeInfo(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetTypeInfo(
      arg0,
      arg1,
    );
  }

  late final _GetTypeInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TypeInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetTypeInfo');
  late final _GetTypeInfo = _GetTypeInfoPtr.asFunction<
      ffi.Pointer<TypeInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<TypeInfo> GetTypeInfoByFamily(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _GetTypeInfoByFamily(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _GetTypeInfoByFamilyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TypeInfo> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Int32,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('GetTypeInfoByFamily');
  late final _GetTypeInfoByFamily = _GetTypeInfoByFamilyPtr.asFunction<
      ffi.Pointer<TypeInfo> Function(
          ffi.Pointer<ffi.Char>, int, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<TypeInfo>> GetTypeInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetTypeInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetTypeInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<TypeInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetTypeInfoList');
  late final _GetTypeInfoList = _GetTypeInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<TypeInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<DrawInfo> AcquireDrawInfo() {
    return _AcquireDrawInfo();
  }

  late final _AcquireDrawInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DrawInfo> Function()>>(
          'AcquireDrawInfo');
  late final _AcquireDrawInfo =
      _AcquireDrawInfoPtr.asFunction<ffi.Pointer<DrawInfo> Function()>();

  ffi.Pointer<DrawInfo> CloneDrawInfo(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<DrawInfo> arg1,
  ) {
    return _CloneDrawInfo(
      arg0,
      arg1,
    );
  }

  late final _CloneDrawInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DrawInfo> Function(
              ffi.Pointer<ImageInfo>, ffi.Pointer<DrawInfo>)>>('CloneDrawInfo');
  late final _CloneDrawInfo = _CloneDrawInfoPtr.asFunction<
      ffi.Pointer<DrawInfo> Function(
          ffi.Pointer<ImageInfo>, ffi.Pointer<DrawInfo>)>();

  ffi.Pointer<DrawInfo> DestroyDrawInfo(
    ffi.Pointer<DrawInfo> arg0,
  ) {
    return _DestroyDrawInfo(
      arg0,
    );
  }

  late final _DestroyDrawInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DrawInfo> Function(
              ffi.Pointer<DrawInfo>)>>('DestroyDrawInfo');
  late final _DestroyDrawInfo = _DestroyDrawInfoPtr.asFunction<
      ffi.Pointer<DrawInfo> Function(ffi.Pointer<DrawInfo>)>();

  int DrawAffineImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<AffineMatrix> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _DrawAffineImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _DrawAffineImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ffi.Pointer<AffineMatrix>,
              ffi.Pointer<ExceptionInfo>)>>('DrawAffineImage');
  late final _DrawAffineImage = _DrawAffineImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
          ffi.Pointer<AffineMatrix>, ffi.Pointer<ExceptionInfo>)>();

  int DrawClipPath(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<DrawInfo> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _DrawClipPath(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _DrawClipPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<DrawInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('DrawClipPath');
  late final _DrawClipPath = _DrawClipPathPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  int DrawGradientImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<DrawInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _DrawGradientImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawGradientImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
              ffi.Pointer<ExceptionInfo>)>>('DrawGradientImage');
  late final _DrawGradientImage = _DrawGradientImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  int DrawImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<DrawInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _DrawImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
              ffi.Pointer<ExceptionInfo>)>>('DrawImage');
  late final _DrawImage = _DrawImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  int DrawPatternPath(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<DrawInfo> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Pointer<Image>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _DrawPatternPath(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DrawPatternPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<DrawInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<ExceptionInfo>)>>('DrawPatternPath');
  late final _DrawPatternPath = _DrawPatternPathPtr.asFunction<
      int Function(
          ffi.Pointer<Image>,
          ffi.Pointer<DrawInfo>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Pointer<Image>>,
          ffi.Pointer<ExceptionInfo>)>();

  int DrawPrimitive(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<DrawInfo> arg1,
    ffi.Pointer<PrimitiveInfo> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _DrawPrimitive(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _DrawPrimitivePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<DrawInfo>,
              ffi.Pointer<PrimitiveInfo>,
              ffi.Pointer<ExceptionInfo>)>>('DrawPrimitive');
  late final _DrawPrimitive = _DrawPrimitivePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
          ffi.Pointer<PrimitiveInfo>, ffi.Pointer<ExceptionInfo>)>();

  void GetAffineMatrix(
    ffi.Pointer<AffineMatrix> arg0,
  ) {
    return _GetAffineMatrix(
      arg0,
    );
  }

  late final _GetAffineMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<AffineMatrix>)>>(
          'GetAffineMatrix');
  late final _GetAffineMatrix = _GetAffineMatrixPtr.asFunction<
      void Function(ffi.Pointer<AffineMatrix>)>();

  void GetDrawInfo(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<DrawInfo> arg1,
  ) {
    return _GetDrawInfo(
      arg0,
      arg1,
    );
  }

  late final _GetDrawInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImageInfo>, ffi.Pointer<DrawInfo>)>>('GetDrawInfo');
  late final _GetDrawInfo = _GetDrawInfoPtr.asFunction<
      void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<DrawInfo>)>();

  int AnnotateImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<DrawInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _AnnotateImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AnnotateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
              ffi.Pointer<ExceptionInfo>)>>('AnnotateImage');
  late final _AnnotateImage = _AnnotateImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  int GetMultilineTypeMetrics(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<DrawInfo> arg1,
    ffi.Pointer<TypeMetric> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _GetMultilineTypeMetrics(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetMultilineTypeMetricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<DrawInfo>,
              ffi.Pointer<TypeMetric>,
              ffi.Pointer<ExceptionInfo>)>>('GetMultilineTypeMetrics');
  late final _GetMultilineTypeMetrics = _GetMultilineTypeMetricsPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
          ffi.Pointer<TypeMetric>, ffi.Pointer<ExceptionInfo>)>();

  int GetTypeMetrics(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<DrawInfo> arg1,
    ffi.Pointer<TypeMetric> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _GetTypeMetrics(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetTypeMetricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<DrawInfo>,
              ffi.Pointer<TypeMetric>,
              ffi.Pointer<ExceptionInfo>)>>('GetTypeMetrics');
  late final _GetTypeMetrics = _GetTypeMetricsPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
          ffi.Pointer<TypeMetric>, ffi.Pointer<ExceptionInfo>)>();

  int FormatMagickCaption(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<DrawInfo> arg1,
    int arg2,
    ffi.Pointer<TypeMetric> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _FormatMagickCaption(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _FormatMagickCaptionPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(
              ffi.Pointer<Image>,
              ffi.Pointer<DrawInfo>,
              ffi.Int32,
              ffi.Pointer<TypeMetric>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('FormatMagickCaption');
  late final _FormatMagickCaption = _FormatMagickCaptionPtr.asFunction<
      int Function(
          ffi.Pointer<Image>,
          ffi.Pointer<DrawInfo>,
          int,
          ffi.Pointer<TypeMetric>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> RemoveImageArtifact(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _RemoveImageArtifact(
      arg0,
      arg1,
    );
  }

  late final _RemoveImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>)>>('RemoveImageArtifact');
  late final _RemoveImageArtifact = _RemoveImageArtifactPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetNextImageArtifact(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetNextImageArtifact(
      arg0,
    );
  }

  late final _GetNextImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Image>)>>('GetNextImageArtifact');
  late final _GetNextImageArtifact = _GetNextImageArtifactPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<ffi.Char> GetImageArtifact(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _GetImageArtifact(
      arg0,
      arg1,
    );
  }

  late final _GetImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>>('GetImageArtifact');
  late final _GetImageArtifact = _GetImageArtifactPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>();

  int CloneImageArtifacts(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
  ) {
    return _CloneImageArtifacts(
      arg0,
      arg1,
    );
  }

  late final _CloneImageArtifactsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>, ffi.Pointer<Image>)>>('CloneImageArtifacts');
  late final _CloneImageArtifacts = _CloneImageArtifactsPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>)>();

  int DefineImageArtifact(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DefineImageArtifact(
      arg0,
      arg1,
    );
  }

  late final _DefineImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>)>>('DefineImageArtifact');
  late final _DefineImageArtifact = _DefineImageArtifactPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>();

  int DeleteImageArtifact(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DeleteImageArtifact(
      arg0,
      arg1,
    );
  }

  late final _DeleteImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>)>>('DeleteImageArtifact');
  late final _DeleteImageArtifact = _DeleteImageArtifactPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>();

  int SetImageArtifact(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _SetImageArtifact(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('SetImageArtifact');
  late final _SetImageArtifact = _SetImageArtifactPtr.asFunction<
      int Function(
          ffi.Pointer<Image>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void DestroyImageArtifacts(
    ffi.Pointer<Image> arg0,
  ) {
    return _DestroyImageArtifacts(
      arg0,
    );
  }

  late final _DestroyImageArtifactsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'DestroyImageArtifacts');
  late final _DestroyImageArtifacts =
      _DestroyImageArtifactsPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  void ResetImageArtifactIterator(
    ffi.Pointer<Image> arg0,
  ) {
    return _ResetImageArtifactIterator(
      arg0,
    );
  }

  late final _ResetImageArtifactIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ResetImageArtifactIterator');
  late final _ResetImageArtifactIterator = _ResetImageArtifactIteratorPtr
      .asFunction<void Function(ffi.Pointer<Image>)>();

  int GetImageType(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetImageType(
      arg0,
    );
  }

  late final _GetImageTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'GetImageType');
  late final _GetImageType =
      _GetImageTypePtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int IdentifyImageGray(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _IdentifyImageGray(
      arg0,
      arg1,
    );
  }

  late final _IdentifyImageGrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('IdentifyImageGray');
  late final _IdentifyImageGray = _IdentifyImageGrayPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int IdentifyImageType(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _IdentifyImageType(
      arg0,
      arg1,
    );
  }

  late final _IdentifyImageTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('IdentifyImageType');
  late final _IdentifyImageType = _IdentifyImageTypePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int IdentifyImageMonochrome(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _IdentifyImageMonochrome(
      arg0,
      arg1,
    );
  }

  late final _IdentifyImageMonochromePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('IdentifyImageMonochrome');
  late final _IdentifyImageMonochrome = _IdentifyImageMonochromePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int IsImageGray(
    ffi.Pointer<Image> arg0,
  ) {
    return _IsImageGray(
      arg0,
    );
  }

  late final _IsImageGrayPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'IsImageGray');
  late final _IsImageGray =
      _IsImageGrayPtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int IsImageMonochrome(
    ffi.Pointer<Image> arg0,
  ) {
    return _IsImageMonochrome(
      arg0,
    );
  }

  late final _IsImageMonochromePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'IsImageMonochrome');
  late final _IsImageMonochrome =
      _IsImageMonochromePtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int IsImageOpaque(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _IsImageOpaque(
      arg0,
      arg1,
    );
  }

  late final _IsImageOpaquePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('IsImageOpaque');
  late final _IsImageOpaque = _IsImageOpaquePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int SetImageDepth(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetImageDepth(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageDepthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('SetImageDepth');
  late final _SetImageDepth = _SetImageDepthPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int SetImageType(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetImageType(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('SetImageType');
  late final _SetImageType = _SetImageTypePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<PointInfo> GetImageConvexHull(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetImageConvexHull(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetImageConvexHullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PointInfo> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageConvexHull');
  late final _GetImageConvexHull = _GetImageConvexHullPtr.asFunction<
      ffi.Pointer<PointInfo> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<PointInfo> GetImageMinimumBoundingBox(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetImageMinimumBoundingBox(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetImageMinimumBoundingBoxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PointInfo> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageMinimumBoundingBox');
  late final _GetImageMinimumBoundingBox =
      _GetImageMinimumBoundingBoxPtr.asFunction<
          ffi.Pointer<PointInfo> Function(ffi.Pointer<Image>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  RectangleInfo GetImageBoundingBox(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetImageBoundingBox(
      arg0,
      arg1,
    );
  }

  late final _GetImageBoundingBoxPtr = _lookup<
      ffi.NativeFunction<
          RectangleInfo Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageBoundingBox');
  late final _GetImageBoundingBox = _GetImageBoundingBoxPtr.asFunction<
      RectangleInfo Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int GetImageDepth(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetImageDepth(
      arg0,
      arg1,
    );
  }

  late final _GetImageDepthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageDepth');
  late final _GetImageDepth = _GetImageDepthPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int GetImageQuantumDepth(
    ffi.Pointer<Image> arg0,
    int arg1,
  ) {
    return _GetImageQuantumDepth(
      arg0,
      arg1,
    );
  }

  late final _GetImageQuantumDepthPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<Image>, ffi.Int32)>>(
      'GetImageQuantumDepth');
  late final _GetImageQuantumDepth = _GetImageQuantumDepthPtr.asFunction<
      int Function(ffi.Pointer<Image>, int)>();

  int GetImagePixelCacheType(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetImagePixelCacheType(
      arg0,
    );
  }

  late final _GetImagePixelCacheTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'GetImagePixelCacheType');
  late final _GetImagePixelCacheType =
      _GetImagePixelCacheTypePtr.asFunction<int Function(ffi.Pointer<Image>)>();

  ffi.Pointer<ffi.Char> GetPixelCacheFilename(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetPixelCacheFilename(
      arg0,
    );
  }

  late final _GetPixelCacheFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Image>)>>('GetPixelCacheFilename');
  late final _GetPixelCacheFilename = _GetPixelCacheFilenamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Quantum> GetVirtualPixels(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _GetVirtualPixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _GetVirtualPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<Image>,
              ssize_t,
              ssize_t,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('GetVirtualPixels');
  late final _GetVirtualPixels = _GetVirtualPixelsPtr.asFunction<
      ffi.Pointer<Quantum> Function(ffi.Pointer<Image>, int, int, int, int,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Quantum> GetVirtualPixelQueue(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetVirtualPixelQueue(
      arg0,
    );
  }

  late final _GetVirtualPixelQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<Image>)>>('GetVirtualPixelQueue');
  late final _GetVirtualPixelQueue = _GetVirtualPixelQueuePtr.asFunction<
      ffi.Pointer<Quantum> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<ffi.Void> GetVirtualMetacontent(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetVirtualMetacontent(
      arg0,
    );
  }

  late final _GetVirtualMetacontentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<Image>)>>('GetVirtualMetacontent');
  late final _GetVirtualMetacontent = _GetVirtualMetacontentPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<Image>)>();

  int GetOneAuthenticPixel(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<Quantum> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _GetOneAuthenticPixel(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _GetOneAuthenticPixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ssize_t,
              ssize_t,
              ffi.Pointer<Quantum>,
              ffi.Pointer<ExceptionInfo>)>>('GetOneAuthenticPixel');
  late final _GetOneAuthenticPixel = _GetOneAuthenticPixelPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, int, ffi.Pointer<Quantum>,
          ffi.Pointer<ExceptionInfo>)>();

  int GetOneVirtualPixel(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<Quantum> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _GetOneVirtualPixel(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _GetOneVirtualPixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ssize_t,
              ssize_t,
              ffi.Pointer<Quantum>,
              ffi.Pointer<ExceptionInfo>)>>('GetOneVirtualPixel');
  late final _GetOneVirtualPixel = _GetOneVirtualPixelPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, int, ffi.Pointer<Quantum>,
          ffi.Pointer<ExceptionInfo>)>();

  int GetOneVirtualPixelInfo(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<PixelInfo> arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _GetOneVirtualPixelInfo(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _GetOneVirtualPixelInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Int32,
              ssize_t,
              ssize_t,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('GetOneVirtualPixelInfo');
  late final _GetOneVirtualPixelInfo = _GetOneVirtualPixelInfoPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, int, int, ffi.Pointer<PixelInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  int PersistPixelCache(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<MagickOffsetType> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _PersistPixelCache(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _PersistPixelCachePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<MagickOffsetType>,
              ffi.Pointer<ExceptionInfo>)>>('PersistPixelCache');
  late final _PersistPixelCache = _PersistPixelCachePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<MagickOffsetType>, ffi.Pointer<ExceptionInfo>)>();

  int SyncAuthenticPixels(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _SyncAuthenticPixels(
      arg0,
      arg1,
    );
  }

  late final _SyncAuthenticPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SyncAuthenticPixels');
  late final _SyncAuthenticPixels = _SyncAuthenticPixelsPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int GetImageExtent(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetImageExtent(
      arg0,
    );
  }

  late final _GetImageExtentPtr =
      _lookup<ffi.NativeFunction<MagickSizeType Function(ffi.Pointer<Image>)>>(
          'GetImageExtent');
  late final _GetImageExtent =
      _GetImageExtentPtr.asFunction<int Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Quantum> GetAuthenticPixels(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _GetAuthenticPixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _GetAuthenticPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<Image>,
              ssize_t,
              ssize_t,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('GetAuthenticPixels');
  late final _GetAuthenticPixels = _GetAuthenticPixelsPtr.asFunction<
      ffi.Pointer<Quantum> Function(ffi.Pointer<Image>, int, int, int, int,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Quantum> GetAuthenticPixelQueue(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetAuthenticPixelQueue(
      arg0,
    );
  }

  late final _GetAuthenticPixelQueuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<Image>)>>('GetAuthenticPixelQueue');
  late final _GetAuthenticPixelQueue = _GetAuthenticPixelQueuePtr.asFunction<
      ffi.Pointer<Quantum> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Quantum> QueueAuthenticPixels(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _QueueAuthenticPixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _QueueAuthenticPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<Image>,
              ssize_t,
              ssize_t,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('QueueAuthenticPixels');
  late final _QueueAuthenticPixels = _QueueAuthenticPixelsPtr.asFunction<
      ffi.Pointer<Quantum> Function(ffi.Pointer<Image>, int, int, int, int,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Void> AcquirePixelCachePixels(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _AcquirePixelCachePixels(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AcquirePixelCachePixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('AcquirePixelCachePixels');
  late final _AcquirePixelCachePixels = _AcquirePixelCachePixelsPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Void> GetAuthenticMetacontent(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetAuthenticMetacontent(
      arg0,
    );
  }

  late final _GetAuthenticMetacontentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<Image>)>>('GetAuthenticMetacontent');
  late final _GetAuthenticMetacontent = _GetAuthenticMetacontentPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<ffi.Void> GetPixelCachePixels(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<MagickSizeType> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetPixelCachePixels(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetPixelCachePixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<MagickSizeType>,
              ffi.Pointer<ExceptionInfo>)>>('GetPixelCachePixels');
  late final _GetPixelCachePixels = _GetPixelCachePixelsPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<Image>,
          ffi.Pointer<MagickSizeType>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ChannelFxImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ChannelFxImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ChannelFxImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('ChannelFxImage');
  late final _ChannelFxImage = _ChannelFxImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> CombineImages(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _CombineImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _CombineImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('CombineImages');
  late final _CombineImages = _CombineImagesPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SeparateImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SeparateImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SeparateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('SeparateImage');
  late final _SeparateImage = _SeparateImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SeparateImages(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _SeparateImages(
      arg0,
      arg1,
    );
  }

  late final _SeparateImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SeparateImages');
  late final _SeparateImages = _SeparateImagesPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int GetImageAlphaChannel(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetImageAlphaChannel(
      arg0,
    );
  }

  late final _GetImageAlphaChannelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'GetImageAlphaChannel');
  late final _GetImageAlphaChannel =
      _GetImageAlphaChannelPtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int SetImageAlphaChannel(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetImageAlphaChannel(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageAlphaChannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('SetImageAlphaChannel');
  late final _SetImageAlphaChannel = _SetImageAlphaChannelPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int DecipherImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _DecipherImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DecipherImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('DecipherImage');
  late final _DecipherImage = _DecipherImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int EncipherImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _EncipherImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _EncipherImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('EncipherImage');
  late final _EncipherImage = _EncipherImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int PasskeyDecipherImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<StringInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _PasskeyDecipherImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PasskeyDecipherImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<StringInfo>,
              ffi.Pointer<ExceptionInfo>)>>('PasskeyDecipherImage');
  late final _PasskeyDecipherImage = _PasskeyDecipherImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<StringInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  int PasskeyEncipherImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<StringInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _PasskeyEncipherImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PasskeyEncipherImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<StringInfo>,
              ffi.Pointer<ExceptionInfo>)>>('PasskeyEncipherImage');
  late final _PasskeyEncipherImage = _PasskeyEncipherImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<StringInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetClientPath() {
    return _GetClientPath();
  }

  late final _GetClientPathPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetClientPath');
  late final _GetClientPath =
      _GetClientPathPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetClientName() {
    return _GetClientName();
  }

  late final _GetClientNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetClientName');
  late final _GetClientName =
      _GetClientNamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> SetClientName(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _SetClientName(
      arg0,
    );
  }

  late final _SetClientNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('SetClientName');
  late final _SetClientName = _SetClientNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> SetClientPath(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _SetClientPath(
      arg0,
    );
  }

  late final _SetClientPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('SetClientPath');
  late final _SetClientPath = _SetClientPathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetCoderList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetCoderList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetCoderListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetCoderList');
  late final _GetCoderList = _GetCoderListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<CoderInfo> GetCoderInfo(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetCoderInfo(
      arg0,
      arg1,
    );
  }

  late final _GetCoderInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<CoderInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetCoderInfo');
  late final _GetCoderInfo = _GetCoderInfoPtr.asFunction<
      ffi.Pointer<CoderInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<CoderInfo>> GetCoderInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetCoderInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetCoderInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<CoderInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetCoderInfoList');
  late final _GetCoderInfoList = _GetCoderInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<CoderInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  int ListCoderInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListCoderInfo(
      arg0,
      arg1,
    );
  }

  late final _ListCoderInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>>('ListCoderInfo');
  late final _ListCoderInfo = _ListCoderInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  int AcquireImageColormap(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _AcquireImageColormap(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AcquireImageColormapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('AcquireImageColormap');
  late final _AcquireImageColormap = _AcquireImageColormapPtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int CycleColormapImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _CycleColormapImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _CycleColormapImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ssize_t,
              ffi.Pointer<ExceptionInfo>)>>('CycleColormapImage');
  late final _CycleColormapImage = _CycleColormapImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int SortColormapByIntensity(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _SortColormapByIntensity(
      arg0,
      arg1,
    );
  }

  late final _SortColormapByIntensityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SortColormapByIntensity');
  late final _SortColormapByIntensity = _SortColormapByIntensityPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Double> GetImageDistortions(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _GetImageDistortions(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetImageDistortionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('GetImageDistortions');
  late final _GetImageDistortions = _GetImageDistortionsPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
          int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> CompareImages(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    int arg2,
    ffi.Pointer<ffi.Double> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _CompareImages(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _CompareImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('CompareImages');
  late final _CompareImages = _CompareImagesPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<Image>, int,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SimilarityImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    int arg2,
    double arg3,
    ffi.Pointer<RectangleInfo> arg4,
    ffi.Pointer<ffi.Double> arg5,
    ffi.Pointer<ExceptionInfo> arg6,
  ) {
    return _SimilarityImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _SimilarityImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('SimilarityImage');
  late final _SimilarityImage = _SimilarityImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>,
          ffi.Pointer<Image>,
          int,
          double,
          ffi.Pointer<RectangleInfo>,
          ffi.Pointer<ffi.Double>,
          ffi.Pointer<ExceptionInfo>)>();

  int GetImageDistortion(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    int arg2,
    ffi.Pointer<ffi.Double> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _GetImageDistortion(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _GetImageDistortionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageDistortion');
  late final _GetImageDistortion = _GetImageDistortionPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>, int,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ExceptionInfo>)>();

  int IsImagesEqual(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _IsImagesEqual(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _IsImagesEqualPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('IsImagesEqual');
  late final _IsImagesEqual = _IsImagesEqualPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  int SetImageColorMetric(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SetImageColorMetric(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageColorMetricPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SetImageColorMetric');
  late final _SetImageColorMetric = _SetImageColorMetricPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetConfigureList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetConfigureList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetConfigureListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetConfigureList');
  late final _GetConfigureList = _GetConfigureListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetConfigureOption(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _GetConfigureOption(
      arg0,
    );
  }

  late final _GetConfigureOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetConfigureOption');
  late final _GetConfigureOption = _GetConfigureOptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetConfigureValue(
    ffi.Pointer<ConfigureInfo> arg0,
  ) {
    return _GetConfigureValue(
      arg0,
    );
  }

  late final _GetConfigureValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ConfigureInfo>)>>('GetConfigureValue');
  late final _GetConfigureValue = _GetConfigureValuePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ConfigureInfo>)>();

  ffi.Pointer<ConfigureInfo> GetConfigureInfo(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetConfigureInfo(
      arg0,
      arg1,
    );
  }

  late final _GetConfigureInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ConfigureInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetConfigureInfo');
  late final _GetConfigureInfo = _GetConfigureInfoPtr.asFunction<
      ffi.Pointer<ConfigureInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<ConfigureInfo>> GetConfigureInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetConfigureInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetConfigureInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ConfigureInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetConfigureInfoList');
  late final _GetConfigureInfoList = _GetConfigureInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ConfigureInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<LinkedListInfo> DestroyConfigureOptions(
    ffi.Pointer<LinkedListInfo> arg0,
  ) {
    return _DestroyConfigureOptions(
      arg0,
    );
  }

  late final _DestroyConfigureOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LinkedListInfo> Function(
              ffi.Pointer<LinkedListInfo>)>>('DestroyConfigureOptions');
  late final _DestroyConfigureOptions = _DestroyConfigureOptionsPtr.asFunction<
      ffi.Pointer<LinkedListInfo> Function(ffi.Pointer<LinkedListInfo>)>();

  ffi.Pointer<LinkedListInfo> GetConfigurePaths(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetConfigurePaths(
      arg0,
      arg1,
    );
  }

  late final _GetConfigurePathsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LinkedListInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetConfigurePaths');
  late final _GetConfigurePaths = _GetConfigurePathsPtr.asFunction<
      ffi.Pointer<LinkedListInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<LinkedListInfo> GetConfigureOptions(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetConfigureOptions(
      arg0,
      arg1,
    );
  }

  late final _GetConfigureOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<LinkedListInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetConfigureOptions');
  late final _GetConfigureOptions = _GetConfigureOptionsPtr.asFunction<
      ffi.Pointer<LinkedListInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  int ListConfigureInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListConfigureInfo(
      arg0,
      arg1,
    );
  }

  late final _ListConfigureInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<ExceptionInfo>)>>('ListConfigureInfo');
  late final _ListConfigureInfo = _ListConfigureInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ConstituteImage(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<ffi.Void> arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _ConstituteImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _ConstituteImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ExceptionInfo>)>>('ConstituteImage');
  late final _ConstituteImage = _ConstituteImagePtr.asFunction<
      ffi.Pointer<Image> Function(int, int, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Void>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> PingImage(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _PingImage(
      arg0,
      arg1,
    );
  }

  late final _PingImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<ExceptionInfo>)>>('PingImage');
  late final _PingImage = _PingImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<ImageInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> PingImages(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _PingImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PingImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('PingImages');
  late final _PingImages = _PingImagesPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ReadImage(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ReadImage(
      arg0,
      arg1,
    );
  }

  late final _ReadImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ReadImage');
  late final _ReadImage = _ReadImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<ImageInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ReadImages(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ReadImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ReadImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('ReadImages');
  late final _ReadImages = _ReadImagesPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ReadInlineImage(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ReadInlineImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ReadInlineImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('ReadInlineImage');
  late final _ReadInlineImage = _ReadInlineImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int WriteImage(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _WriteImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _WriteImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('WriteImage');
  late final _WriteImage = _WriteImagePtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  int WriteImages(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _WriteImages(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _WriteImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('WriteImages');
  late final _WriteImages = _WriteImagesPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> BorderImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<RectangleInfo> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _BorderImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BorderImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<RectangleInfo>,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('BorderImage');
  late final _BorderImage = _BorderImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>,
          ffi.Pointer<RectangleInfo>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> FrameImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<FrameInfo> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _FrameImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _FrameImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<FrameInfo>,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('FrameImage');
  late final _FrameImage = _FrameImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<FrameInfo>,
          int, ffi.Pointer<ExceptionInfo>)>();

  int RaiseImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<RectangleInfo> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _RaiseImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _RaiseImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<RectangleInfo>,
              ffi.Int32, ffi.Pointer<ExceptionInfo>)>>('RaiseImage');
  late final _RaiseImage = _RaiseImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<RectangleInfo>, int,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetDelegateCommand(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _GetDelegateCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _GetDelegateCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetDelegateCommand');
  late final _GetDelegateCommand = _GetDelegateCommandPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ImageInfo>,
          ffi.Pointer<Image>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetDelegateList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetDelegateList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetDelegateListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetDelegateList');
  late final _GetDelegateList = _GetDelegateListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetDelegateCommands(
    ffi.Pointer<DelegateInfo> arg0,
  ) {
    return _GetDelegateCommands(
      arg0,
    );
  }

  late final _GetDelegateCommandsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DelegateInfo>)>>('GetDelegateCommands');
  late final _GetDelegateCommands = _GetDelegateCommandsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DelegateInfo>)>();

  ffi.Pointer<DelegateInfo> GetDelegateInfo(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> exception,
  ) {
    return _GetDelegateInfo(
      arg0,
      arg1,
      exception,
    );
  }

  late final _GetDelegateInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DelegateInfo> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetDelegateInfo');
  late final _GetDelegateInfo = _GetDelegateInfoPtr.asFunction<
      ffi.Pointer<DelegateInfo> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<DelegateInfo>> GetDelegateInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetDelegateInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetDelegateInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<DelegateInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetDelegateInfoList');
  late final _GetDelegateInfoList = _GetDelegateInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<DelegateInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  int ExternalDelegateCommand(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _ExternalDelegateCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ExternalDelegateCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('ExternalDelegateCommand');
  late final _ExternalDelegateCommand = _ExternalDelegateCommandPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int GetDelegateMode(
    ffi.Pointer<DelegateInfo> arg0,
  ) {
    return _GetDelegateMode(
      arg0,
    );
  }

  late final _GetDelegateModePtr =
      _lookup<ffi.NativeFunction<ssize_t Function(ffi.Pointer<DelegateInfo>)>>(
          'GetDelegateMode');
  late final _GetDelegateMode =
      _GetDelegateModePtr.asFunction<int Function(ffi.Pointer<DelegateInfo>)>();

  int GetDelegateThreadSupport(
    ffi.Pointer<DelegateInfo> arg0,
  ) {
    return _GetDelegateThreadSupport(
      arg0,
    );
  }

  late final _GetDelegateThreadSupportPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DelegateInfo>)>>(
      'GetDelegateThreadSupport');
  late final _GetDelegateThreadSupport = _GetDelegateThreadSupportPtr
      .asFunction<int Function(ffi.Pointer<DelegateInfo>)>();

  int InvokeDelegate(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _InvokeDelegate(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _InvokeDelegatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('InvokeDelegate');
  late final _InvokeDelegate = _InvokeDelegatePtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          ffi.Pointer<Image>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int ListDelegateInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListDelegateInfo(
      arg0,
      arg1,
    );
  }

  late final _ListDelegateInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<ExceptionInfo>)>>('ListDelegateInfo');
  late final _ListDelegateInfo = _ListDelegateInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  int DisplayImages(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _DisplayImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DisplayImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('DisplayImages');
  late final _DisplayImages = _DisplayImagesPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  int RemoteDisplayCommand(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _RemoteDisplayCommand(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _RemoteDisplayCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('RemoteDisplayCommand');
  late final _RemoteDisplayCommand = _RemoteDisplayCommandPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> AffineTransformImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<AffineMatrix> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _AffineTransformImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AffineTransformImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<AffineMatrix>,
              ffi.Pointer<ExceptionInfo>)>>('AffineTransformImage');
  late final _AffineTransformImage = _AffineTransformImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<AffineMatrix>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> DistortImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Double> arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> exception,
  ) {
    return _DistortImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      exception,
    );
  }

  late final _DistortImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Size,
              ffi.Pointer<ffi.Double>,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('DistortImage');
  late final _DistortImage = _DistortImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, int, int,
          ffi.Pointer<ffi.Double>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> DistortResizeImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _DistortResizeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _DistortResizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Size, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('DistortResizeImage');
  late final _DistortResizeImage = _DistortResizeImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> RotateImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _RotateImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _RotateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('RotateImage');
  late final _RotateImage = _RotateImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SparseColorImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Double> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _SparseColorImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _SparseColorImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Size,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('SparseColorImage');
  late final _SparseColorImage = _SparseColorImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, int, int,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ExceptionInfo>)>();

  void DistributePixelCacheServer(
    int arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _DistributePixelCacheServer(
      arg0,
      arg1,
    );
  }

  late final _DistributePixelCacheServerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Int,
              ffi.Pointer<ExceptionInfo>)>>('DistributePixelCacheServer');
  late final _DistributePixelCacheServer = _DistributePixelCacheServerPtr
      .asFunction<void Function(int, ffi.Pointer<ExceptionInfo>)>();

  int AutoGammaImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _AutoGammaImage(
      arg0,
      arg1,
    );
  }

  late final _AutoGammaImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('AutoGammaImage');
  late final _AutoGammaImage = _AutoGammaImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int AutoLevelImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _AutoLevelImage(
      arg0,
      arg1,
    );
  }

  late final _AutoLevelImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('AutoLevelImage');
  late final _AutoLevelImage = _AutoLevelImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int BrightnessContrastImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _BrightnessContrastImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _BrightnessContrastImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Double, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('BrightnessContrastImage');
  late final _BrightnessContrastImage = _BrightnessContrastImagePtr.asFunction<
      int Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  int CLAHEImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    double arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _CLAHEImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _CLAHEImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Size, ffi.Size, ffi.Size,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('CLAHEImage');
  late final _CLAHEImage = _CLAHEImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, int, int, double,
          ffi.Pointer<ExceptionInfo>)>();

  int ClutImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ClutImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ClutImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('ClutImage');
  late final _ClutImage = _ClutImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>, int,
          ffi.Pointer<ExceptionInfo>)>();

  int ColorDecisionListImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ColorDecisionListImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ColorDecisionListImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('ColorDecisionListImage');
  late final _ColorDecisionListImage = _ColorDecisionListImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int ContrastImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ContrastImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ContrastImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('ContrastImage');
  late final _ContrastImage = _ContrastImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int ContrastStretchImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ContrastStretchImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ContrastStretchImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Double, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('ContrastStretchImage');
  late final _ContrastStretchImage = _ContrastStretchImagePtr.asFunction<
      int Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  int EqualizeImage(
    ffi.Pointer<Image> image,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _EqualizeImage(
      image,
      arg1,
    );
  }

  late final _EqualizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('EqualizeImage');
  late final _EqualizeImage = _EqualizeImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int GammaImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GammaImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GammaImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('GammaImage');
  late final _GammaImage = _GammaImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, double, ffi.Pointer<ExceptionInfo>)>();

  int GrayscaleImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GrayscaleImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GrayscaleImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('GrayscaleImage');
  late final _GrayscaleImage = _GrayscaleImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int HaldClutImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _HaldClutImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _HaldClutImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('HaldClutImage');
  late final _HaldClutImage = _HaldClutImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  int LevelImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    double arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _LevelImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _LevelImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('LevelImage');
  late final _LevelImage = _LevelImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, double, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  int LevelizeImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    double arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _LevelizeImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _LevelizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('LevelizeImage');
  late final _LevelizeImage = _LevelizeImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, double, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  int LevelImageColors(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<PixelInfo> arg1,
    ffi.Pointer<PixelInfo> arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _LevelImageColors(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _LevelImageColorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<PixelInfo>,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('LevelImageColors');
  late final _LevelImageColors = _LevelImageColorsPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<PixelInfo>,
          ffi.Pointer<PixelInfo>, int, ffi.Pointer<ExceptionInfo>)>();

  int LinearStretchImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _LinearStretchImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _LinearStretchImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Double, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('LinearStretchImage');
  late final _LinearStretchImage = _LinearStretchImagePtr.asFunction<
      int Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  int ModulateImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ModulateImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ModulateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('ModulateImage');
  late final _ModulateImage = _ModulateImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int NegateImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _NegateImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _NegateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('NegateImage');
  late final _NegateImage = _NegateImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int NormalizeImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _NormalizeImage(
      arg0,
      arg1,
    );
  }

  late final _NormalizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('NormalizeImage');
  late final _NormalizeImage = _NormalizeImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int SigmoidalContrastImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    double arg2,
    double arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _SigmoidalContrastImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _SigmoidalContrastImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('SigmoidalContrastImage');
  late final _SigmoidalContrastImage = _SigmoidalContrastImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  int WhiteBalanceImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _WhiteBalanceImage(
      arg0,
      arg1,
    );
  }

  late final _WhiteBalanceImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('WhiteBalanceImage');
  late final _WhiteBalanceImage = _WhiteBalanceImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> EnhanceImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _EnhanceImage(
      arg0,
      arg1,
    );
  }

  late final _EnhanceImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('EnhanceImage');
  late final _EnhanceImage = _EnhanceImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ChannelFeatures> GetImageFeatures(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetImageFeatures(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetImageFeaturesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ChannelFeatures> Function(ffi.Pointer<Image>, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('GetImageFeatures');
  late final _GetImageFeatures = _GetImageFeaturesPtr.asFunction<
      ffi.Pointer<ChannelFeatures> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> CannyEdgeImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _CannyEdgeImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _CannyEdgeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('CannyEdgeImage');
  late final _CannyEdgeImage = _CannyEdgeImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, double, double, double,
          double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> HoughLineImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _HoughLineImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _HoughLineImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Size, ffi.Size,
              ffi.Size, ffi.Pointer<ExceptionInfo>)>>('HoughLineImage');
  late final _HoughLineImage = _HoughLineImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> MeanShiftImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    double arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _MeanShiftImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MeanShiftImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Size, ffi.Size,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('MeanShiftImage');
  late final _MeanShiftImage = _MeanShiftImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ComplexImages(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ComplexImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ComplexImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('ComplexImages');
  late final _ComplexImages = _ComplexImagesPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ForwardFourierTransformImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ForwardFourierTransformImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ForwardFourierTransformImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('ForwardFourierTransformImage');
  late final _ForwardFourierTransformImage =
      _ForwardFourierTransformImagePtr.asFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> InverseFourierTransformImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _InverseFourierTransformImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _InverseFourierTransformImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('InverseFourierTransformImage');
  late final _InverseFourierTransformImage =
      _InverseFourierTransformImagePtr.asFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
              int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> FxImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _FxImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _FxImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('FxImage');
  late final _FxImage = _FxImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  /// Method declarations.
  double GetRandomValue(
    ffi.Pointer<RandomInfo> arg0,
  ) {
    return _GetRandomValue(
      arg0,
    );
  }

  late final _GetRandomValuePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<RandomInfo>)>>(
          'GetRandomValue');
  late final _GetRandomValue =
      _GetRandomValuePtr.asFunction<double Function(ffi.Pointer<RandomInfo>)>();

  double GetPseudoRandomValue(
    ffi.Pointer<RandomInfo> arg0,
  ) {
    return _GetPseudoRandomValue(
      arg0,
    );
  }

  late final _GetPseudoRandomValuePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<RandomInfo>)>>(
          'GetPseudoRandomValue');
  late final _GetPseudoRandomValue = _GetPseudoRandomValuePtr.asFunction<
      double Function(ffi.Pointer<RandomInfo>)>();

  ffi.Pointer<RandomInfo> AcquireRandomInfo() {
    return _AcquireRandomInfo();
  }

  late final _AcquireRandomInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<RandomInfo> Function()>>(
          'AcquireRandomInfo');
  late final _AcquireRandomInfo =
      _AcquireRandomInfoPtr.asFunction<ffi.Pointer<RandomInfo> Function()>();

  ffi.Pointer<RandomInfo> DestroyRandomInfo(
    ffi.Pointer<RandomInfo> arg0,
  ) {
    return _DestroyRandomInfo(
      arg0,
    );
  }

  late final _DestroyRandomInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<RandomInfo> Function(
              ffi.Pointer<RandomInfo>)>>('DestroyRandomInfo');
  late final _DestroyRandomInfo = _DestroyRandomInfoPtr.asFunction<
      ffi.Pointer<RandomInfo> Function(ffi.Pointer<RandomInfo>)>();

  ffi.Pointer<StringInfo> GetRandomKey(
    ffi.Pointer<RandomInfo> arg0,
    int arg1,
  ) {
    return _GetRandomKey(
      arg0,
      arg1,
    );
  }

  late final _GetRandomKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<StringInfo> Function(
              ffi.Pointer<RandomInfo>, ffi.Size)>>('GetRandomKey');
  late final _GetRandomKey = _GetRandomKeyPtr.asFunction<
      ffi.Pointer<StringInfo> Function(ffi.Pointer<RandomInfo>, int)>();

  int GetRandomSecretKey(
    ffi.Pointer<RandomInfo> arg0,
  ) {
    return _GetRandomSecretKey(
      arg0,
    );
  }

  late final _GetRandomSecretKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<RandomInfo>)>>('GetRandomSecretKey');
  late final _GetRandomSecretKey = _GetRandomSecretKeyPtr.asFunction<
      int Function(ffi.Pointer<RandomInfo>)>();

  void SetRandomKey(
    ffi.Pointer<RandomInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.UnsignedChar> arg2,
  ) {
    return _SetRandomKey(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetRandomKeyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<RandomInfo>, ffi.Size,
              ffi.Pointer<ffi.UnsignedChar>)>>('SetRandomKey');
  late final _SetRandomKey = _SetRandomKeyPtr.asFunction<
      void Function(
          ffi.Pointer<RandomInfo>, int, ffi.Pointer<ffi.UnsignedChar>)>();

  void SetRandomSecretKey(
    int arg0,
  ) {
    return _SetRandomSecretKey(
      arg0,
    );
  }

  late final _SetRandomSecretKeyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          'SetRandomSecretKey');
  late final _SetRandomSecretKey =
      _SetRandomSecretKeyPtr.asFunction<void Function(int)>();

  void SetRandomTrueRandom(
    int arg0,
  ) {
    return _SetRandomTrueRandom(
      arg0,
    );
  }

  late final _SetRandomTrueRandomPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32)>>(
          'SetRandomTrueRandom');
  late final _SetRandomTrueRandom =
      _SetRandomTrueRandomPtr.asFunction<void Function(int)>();

  double ExpandAffine(
    ffi.Pointer<AffineMatrix> arg0,
  ) {
    return _ExpandAffine(
      arg0,
    );
  }

  late final _ExpandAffinePtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<AffineMatrix>)>>(
      'ExpandAffine');
  late final _ExpandAffine =
      _ExpandAffinePtr.asFunction<double Function(ffi.Pointer<AffineMatrix>)>();

  void ConvertHSLToRGB(
    double arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ffi.Double> arg3,
    ffi.Pointer<ffi.Double> arg4,
    ffi.Pointer<ffi.Double> arg5,
  ) {
    return _ConvertHSLToRGB(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _ConvertHSLToRGBPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('ConvertHSLToRGB');
  late final _ConvertHSLToRGB = _ConvertHSLToRGBPtr.asFunction<
      void Function(double, double, double, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void ConvertRGBToHSL(
    double arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ffi.Double> arg3,
    ffi.Pointer<ffi.Double> arg4,
    ffi.Pointer<ffi.Double> arg5,
  ) {
    return _ConvertRGBToHSL(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _ConvertRGBToHSLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('ConvertRGBToHSL');
  late final _ConvertRGBToHSL = _ConvertRGBToHSLPtr.asFunction<
      void Function(double, double, double, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<PixelInfo> GetImageHistogram(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetImageHistogram(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetImageHistogramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PixelInfo> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageHistogram');
  late final _GetImageHistogram = _GetImageHistogramPtr.asFunction<
      ffi.Pointer<PixelInfo> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> UniqueImageColors(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _UniqueImageColors(
      arg0,
      arg1,
    );
  }

  late final _UniqueImageColorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('UniqueImageColors');
  late final _UniqueImageColors = _UniqueImageColorsPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int IdentifyPaletteImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _IdentifyPaletteImage(
      arg0,
      arg1,
    );
  }

  late final _IdentifyPaletteImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('IdentifyPaletteImage');
  late final _IdentifyPaletteImage = _IdentifyPaletteImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int IsHistogramImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _IsHistogramImage(
      arg0,
      arg1,
    );
  }

  late final _IsHistogramImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('IsHistogramImage');
  late final _IsHistogramImage = _IsHistogramImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int IsPaletteImage(
    ffi.Pointer<Image> arg0,
  ) {
    return _IsPaletteImage(
      arg0,
    );
  }

  late final _IsPaletteImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<Image>)>>(
          'IsPaletteImage');
  late final _IsPaletteImage =
      _IsPaletteImagePtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int MinMaxStretchImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    double arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _MinMaxStretchImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MinMaxStretchImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('MinMaxStretchImage');
  late final _MinMaxStretchImage = _MinMaxStretchImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, double, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  int GetNumberColors(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<FILE> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetNumberColors(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetNumberColorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<Image>, ffi.Pointer<FILE>,
              ffi.Pointer<ExceptionInfo>)>>('GetNumberColors');
  late final _GetNumberColors = _GetNumberColorsPtr.asFunction<
      int Function(
          ffi.Pointer<Image>, ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  int IdentifyImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<FILE> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _IdentifyImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _IdentifyImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<FILE>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('IdentifyImage');
  late final _IdentifyImage = _IdentifyImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<FILE>, int,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetImageViewException(
    ffi.Pointer<ImageView> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    return _GetImageViewException(
      arg0,
      arg1,
    );
  }

  late final _GetImageViewExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImageView>,
              ffi.Pointer<ffi.Int32>)>>('GetImageViewException');
  late final _GetImageViewException = _GetImageViewExceptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ImageView>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<Quantum> GetImageViewVirtualPixels(
    ffi.Pointer<ImageView> arg0,
  ) {
    return _GetImageViewVirtualPixels(
      arg0,
    );
  }

  late final _GetImageViewVirtualPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<ImageView>)>>('GetImageViewVirtualPixels');
  late final _GetImageViewVirtualPixels = _GetImageViewVirtualPixelsPtr
      .asFunction<ffi.Pointer<Quantum> Function(ffi.Pointer<ImageView>)>();

  ffi.Pointer<ffi.Void> GetImageViewVirtualMetacontent(
    ffi.Pointer<ImageView> arg0,
  ) {
    return _GetImageViewVirtualMetacontent(
      arg0,
    );
  }

  late final _GetImageViewVirtualMetacontentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ImageView>)>>('GetImageViewVirtualMetacontent');
  late final _GetImageViewVirtualMetacontent =
      _GetImageViewVirtualMetacontentPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ImageView>)>();

  ffi.Pointer<Image> GetImageViewImage(
    ffi.Pointer<ImageView> arg0,
  ) {
    return _GetImageViewImage(
      arg0,
    );
  }

  late final _GetImageViewImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ImageView>)>>('GetImageViewImage');
  late final _GetImageViewImage = _GetImageViewImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<ImageView>)>();

  ffi.Pointer<ImageView> CloneImageView(
    ffi.Pointer<ImageView> arg0,
  ) {
    return _CloneImageView(
      arg0,
    );
  }

  late final _CloneImageViewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImageView> Function(
              ffi.Pointer<ImageView>)>>('CloneImageView');
  late final _CloneImageView = _CloneImageViewPtr.asFunction<
      ffi.Pointer<ImageView> Function(ffi.Pointer<ImageView>)>();

  ffi.Pointer<ImageView> DestroyImageView(
    ffi.Pointer<ImageView> arg0,
  ) {
    return _DestroyImageView(
      arg0,
    );
  }

  late final _DestroyImageViewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImageView> Function(
              ffi.Pointer<ImageView>)>>('DestroyImageView');
  late final _DestroyImageView = _DestroyImageViewPtr.asFunction<
      ffi.Pointer<ImageView> Function(ffi.Pointer<ImageView>)>();

  ffi.Pointer<ImageView> NewImageView(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _NewImageView(
      arg0,
      arg1,
    );
  }

  late final _NewImageViewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImageView> Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('NewImageView');
  late final _NewImageView = _NewImageViewPtr.asFunction<
      ffi.Pointer<ImageView> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ImageView> NewImageViewRegion(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _NewImageViewRegion(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _NewImageViewRegionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ImageView> Function(
              ffi.Pointer<Image>,
              ssize_t,
              ssize_t,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('NewImageViewRegion');
  late final _NewImageViewRegion = _NewImageViewRegionPtr.asFunction<
      ffi.Pointer<ImageView> Function(ffi.Pointer<Image>, int, int, int, int,
          ffi.Pointer<ExceptionInfo>)>();

  int DuplexTransferImageViewIterator(
    ffi.Pointer<ImageView> arg0,
    ffi.Pointer<ImageView> arg1,
    ffi.Pointer<ImageView> arg2,
    DuplexTransferImageViewMethod arg3,
    ffi.Pointer<ffi.Void> arg4,
  ) {
    return _DuplexTransferImageViewIterator(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DuplexTransferImageViewIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageView>,
              ffi.Pointer<ImageView>,
              ffi.Pointer<ImageView>,
              DuplexTransferImageViewMethod,
              ffi.Pointer<ffi.Void>)>>('DuplexTransferImageViewIterator');
  late final _DuplexTransferImageViewIterator =
      _DuplexTransferImageViewIteratorPtr.asFunction<
          int Function(
              ffi.Pointer<ImageView>,
              ffi.Pointer<ImageView>,
              ffi.Pointer<ImageView>,
              DuplexTransferImageViewMethod,
              ffi.Pointer<ffi.Void>)>();

  int GetImageViewIterator(
    ffi.Pointer<ImageView> arg0,
    GetImageViewMethod arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _GetImageViewIterator(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetImageViewIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageView>, GetImageViewMethod,
              ffi.Pointer<ffi.Void>)>>('GetImageViewIterator');
  late final _GetImageViewIterator = _GetImageViewIteratorPtr.asFunction<
      int Function(
          ffi.Pointer<ImageView>, GetImageViewMethod, ffi.Pointer<ffi.Void>)>();

  int IsImageView(
    ffi.Pointer<ImageView> arg0,
  ) {
    return _IsImageView(
      arg0,
    );
  }

  late final _IsImageViewPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ImageView>)>>(
          'IsImageView');
  late final _IsImageView =
      _IsImageViewPtr.asFunction<int Function(ffi.Pointer<ImageView>)>();

  int SetImageViewIterator(
    ffi.Pointer<ImageView> arg0,
    SetImageViewMethod arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _SetImageViewIterator(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageViewIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageView>, SetImageViewMethod,
              ffi.Pointer<ffi.Void>)>>('SetImageViewIterator');
  late final _SetImageViewIterator = _SetImageViewIteratorPtr.asFunction<
      int Function(
          ffi.Pointer<ImageView>, SetImageViewMethod, ffi.Pointer<ffi.Void>)>();

  int TransferImageViewIterator(
    ffi.Pointer<ImageView> arg0,
    ffi.Pointer<ImageView> arg1,
    TransferImageViewMethod arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _TransferImageViewIterator(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _TransferImageViewIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageView>,
              ffi.Pointer<ImageView>,
              TransferImageViewMethod,
              ffi.Pointer<ffi.Void>)>>('TransferImageViewIterator');
  late final _TransferImageViewIterator =
      _TransferImageViewIteratorPtr.asFunction<
          int Function(ffi.Pointer<ImageView>, ffi.Pointer<ImageView>,
              TransferImageViewMethod, ffi.Pointer<ffi.Void>)>();

  int UpdateImageViewIterator(
    ffi.Pointer<ImageView> arg0,
    UpdateImageViewMethod arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _UpdateImageViewIterator(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _UpdateImageViewIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageView>, UpdateImageViewMethod,
              ffi.Pointer<ffi.Void>)>>('UpdateImageViewIterator');
  late final _UpdateImageViewIterator = _UpdateImageViewIteratorPtr.asFunction<
      int Function(ffi.Pointer<ImageView>, UpdateImageViewMethod,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<Quantum> GetImageViewAuthenticPixels(
    ffi.Pointer<ImageView> arg0,
  ) {
    return _GetImageViewAuthenticPixels(
      arg0,
    );
  }

  late final _GetImageViewAuthenticPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Quantum> Function(
              ffi.Pointer<ImageView>)>>('GetImageViewAuthenticPixels');
  late final _GetImageViewAuthenticPixels = _GetImageViewAuthenticPixelsPtr
      .asFunction<ffi.Pointer<Quantum> Function(ffi.Pointer<ImageView>)>();

  RectangleInfo GetImageViewExtent(
    ffi.Pointer<ImageView> arg0,
  ) {
    return _GetImageViewExtent(
      arg0,
    );
  }

  late final _GetImageViewExtentPtr = _lookup<
          ffi.NativeFunction<RectangleInfo Function(ffi.Pointer<ImageView>)>>(
      'GetImageViewExtent');
  late final _GetImageViewExtent = _GetImageViewExtentPtr.asFunction<
      RectangleInfo Function(ffi.Pointer<ImageView>)>();

  void SetImageViewDescription(
    ffi.Pointer<ImageView> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _SetImageViewDescription(
      arg0,
      arg1,
    );
  }

  late final _SetImageViewDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImageView>,
              ffi.Pointer<ffi.Char>)>>('SetImageViewDescription');
  late final _SetImageViewDescription = _SetImageViewDescriptionPtr.asFunction<
      void Function(ffi.Pointer<ImageView>, ffi.Pointer<ffi.Char>)>();

  void SetImageViewThreads(
    ffi.Pointer<ImageView> arg0,
    int arg1,
  ) {
    return _SetImageViewThreads(
      arg0,
      arg1,
    );
  }

  late final _SetImageViewThreadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ImageView>, ffi.Size)>>('SetImageViewThreads');
  late final _SetImageViewThreads = _SetImageViewThreadsPtr.asFunction<
      void Function(ffi.Pointer<ImageView>, int)>();

  ffi.Pointer<ffi.Void> GetImageViewAuthenticMetacontent(
    ffi.Pointer<ImageView> arg0,
  ) {
    return _GetImageViewAuthenticMetacontent(
      arg0,
    );
  }

  late final _GetImageViewAuthenticMetacontentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ImageView>)>>('GetImageViewAuthenticMetacontent');
  late final _GetImageViewAuthenticMetacontent =
      _GetImageViewAuthenticMetacontentPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ImageView>)>();

  ffi.Pointer<Image> CloneImageList(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _CloneImageList(
      arg0,
      arg1,
    );
  }

  late final _CloneImageListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('CloneImageList');
  late final _CloneImageList = _CloneImageListPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> CloneImages(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _CloneImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _CloneImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('CloneImages');
  late final _CloneImages = _CloneImagesPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> DestroyImageList(
    ffi.Pointer<Image> arg0,
  ) {
    return _DestroyImageList(
      arg0,
    );
  }

  late final _DestroyImageListPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Image> Function(ffi.Pointer<Image>)>>(
      'DestroyImageList');
  late final _DestroyImageList = _DestroyImageListPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Image> DuplicateImages(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _DuplicateImages(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _DuplicateImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('DuplicateImages');
  late final _DuplicateImages = _DuplicateImagesPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, int,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> GetFirstImageInList(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetFirstImageInList(
      arg0,
    );
  }

  late final _GetFirstImageInListPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Image> Function(ffi.Pointer<Image>)>>(
      'GetFirstImageInList');
  late final _GetFirstImageInList = _GetFirstImageInListPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Image> GetImageFromList(
    ffi.Pointer<Image> arg0,
    int arg1,
  ) {
    return _GetImageFromList(
      arg0,
      arg1,
    );
  }

  late final _GetImageFromListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>, ssize_t)>>('GetImageFromList');
  late final _GetImageFromList = _GetImageFromListPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, int)>();

  ffi.Pointer<Image> GetLastImageInList(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetLastImageInList(
      arg0,
    );
  }

  late final _GetLastImageInListPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Image> Function(ffi.Pointer<Image>)>>(
      'GetLastImageInList');
  late final _GetLastImageInList = _GetLastImageInListPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Image> GetNextImageInList(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetNextImageInList(
      arg0,
    );
  }

  late final _GetNextImageInListPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Image> Function(ffi.Pointer<Image>)>>(
      'GetNextImageInList');
  late final _GetNextImageInList = _GetNextImageInListPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Image> GetPreviousImageInList(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetPreviousImageInList(
      arg0,
    );
  }

  late final _GetPreviousImageInListPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Image> Function(ffi.Pointer<Image>)>>(
      'GetPreviousImageInList');
  late final _GetPreviousImageInList = _GetPreviousImageInListPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<ffi.Pointer<Image>> ImageListToArray(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ImageListToArray(
      arg0,
      arg1,
    );
  }

  late final _ImageListToArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<Image>> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('ImageListToArray');
  late final _ImageListToArray = _ImageListToArrayPtr.asFunction<
      ffi.Pointer<ffi.Pointer<Image>> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> NewImageList() {
    return _NewImageList();
  }

  late final _NewImageListPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<Image> Function()>>(
          'NewImageList');
  late final _NewImageList =
      _NewImageListPtr.asFunction<ffi.Pointer<Image> Function()>();

  ffi.Pointer<Image> RemoveImageFromList(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
  ) {
    return _RemoveImageFromList(
      arg0,
    );
  }

  late final _RemoveImageFromListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ffi.Pointer<Image>>)>>('RemoveImageFromList');
  late final _RemoveImageFromList = _RemoveImageFromListPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<ffi.Pointer<Image>>)>();

  ffi.Pointer<Image> RemoveLastImageFromList(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
  ) {
    return _RemoveLastImageFromList(
      arg0,
    );
  }

  late final _RemoveLastImageFromListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ffi.Pointer<Image>>)>>('RemoveLastImageFromList');
  late final _RemoveLastImageFromList = _RemoveLastImageFromListPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<ffi.Pointer<Image>>)>();

  ffi.Pointer<Image> RemoveFirstImageFromList(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
  ) {
    return _RemoveFirstImageFromList(
      arg0,
    );
  }

  late final _RemoveFirstImageFromListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ffi.Pointer<Image>>)>>('RemoveFirstImageFromList');
  late final _RemoveFirstImageFromList =
      _RemoveFirstImageFromListPtr.asFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<ffi.Pointer<Image>>)>();

  ffi.Pointer<Image> SpliceImageIntoList(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
    int arg1,
    ffi.Pointer<Image> arg2,
  ) {
    return _SpliceImageIntoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SpliceImageIntoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<ffi.Pointer<Image>>, ffi.Size,
              ffi.Pointer<Image>)>>('SpliceImageIntoList');
  late final _SpliceImageIntoList = _SpliceImageIntoListPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<ffi.Pointer<Image>>, int, ffi.Pointer<Image>)>();

  ffi.Pointer<Image> SplitImageList(
    ffi.Pointer<Image> arg0,
  ) {
    return _SplitImageList(
      arg0,
    );
  }

  late final _SplitImageListPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Image> Function(ffi.Pointer<Image>)>>(
      'SplitImageList');
  late final _SplitImageList = _SplitImageListPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Image> SyncNextImageInList(
    ffi.Pointer<Image> arg0,
  ) {
    return _SyncNextImageInList(
      arg0,
    );
  }

  late final _SyncNextImageInListPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Image> Function(ffi.Pointer<Image>)>>(
      'SyncNextImageInList');
  late final _SyncNextImageInList = _SyncNextImageInListPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>)>();

  int GetImageListLength(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetImageListLength(
      arg0,
    );
  }

  late final _GetImageListLengthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<Image>)>>(
          'GetImageListLength');
  late final _GetImageListLength =
      _GetImageListLengthPtr.asFunction<int Function(ffi.Pointer<Image>)>();

  int GetImageIndexInList(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetImageIndexInList(
      arg0,
    );
  }

  late final _GetImageIndexInListPtr =
      _lookup<ffi.NativeFunction<ssize_t Function(ffi.Pointer<Image>)>>(
          'GetImageIndexInList');
  late final _GetImageIndexInList =
      _GetImageIndexInListPtr.asFunction<int Function(ffi.Pointer<Image>)>();

  void AppendImageToList(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
    ffi.Pointer<Image> arg1,
  ) {
    return _AppendImageToList(
      arg0,
      arg1,
    );
  }

  late final _AppendImageToListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<Image>)>>('AppendImageToList');
  late final _AppendImageToList = _AppendImageToListPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<Image>>, ffi.Pointer<Image>)>();

  void DeleteImageFromList(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
  ) {
    return _DeleteImageFromList(
      arg0,
    );
  }

  late final _DeleteImageFromListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<Image>>)>>('DeleteImageFromList');
  late final _DeleteImageFromList = _DeleteImageFromListPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<Image>>)>();

  void DeleteImages(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _DeleteImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DeleteImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('DeleteImages');
  late final _DeleteImages = _DeleteImagesPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<Image>>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  void InsertImageInList(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
    ffi.Pointer<Image> arg1,
  ) {
    return _InsertImageInList(
      arg0,
      arg1,
    );
  }

  late final _InsertImageInListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<Image>)>>('InsertImageInList');
  late final _InsertImageInList = _InsertImageInListPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<Image>>, ffi.Pointer<Image>)>();

  void PrependImageToList(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
    ffi.Pointer<Image> arg1,
  ) {
    return _PrependImageToList(
      arg0,
      arg1,
    );
  }

  late final _PrependImageToListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<Image>)>>('PrependImageToList');
  late final _PrependImageToList = _PrependImageToListPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<Image>>, ffi.Pointer<Image>)>();

  void ReplaceImageInList(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
    ffi.Pointer<Image> arg1,
  ) {
    return _ReplaceImageInList(
      arg0,
      arg1,
    );
  }

  late final _ReplaceImageInListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<Image>)>>('ReplaceImageInList');
  late final _ReplaceImageInList = _ReplaceImageInListPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<Image>>, ffi.Pointer<Image>)>();

  void ReplaceImageInListReturnLast(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
    ffi.Pointer<Image> arg1,
  ) {
    return _ReplaceImageInListReturnLast(
      arg0,
      arg1,
    );
  }

  late final _ReplaceImageInListReturnLastPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<Image>)>>('ReplaceImageInListReturnLast');
  late final _ReplaceImageInListReturnLast =
      _ReplaceImageInListReturnLastPtr.asFunction<
          void Function(ffi.Pointer<ffi.Pointer<Image>>, ffi.Pointer<Image>)>();

  void ReverseImageList(
    ffi.Pointer<ffi.Pointer<Image>> arg0,
  ) {
    return _ReverseImageList(
      arg0,
    );
  }

  late final _ReverseImageListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<Image>>)>>('ReverseImageList');
  late final _ReverseImageList = _ReverseImageListPtr.asFunction<
      void Function(ffi.Pointer<ffi.Pointer<Image>>)>();

  void SyncImageList(
    ffi.Pointer<Image> arg0,
  ) {
    return _SyncImageList(
      arg0,
    );
  }

  late final _SyncImageListPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'SyncImageList');
  late final _SyncImageList =
      _SyncImageListPtr.asFunction<void Function(ffi.Pointer<Image>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetLogList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetLogList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetLogListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetLogList');
  late final _GetLogList = _GetLogListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetLogName() {
    return _GetLogName();
  }

  late final _GetLogNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetLogName');
  late final _GetLogName =
      _GetLogNamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> SetLogName(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _SetLogName(
      arg0,
    );
  }

  late final _SetLogNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('SetLogName');
  late final _SetLogName = _SetLogNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int GetLogEventMask() {
    return _GetLogEventMask();
  }

  late final _GetLogEventMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('GetLogEventMask');
  late final _GetLogEventMask =
      _GetLogEventMaskPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Pointer<LogInfo>> GetLogInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetLogInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetLogInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<LogInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetLogInfoList');
  late final _GetLogInfoList = _GetLogInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<LogInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  int SetLogEventMask(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _SetLogEventMask(
      arg0,
    );
  }

  late final _SetLogEventMaskPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'SetLogEventMask');
  late final _SetLogEventMask =
      _SetLogEventMaskPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int IsEventLogging() {
    return _IsEventLogging();
  }

  late final _IsEventLoggingPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('IsEventLogging');
  late final _IsEventLogging = _IsEventLoggingPtr.asFunction<int Function()>();

  int ListLogInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListLogInfo(
      arg0,
      arg1,
    );
  }

  late final _ListLogInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>>('ListLogInfo');
  late final _ListLogInfo = _ListLogInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  int LogMagickEvent(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
  ) {
    return _LogMagickEvent(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _LogMagickEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>)>>('LogMagickEvent');
  late final _LogMagickEvent = _LogMagickEventPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  int LogMagickEventList(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    va_list arg5,
  ) {
    return _LogMagickEventList(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _LogMagickEventListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              va_list)>>('LogMagickEventList');
  late final _LogMagickEventList = _LogMagickEventListPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>, va_list)>();

  void CloseMagickLog() {
    return _CloseMagickLog();
  }

  late final _CloseMagickLogPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('CloseMagickLog');
  late final _CloseMagickLog = _CloseMagickLogPtr.asFunction<void Function()>();

  void SetLogFormat(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _SetLogFormat(
      arg0,
    );
  }

  late final _SetLogFormatPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'SetLogFormat');
  late final _SetLogFormat =
      _SetLogFormatPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  void SetLogMethod(
    MagickLogMethod arg0,
  ) {
    return _SetLogMethod(
      arg0,
    );
  }

  late final _SetLogMethodPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MagickLogMethod)>>(
          'SetLogMethod');
  late final _SetLogMethod =
      _SetLogMethodPtr.asFunction<void Function(MagickLogMethod)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetMagicList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetMagicList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetMagicListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetMagicList');
  late final _GetMagicList = _GetMagicListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetMagicName(
    ffi.Pointer<MagicInfo> arg0,
  ) {
    return _GetMagicName(
      arg0,
    );
  }

  late final _GetMagicNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagicInfo>)>>('GetMagicName');
  late final _GetMagicName = _GetMagicNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagicInfo>)>();

  int ListMagicInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListMagicInfo(
      arg0,
      arg1,
    );
  }

  late final _ListMagicInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>>('ListMagicInfo');
  late final _ListMagicInfo = _ListMagicInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<MagicInfo> GetMagicInfo(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetMagicInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetMagicInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagicInfo> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size, ffi.Pointer<ExceptionInfo>)>>('GetMagicInfo');
  late final _GetMagicInfo = _GetMagicInfoPtr.asFunction<
      ffi.Pointer<MagicInfo> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<MagicInfo>> GetMagicInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetMagicInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetMagicInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<MagicInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetMagicInfoList');
  late final _GetMagicInfoList = _GetMagicInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<MagicInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  int GetMagicPatternExtent(
    ffi.Pointer<ExceptionInfo> arg0,
  ) {
    return _GetMagicPatternExtent(
      arg0,
    );
  }

  late final _GetMagicPatternExtentPtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ExceptionInfo>)>>(
      'GetMagicPatternExtent');
  late final _GetMagicPatternExtent = _GetMagicPatternExtentPtr.asFunction<
      int Function(ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetMagickList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetMagickList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetMagickListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetMagickList');
  late final _GetMagickList = _GetMagickListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetMagickDescription(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickDescription(
      arg0,
    );
  }

  late final _GetMagickDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagickInfo>)>>('GetMagickDescription');
  late final _GetMagickDescription = _GetMagickDescriptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickInfo>)>();

  ffi.Pointer<ffi.Char> GetMagickMimeType(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickMimeType(
      arg0,
    );
  }

  late final _GetMagickMimeTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagickInfo>)>>('GetMagickMimeType');
  late final _GetMagickMimeType = _GetMagickMimeTypePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickInfo>)>();

  ffi.Pointer<ffi.Char> GetMagickModuleName(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickModuleName(
      arg0,
    );
  }

  late final _GetMagickModuleNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagickInfo>)>>('GetMagickModuleName');
  late final _GetMagickModuleName = _GetMagickModuleNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickInfo>)>();

  ffi.Pointer<ffi.Char> GetMagickName(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickName(
      arg0,
    );
  }

  late final _GetMagickNamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagickInfo>)>>('GetMagickName');
  late final _GetMagickName = _GetMagickNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickInfo>)>();

  ffi.Pointer<DecodeImageHandler> GetImageDecoder(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetImageDecoder(
      arg0,
    );
  }

  late final _GetImageDecoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DecodeImageHandler> Function(
              ffi.Pointer<MagickInfo>)>>('GetImageDecoder');
  late final _GetImageDecoder = _GetImageDecoderPtr.asFunction<
      ffi.Pointer<DecodeImageHandler> Function(ffi.Pointer<MagickInfo>)>();

  ffi.Pointer<EncodeImageHandler> GetImageEncoder(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetImageEncoder(
      arg0,
    );
  }

  late final _GetImageEncoderPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<EncodeImageHandler> Function(
              ffi.Pointer<MagickInfo>)>>('GetImageEncoder');
  late final _GetImageEncoder = _GetImageEncoderPtr.asFunction<
      ffi.Pointer<EncodeImageHandler> Function(ffi.Pointer<MagickInfo>)>();

  int GetMagickPrecision() {
    return _GetMagickPrecision();
  }

  late final _GetMagickPrecisionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('GetMagickPrecision');
  late final _GetMagickPrecision =
      _GetMagickPrecisionPtr.asFunction<int Function()>();

  int SetMagickPrecision(
    int arg0,
  ) {
    return _SetMagickPrecision(
      arg0,
    );
  }

  late final _SetMagickPrecisionPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>(
          'SetMagickPrecision');
  late final _SetMagickPrecision =
      _SetMagickPrecisionPtr.asFunction<int Function(int)>();

  int GetImageMagick(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _GetImageMagick(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetImageMagickPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Size,
              ffi.Pointer<ffi.Char>)>>('GetImageMagick');
  late final _GetImageMagick = _GetImageMagickPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Char>)>();

  int GetMagickAdjoin(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickAdjoin(
      arg0,
    );
  }

  late final _GetMagickAdjoinPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickInfo>)>>(
          'GetMagickAdjoin');
  late final _GetMagickAdjoin =
      _GetMagickAdjoinPtr.asFunction<int Function(ffi.Pointer<MagickInfo>)>();

  int GetMagickBlobSupport(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickBlobSupport(
      arg0,
    );
  }

  late final _GetMagickBlobSupportPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickInfo>)>>(
          'GetMagickBlobSupport');
  late final _GetMagickBlobSupport = _GetMagickBlobSupportPtr.asFunction<
      int Function(ffi.Pointer<MagickInfo>)>();

  int GetMagickDecoderSeekableStream(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickDecoderSeekableStream(
      arg0,
    );
  }

  late final _GetMagickDecoderSeekableStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickInfo>)>>(
          'GetMagickDecoderSeekableStream');
  late final _GetMagickDecoderSeekableStream =
      _GetMagickDecoderSeekableStreamPtr.asFunction<
          int Function(ffi.Pointer<MagickInfo>)>();

  int GetMagickDecoderThreadSupport(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickDecoderThreadSupport(
      arg0,
    );
  }

  late final _GetMagickDecoderThreadSupportPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickInfo>)>>(
          'GetMagickDecoderThreadSupport');
  late final _GetMagickDecoderThreadSupport = _GetMagickDecoderThreadSupportPtr
      .asFunction<int Function(ffi.Pointer<MagickInfo>)>();

  int GetMagickEncoderSeekableStream(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickEncoderSeekableStream(
      arg0,
    );
  }

  late final _GetMagickEncoderSeekableStreamPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickInfo>)>>(
          'GetMagickEncoderSeekableStream');
  late final _GetMagickEncoderSeekableStream =
      _GetMagickEncoderSeekableStreamPtr.asFunction<
          int Function(ffi.Pointer<MagickInfo>)>();

  int GetMagickEncoderThreadSupport(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickEncoderThreadSupport(
      arg0,
    );
  }

  late final _GetMagickEncoderThreadSupportPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickInfo>)>>(
          'GetMagickEncoderThreadSupport');
  late final _GetMagickEncoderThreadSupport = _GetMagickEncoderThreadSupportPtr
      .asFunction<int Function(ffi.Pointer<MagickInfo>)>();

  int GetMagickEndianSupport(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickEndianSupport(
      arg0,
    );
  }

  late final _GetMagickEndianSupportPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickInfo>)>>(
          'GetMagickEndianSupport');
  late final _GetMagickEndianSupport = _GetMagickEndianSupportPtr.asFunction<
      int Function(ffi.Pointer<MagickInfo>)>();

  int GetMagickRawSupport(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickRawSupport(
      arg0,
    );
  }

  late final _GetMagickRawSupportPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickInfo>)>>(
          'GetMagickRawSupport');
  late final _GetMagickRawSupport = _GetMagickRawSupportPtr.asFunction<
      int Function(ffi.Pointer<MagickInfo>)>();

  int GetMagickStealth(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickStealth(
      arg0,
    );
  }

  late final _GetMagickStealthPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickInfo>)>>(
          'GetMagickStealth');
  late final _GetMagickStealth =
      _GetMagickStealthPtr.asFunction<int Function(ffi.Pointer<MagickInfo>)>();

  int GetMagickUseExtension(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _GetMagickUseExtension(
      arg0,
    );
  }

  late final _GetMagickUseExtensionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickInfo>)>>(
          'GetMagickUseExtension');
  late final _GetMagickUseExtension = _GetMagickUseExtensionPtr.asFunction<
      int Function(ffi.Pointer<MagickInfo>)>();

  int IsMagickCoreInstantiated() {
    return _IsMagickCoreInstantiated();
  }

  late final _IsMagickCoreInstantiatedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'IsMagickCoreInstantiated');
  late final _IsMagickCoreInstantiated =
      _IsMagickCoreInstantiatedPtr.asFunction<int Function()>();

  int RegisterMagickInfo(
    ffi.Pointer<MagickInfo> arg0,
  ) {
    return _RegisterMagickInfo(
      arg0,
    );
  }

  late final _RegisterMagickInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickInfo>)>>(
          'RegisterMagickInfo');
  late final _RegisterMagickInfo = _RegisterMagickInfoPtr.asFunction<
      int Function(ffi.Pointer<MagickInfo>)>();

  int UnregisterMagickInfo(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _UnregisterMagickInfo(
      arg0,
    );
  }

  late final _UnregisterMagickInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'UnregisterMagickInfo');
  late final _UnregisterMagickInfo = _UnregisterMagickInfoPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<MagickInfo> GetMagickInfo(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetMagickInfo(
      arg0,
      arg1,
    );
  }

  late final _GetMagickInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetMagickInfo');
  late final _GetMagickInfo = _GetMagickInfoPtr.asFunction<
      ffi.Pointer<MagickInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<MagickInfo>> GetMagickInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetMagickInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetMagickInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<MagickInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetMagickInfoList');
  late final _GetMagickInfoList = _GetMagickInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<MagickInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<MagickInfo> AcquireMagickInfo(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _AcquireMagickInfo(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AcquireMagickInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickInfo> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('AcquireMagickInfo');
  late final _AcquireMagickInfo = _AcquireMagickInfoPtr.asFunction<
      ffi.Pointer<MagickInfo> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void MagickCoreGenesis(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
  ) {
    return _MagickCoreGenesis(
      arg0,
      arg1,
    );
  }

  late final _MagickCoreGenesisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Int32)>>('MagickCoreGenesis');
  late final _MagickCoreGenesis = _MagickCoreGenesisPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int)>();

  void MagickCoreTerminus() {
    return _MagickCoreTerminus();
  }

  late final _MagickCoreTerminusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('MagickCoreTerminus');
  late final _MagickCoreTerminus =
      _MagickCoreTerminusPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Double>> AcquireMagickMatrix(
    int arg0,
    int arg1,
  ) {
    return _AcquireMagickMatrix(
      arg0,
      arg1,
    );
  }

  late final _AcquireMagickMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Double>> Function(
              ffi.Size, ffi.Size)>>('AcquireMagickMatrix');
  late final _AcquireMagickMatrix = _AcquireMagickMatrixPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Double>> Function(int, int)>();

  ffi.Pointer<ffi.Pointer<ffi.Double>> RelinquishMagickMatrix(
    ffi.Pointer<ffi.Pointer<ffi.Double>> arg0,
    int arg1,
  ) {
    return _RelinquishMagickMatrix(
      arg0,
      arg1,
    );
  }

  late final _RelinquishMagickMatrixPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Double>> Function(
              ffi.Pointer<ffi.Pointer<ffi.Double>>,
              ffi.Size)>>('RelinquishMagickMatrix');
  late final _RelinquishMagickMatrix = _RelinquishMagickMatrixPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Double>> Function(
          ffi.Pointer<ffi.Pointer<ffi.Double>>, int)>();

  ffi.Pointer<Image> MatrixToImage(
    ffi.Pointer<MatrixInfo> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _MatrixToImage(
      arg0,
      arg1,
    );
  }

  late final _MatrixToImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<MatrixInfo>,
              ffi.Pointer<ExceptionInfo>)>>('MatrixToImage');
  late final _MatrixToImage = _MatrixToImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<MatrixInfo>, ffi.Pointer<ExceptionInfo>)>();

  int GetMatrixElement(
    ffi.Pointer<MatrixInfo> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _GetMatrixElement(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetMatrixElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MatrixInfo>, ssize_t, ssize_t,
              ffi.Pointer<ffi.Void>)>>('GetMatrixElement');
  late final _GetMatrixElement = _GetMatrixElementPtr.asFunction<
      int Function(ffi.Pointer<MatrixInfo>, int, int, ffi.Pointer<ffi.Void>)>();

  int NullMatrix(
    ffi.Pointer<MatrixInfo> arg0,
  ) {
    return _NullMatrix(
      arg0,
    );
  }

  late final _NullMatrixPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MatrixInfo>)>>(
          'NullMatrix');
  late final _NullMatrix =
      _NullMatrixPtr.asFunction<int Function(ffi.Pointer<MatrixInfo>)>();

  int SetMatrixElement(
    ffi.Pointer<MatrixInfo> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _SetMatrixElement(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SetMatrixElementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MatrixInfo>, ssize_t, ssize_t,
              ffi.Pointer<ffi.Void>)>>('SetMatrixElement');
  late final _SetMatrixElement = _SetMatrixElementPtr.asFunction<
      int Function(ffi.Pointer<MatrixInfo>, int, int, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<MatrixInfo> AcquireMatrixInfo(
    int arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _AcquireMatrixInfo(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _AcquireMatrixInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MatrixInfo> Function(ffi.Size, ffi.Size, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('AcquireMatrixInfo');
  late final _AcquireMatrixInfo = _AcquireMatrixInfoPtr.asFunction<
      ffi.Pointer<MatrixInfo> Function(
          int, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<MatrixInfo> DestroyMatrixInfo(
    ffi.Pointer<MatrixInfo> arg0,
  ) {
    return _DestroyMatrixInfo(
      arg0,
    );
  }

  late final _DestroyMatrixInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MatrixInfo> Function(
              ffi.Pointer<MatrixInfo>)>>('DestroyMatrixInfo');
  late final _DestroyMatrixInfo = _DestroyMatrixInfoPtr.asFunction<
      ffi.Pointer<MatrixInfo> Function(ffi.Pointer<MatrixInfo>)>();

  int GetMatrixColumns(
    ffi.Pointer<MatrixInfo> arg0,
  ) {
    return _GetMatrixColumns(
      arg0,
    );
  }

  late final _GetMatrixColumnsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MatrixInfo>)>>(
          'GetMatrixColumns');
  late final _GetMatrixColumns =
      _GetMatrixColumnsPtr.asFunction<int Function(ffi.Pointer<MatrixInfo>)>();

  int GetMatrixRows(
    ffi.Pointer<MatrixInfo> arg0,
  ) {
    return _GetMatrixRows(
      arg0,
    );
  }

  late final _GetMatrixRowsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MatrixInfo>)>>(
          'GetMatrixRows');
  late final _GetMatrixRows =
      _GetMatrixRowsPtr.asFunction<int Function(ffi.Pointer<MatrixInfo>)>();

  ffi.Pointer<MemoryInfo> AcquireVirtualMemory(
    int arg0,
    int arg1,
  ) {
    return _AcquireVirtualMemory(
      arg0,
      arg1,
    );
  }

  late final _AcquireVirtualMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MemoryInfo> Function(
              ffi.Size, ffi.Size)>>('AcquireVirtualMemory');
  late final _AcquireVirtualMemory = _AcquireVirtualMemoryPtr.asFunction<
      ffi.Pointer<MemoryInfo> Function(int, int)>();

  ffi.Pointer<MemoryInfo> RelinquishVirtualMemory(
    ffi.Pointer<MemoryInfo> arg0,
  ) {
    return _RelinquishVirtualMemory(
      arg0,
    );
  }

  late final _RelinquishVirtualMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MemoryInfo> Function(
              ffi.Pointer<MemoryInfo>)>>('RelinquishVirtualMemory');
  late final _RelinquishVirtualMemory = _RelinquishVirtualMemoryPtr.asFunction<
      ffi.Pointer<MemoryInfo> Function(ffi.Pointer<MemoryInfo>)>();

  int GetMaxMemoryRequest() {
    return _GetMaxMemoryRequest();
  }

  late final _GetMaxMemoryRequestPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('GetMaxMemoryRequest');
  late final _GetMaxMemoryRequest =
      _GetMaxMemoryRequestPtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> AcquireAlignedMemory(
    int arg0,
    int arg1,
  ) {
    return _AcquireAlignedMemory(
      arg0,
      arg1,
    );
  }

  late final _AcquireAlignedMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size)>>('AcquireAlignedMemory');
  late final _AcquireAlignedMemory = _AcquireAlignedMemoryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> AcquireMagickMemory(
    int arg0,
  ) {
    return _AcquireMagickMemory(
      arg0,
    );
  }

  late final _AcquireMagickMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'AcquireMagickMemory');
  late final _AcquireMagickMemory =
      _AcquireMagickMemoryPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> AcquireCriticalMemory(
    int arg0,
  ) {
    return _AcquireCriticalMemory(
      arg0,
    );
  }

  late final _AcquireCriticalMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'AcquireCriticalMemory');
  late final _AcquireCriticalMemory = _AcquireCriticalMemoryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> AcquireQuantumMemory(
    int arg0,
    int arg1,
  ) {
    return _AcquireQuantumMemory(
      arg0,
      arg1,
    );
  }

  late final _AcquireQuantumMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size)>>('AcquireQuantumMemory');
  late final _AcquireQuantumMemory = _AcquireQuantumMemoryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> CopyMagickMemory(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _CopyMagickMemory(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _CopyMagickMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('CopyMagickMemory');
  late final _CopyMagickMemory = _CopyMagickMemoryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>, int)>();

  void DestroyMagickMemory() {
    return _DestroyMagickMemory();
  }

  late final _DestroyMagickMemoryPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('DestroyMagickMemory');
  late final _DestroyMagickMemory =
      _DestroyMagickMemoryPtr.asFunction<void Function()>();

  void GetMagickMemoryMethods(
    ffi.Pointer<AcquireMemoryHandler> arg0,
    ffi.Pointer<ResizeMemoryHandler> arg1,
    ffi.Pointer<DestroyMemoryHandler> arg2,
  ) {
    return _GetMagickMemoryMethods(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetMagickMemoryMethodsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<AcquireMemoryHandler>,
              ffi.Pointer<ResizeMemoryHandler>,
              ffi.Pointer<DestroyMemoryHandler>)>>('GetMagickMemoryMethods');
  late final _GetMagickMemoryMethods = _GetMagickMemoryMethodsPtr.asFunction<
      void Function(
          ffi.Pointer<AcquireMemoryHandler>,
          ffi.Pointer<ResizeMemoryHandler>,
          ffi.Pointer<DestroyMemoryHandler>)>();

  ffi.Pointer<ffi.Void> GetVirtualMemoryBlob(
    ffi.Pointer<MemoryInfo> arg0,
  ) {
    return _GetVirtualMemoryBlob(
      arg0,
    );
  }

  late final _GetVirtualMemoryBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<MemoryInfo>)>>('GetVirtualMemoryBlob');
  late final _GetVirtualMemoryBlob = _GetVirtualMemoryBlobPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<MemoryInfo>)>();

  ffi.Pointer<ffi.Void> RelinquishAlignedMemory(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _RelinquishAlignedMemory(
      arg0,
    );
  }

  late final _RelinquishAlignedMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('RelinquishAlignedMemory');
  late final _RelinquishAlignedMemory = _RelinquishAlignedMemoryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> RelinquishMagickMemory(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _RelinquishMagickMemory(
      arg0,
    );
  }

  late final _RelinquishMagickMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('RelinquishMagickMemory');
  late final _RelinquishMagickMemory = _RelinquishMagickMemoryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> ResetMagickMemory(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
  ) {
    return _ResetMagickMemory(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ResetMagickMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Int, ffi.Size)>>('ResetMagickMemory');
  late final _ResetMagickMemory = _ResetMagickMemoryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> ResizeMagickMemory(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
  ) {
    return _ResizeMagickMemory(
      arg0,
      arg1,
    );
  }

  late final _ResizeMagickMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('ResizeMagickMemory');
  late final _ResizeMagickMemory = _ResizeMagickMemoryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> ResizeQuantumMemory(
    ffi.Pointer<ffi.Void> arg0,
    int arg1,
    int arg2,
  ) {
    return _ResizeQuantumMemory(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ResizeQuantumMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size)>>('ResizeQuantumMemory');
  late final _ResizeQuantumMemory = _ResizeQuantumMemoryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void SetMagickAlignedMemoryMethods(
    AcquireAlignedMemoryHandler arg0,
    RelinquishAlignedMemoryHandler arg1,
  ) {
    return _SetMagickAlignedMemoryMethods(
      arg0,
      arg1,
    );
  }

  late final _SetMagickAlignedMemoryMethodsPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(AcquireAlignedMemoryHandler,
                  RelinquishAlignedMemoryHandler)>>(
      'SetMagickAlignedMemoryMethods');
  late final _SetMagickAlignedMemoryMethods =
      _SetMagickAlignedMemoryMethodsPtr.asFunction<
          void Function(
              AcquireAlignedMemoryHandler, RelinquishAlignedMemoryHandler)>();

  void SetMagickMemoryMethods(
    AcquireMemoryHandler arg0,
    ResizeMemoryHandler arg1,
    DestroyMemoryHandler arg2,
  ) {
    return _SetMagickMemoryMethods(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetMagickMemoryMethodsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(AcquireMemoryHandler, ResizeMemoryHandler,
              DestroyMemoryHandler)>>('SetMagickMemoryMethods');
  late final _SetMagickMemoryMethods = _SetMagickMemoryMethodsPtr.asFunction<
      void Function(
          AcquireMemoryHandler, ResizeMemoryHandler, DestroyMemoryHandler)>();

  ffi.Pointer<ffi.Char> GetMagickHomeURL() {
    return _GetMagickHomeURL();
  }

  late final _GetMagickHomeURLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetMagickHomeURL');
  late final _GetMagickHomeURL =
      _GetMagickHomeURLPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetMagickCopyright() {
    return _GetMagickCopyright();
  }

  late final _GetMagickCopyrightPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetMagickCopyright');
  late final _GetMagickCopyright =
      _GetMagickCopyrightPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetMagickDelegates() {
    return _GetMagickDelegates();
  }

  late final _GetMagickDelegatesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetMagickDelegates');
  late final _GetMagickDelegates =
      _GetMagickDelegatesPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetMagickFeatures() {
    return _GetMagickFeatures();
  }

  late final _GetMagickFeaturesPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetMagickFeatures');
  late final _GetMagickFeatures =
      _GetMagickFeaturesPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetMagickLicense() {
    return _GetMagickLicense();
  }

  late final _GetMagickLicensePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetMagickLicense');
  late final _GetMagickLicense =
      _GetMagickLicensePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetMagickPackageName() {
    return _GetMagickPackageName();
  }

  late final _GetMagickPackageNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetMagickPackageName');
  late final _GetMagickPackageName =
      _GetMagickPackageNamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetMagickQuantumDepth(
    ffi.Pointer<ffi.Size> arg0,
  ) {
    return _GetMagickQuantumDepth(
      arg0,
    );
  }

  late final _GetMagickQuantumDepthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('GetMagickQuantumDepth');
  late final _GetMagickQuantumDepth = _GetMagickQuantumDepthPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> GetMagickQuantumRange(
    ffi.Pointer<ffi.Size> arg0,
  ) {
    return _GetMagickQuantumRange(
      arg0,
    );
  }

  late final _GetMagickQuantumRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('GetMagickQuantumRange');
  late final _GetMagickQuantumRange = _GetMagickQuantumRangePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> GetMagickReleaseDate() {
    return _GetMagickReleaseDate();
  }

  late final _GetMagickReleaseDatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetMagickReleaseDate');
  late final _GetMagickReleaseDate =
      _GetMagickReleaseDatePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> GetMagickVersion(
    ffi.Pointer<ffi.Size> arg0,
  ) {
    return _GetMagickVersion(
      arg0,
    );
  }

  late final _GetMagickVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('GetMagickVersion');
  late final _GetMagickVersion = _GetMagickVersionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  void ListMagickVersion(
    ffi.Pointer<FILE> arg0,
  ) {
    return _ListMagickVersion(
      arg0,
    );
  }

  late final _ListMagickVersionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<FILE>)>>(
          'ListMagickVersion');
  late final _ListMagickVersion =
      _ListMagickVersionPtr.asFunction<void Function(ffi.Pointer<FILE>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetModuleList(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Size> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _GetModuleList(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetModuleListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetModuleList');
  late final _GetModuleList = _GetModuleListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<ModuleInfo>> GetModuleInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetModuleInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetModuleInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ModuleInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetModuleInfoList');
  late final _GetModuleInfoList = _GetModuleInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ModuleInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  int InvokeDynamicImageFilter(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<Image>> arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _InvokeDynamicImageFilter(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _InvokeDynamicImageFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('InvokeDynamicImageFilter');
  late final _InvokeDynamicImageFilter =
      _InvokeDynamicImageFilterPtr.asFunction<
          int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<Image>>,
              int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>();

  int ListModuleInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListModuleInfo(
      arg0,
      arg1,
    );
  }

  late final _ListModuleInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<ExceptionInfo>)>>('ListModuleInfo');
  late final _ListModuleInfo = _ListModuleInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ModuleInfo> GetModuleInfo(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetModuleInfo(
      arg0,
      arg1,
    );
  }

  late final _GetModuleInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ModuleInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetModuleInfo');
  late final _GetModuleInfo = _GetModuleInfoPtr.asFunction<
      ffi.Pointer<ModuleInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  void DestroyModuleList() {
    return _DestroyModuleList();
  }

  late final _DestroyModuleListPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('DestroyModuleList');
  late final _DestroyModuleList =
      _DestroyModuleListPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetMimeList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetMimeList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetMimeListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetMimeList');
  late final _GetMimeList = _GetMimeListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> MagickToMime(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _MagickToMime(
      arg0,
    );
  }

  late final _MagickToMimePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('MagickToMime');
  late final _MagickToMime = _MagickToMimePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetMimeDescription(
    ffi.Pointer<MimeInfo> arg0,
  ) {
    return _GetMimeDescription(
      arg0,
    );
  }

  late final _GetMimeDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MimeInfo>)>>('GetMimeDescription');
  late final _GetMimeDescription = _GetMimeDescriptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MimeInfo>)>();

  ffi.Pointer<ffi.Char> GetMimeType(
    ffi.Pointer<MimeInfo> arg0,
  ) {
    return _GetMimeType(
      arg0,
    );
  }

  late final _GetMimeTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MimeInfo>)>>('GetMimeType');
  late final _GetMimeType = _GetMimeTypePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MimeInfo>)>();

  int ListMimeInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListMimeInfo(
      arg0,
      arg1,
    );
  }

  late final _ListMimeInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>>('ListMimeInfo');
  late final _ListMimeInfo = _ListMimeInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  int LoadMimeLists(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _LoadMimeLists(
      arg0,
      arg1,
    );
  }

  late final _LoadMimeListsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('LoadMimeLists');
  late final _LoadMimeLists = _LoadMimeListsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<MimeInfo> GetMimeInfo(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.UnsignedChar> arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _GetMimeInfo(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetMimeInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MimeInfo> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('GetMimeInfo');
  late final _GetMimeInfo = _GetMimeInfoPtr.asFunction<
      ffi.Pointer<MimeInfo> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<MimeInfo>> GetMimeInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetMimeInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetMimeInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<MimeInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetMimeInfoList');
  late final _GetMimeInfoList = _GetMimeInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<MimeInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> MontageImages(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<MontageInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _MontageImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MontageImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<MontageInfo>,
              ffi.Pointer<ExceptionInfo>)>>('MontageImages');
  late final _MontageImages = _MontageImagesPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<MontageInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> MontageImageList(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<MontageInfo> arg1,
    ffi.Pointer<Image> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _MontageImageList(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MontageImageListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<MontageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('MontageImageList');
  late final _MontageImageList = _MontageImageListPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<ImageInfo>,
          ffi.Pointer<MontageInfo>,
          ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<MontageInfo> CloneMontageInfo(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<MontageInfo> arg1,
  ) {
    return _CloneMontageInfo(
      arg0,
      arg1,
    );
  }

  late final _CloneMontageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MontageInfo> Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<MontageInfo>)>>('CloneMontageInfo');
  late final _CloneMontageInfo = _CloneMontageInfoPtr.asFunction<
      ffi.Pointer<MontageInfo> Function(
          ffi.Pointer<ImageInfo>, ffi.Pointer<MontageInfo>)>();

  ffi.Pointer<MontageInfo> DestroyMontageInfo(
    ffi.Pointer<MontageInfo> arg0,
  ) {
    return _DestroyMontageInfo(
      arg0,
    );
  }

  late final _DestroyMontageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MontageInfo> Function(
              ffi.Pointer<MontageInfo>)>>('DestroyMontageInfo');
  late final _DestroyMontageInfo = _DestroyMontageInfoPtr.asFunction<
      ffi.Pointer<MontageInfo> Function(ffi.Pointer<MontageInfo>)>();

  void GetMontageInfo(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<MontageInfo> arg1,
  ) {
    return _GetMontageInfo(
      arg0,
      arg1,
    );
  }

  late final _GetMontageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<MontageInfo>)>>('GetMontageInfo');
  late final _GetMontageInfo = _GetMontageInfoPtr.asFunction<
      void Function(ffi.Pointer<ImageInfo>, ffi.Pointer<MontageInfo>)>();

  ffi.Pointer<ffi.Char> GetOpenCLDeviceName(
    MagickCLDevice arg0,
  ) {
    return _GetOpenCLDeviceName(
      arg0,
    );
  }

  late final _GetOpenCLDeviceNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(MagickCLDevice)>>(
      'GetOpenCLDeviceName');
  late final _GetOpenCLDeviceName = _GetOpenCLDeviceNamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(MagickCLDevice)>();

  ffi.Pointer<ffi.Char> GetOpenCLDeviceVendorName(
    MagickCLDevice arg0,
  ) {
    return _GetOpenCLDeviceVendorName(
      arg0,
    );
  }

  late final _GetOpenCLDeviceVendorNamePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(MagickCLDevice)>>(
      'GetOpenCLDeviceVendorName');
  late final _GetOpenCLDeviceVendorName = _GetOpenCLDeviceVendorNamePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(MagickCLDevice)>();

  ffi.Pointer<ffi.Char> GetOpenCLDeviceVersion(
    MagickCLDevice arg0,
  ) {
    return _GetOpenCLDeviceVersion(
      arg0,
    );
  }

  late final _GetOpenCLDeviceVersionPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(MagickCLDevice)>>(
      'GetOpenCLDeviceVersion');
  late final _GetOpenCLDeviceVersion = _GetOpenCLDeviceVersionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(MagickCLDevice)>();

  ffi.Pointer<KernelProfileRecord> GetOpenCLKernelProfileRecords(
    MagickCLDevice arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _GetOpenCLKernelProfileRecords(
      arg0,
      arg1,
    );
  }

  late final _GetOpenCLKernelProfileRecordsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<KernelProfileRecord> Function(MagickCLDevice,
              ffi.Pointer<ffi.Size>)>>('GetOpenCLKernelProfileRecords');
  late final _GetOpenCLKernelProfileRecords =
      _GetOpenCLKernelProfileRecordsPtr.asFunction<
          ffi.Pointer<KernelProfileRecord> Function(
              MagickCLDevice, ffi.Pointer<ffi.Size>)>();

  double GetOpenCLDeviceBenchmarkScore(
    MagickCLDevice arg0,
  ) {
    return _GetOpenCLDeviceBenchmarkScore(
      arg0,
    );
  }

  late final _GetOpenCLDeviceBenchmarkScorePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(MagickCLDevice)>>(
          'GetOpenCLDeviceBenchmarkScore');
  late final _GetOpenCLDeviceBenchmarkScore = _GetOpenCLDeviceBenchmarkScorePtr
      .asFunction<double Function(MagickCLDevice)>();

  ffi.Pointer<MagickCLDevice> GetOpenCLDevices(
    ffi.Pointer<ffi.Size> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetOpenCLDevices(
      arg0,
      arg1,
    );
  }

  late final _GetOpenCLDevicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickCLDevice> Function(ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetOpenCLDevices');
  late final _GetOpenCLDevices = _GetOpenCLDevicesPtr.asFunction<
      ffi.Pointer<MagickCLDevice> Function(
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  int GetOpenCLDeviceType(
    MagickCLDevice arg0,
  ) {
    return _GetOpenCLDeviceType(
      arg0,
    );
  }

  late final _GetOpenCLDeviceTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MagickCLDevice)>>(
          'GetOpenCLDeviceType');
  late final _GetOpenCLDeviceType =
      _GetOpenCLDeviceTypePtr.asFunction<int Function(MagickCLDevice)>();

  int GetOpenCLDeviceEnabled(
    MagickCLDevice arg0,
  ) {
    return _GetOpenCLDeviceEnabled(
      arg0,
    );
  }

  late final _GetOpenCLDeviceEnabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(MagickCLDevice)>>(
          'GetOpenCLDeviceEnabled');
  late final _GetOpenCLDeviceEnabled =
      _GetOpenCLDeviceEnabledPtr.asFunction<int Function(MagickCLDevice)>();

  int GetOpenCLEnabled() {
    return _GetOpenCLEnabled();
  }

  late final _GetOpenCLEnabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>('GetOpenCLEnabled');
  late final _GetOpenCLEnabled =
      _GetOpenCLEnabledPtr.asFunction<int Function()>();

  int SetOpenCLEnabled(
    int arg0,
  ) {
    return _SetOpenCLEnabled(
      arg0,
    );
  }

  late final _SetOpenCLEnabledPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Int32)>>(
          'SetOpenCLEnabled');
  late final _SetOpenCLEnabled =
      _SetOpenCLEnabledPtr.asFunction<int Function(int)>();

  void SetOpenCLDeviceEnabled(
    MagickCLDevice arg0,
    int arg1,
  ) {
    return _SetOpenCLDeviceEnabled(
      arg0,
      arg1,
    );
  }

  late final _SetOpenCLDeviceEnabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MagickCLDevice, ffi.Int32)>>(
          'SetOpenCLDeviceEnabled');
  late final _SetOpenCLDeviceEnabled = _SetOpenCLDeviceEnabledPtr.asFunction<
      void Function(MagickCLDevice, int)>();

  void SetOpenCLKernelProfileEnabled(
    MagickCLDevice arg0,
    int arg1,
  ) {
    return _SetOpenCLKernelProfileEnabled(
      arg0,
      arg1,
    );
  }

  late final _SetOpenCLKernelProfileEnabledPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MagickCLDevice, ffi.Int32)>>(
          'SetOpenCLKernelProfileEnabled');
  late final _SetOpenCLKernelProfileEnabled = _SetOpenCLKernelProfileEnabledPtr
      .asFunction<void Function(MagickCLDevice, int)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetCommandOptions(
    int arg0,
  ) {
    return _GetCommandOptions(
      arg0,
    );
  }

  late final _GetCommandOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Int32)>>('GetCommandOptions');
  late final _GetCommandOptions = _GetCommandOptionsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(int)>();

  ffi.Pointer<ffi.Char> GetNextImageOption(
    ffi.Pointer<ImageInfo> arg0,
  ) {
    return _GetNextImageOption(
      arg0,
    );
  }

  late final _GetNextImageOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImageInfo>)>>('GetNextImageOption');
  late final _GetNextImageOption = _GetNextImageOptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImageInfo>)>();

  ffi.Pointer<ffi.Char> RemoveImageOption(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _RemoveImageOption(
      arg0,
      arg1,
    );
  }

  late final _RemoveImageOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<ffi.Char>)>>('RemoveImageOption');
  late final _RemoveImageOption = _RemoveImageOptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> CommandOptionToMnemonic(
    int arg0,
    int arg1,
  ) {
    return _CommandOptionToMnemonic(
      arg0,
      arg1,
    );
  }

  late final _CommandOptionToMnemonicPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int32, ssize_t)>>('CommandOptionToMnemonic');
  late final _CommandOptionToMnemonic = _CommandOptionToMnemonicPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, int)>();

  ffi.Pointer<ffi.Char> GetImageOption(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _GetImageOption(
      arg0,
      arg1,
    );
  }

  late final _GetImageOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<ffi.Char>)>>('GetImageOption');
  late final _GetImageOption = _GetImageOptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Char>)>();

  int CloneImageOptions(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ImageInfo> arg1,
  ) {
    return _CloneImageOptions(
      arg0,
      arg1,
    );
  }

  late final _CloneImageOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<ImageInfo>)>>('CloneImageOptions');
  late final _CloneImageOptions = _CloneImageOptionsPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ImageInfo>)>();

  int DefineImageOption(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DefineImageOption(
      arg0,
      arg1,
    );
  }

  late final _DefineImageOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<ffi.Char>)>>('DefineImageOption');
  late final _DefineImageOption = _DefineImageOptionPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Char>)>();

  int DeleteImageOption(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DeleteImageOption(
      arg0,
      arg1,
    );
  }

  late final _DeleteImageOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<ffi.Char>)>>('DeleteImageOption');
  late final _DeleteImageOption = _DeleteImageOptionPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Char>)>();

  int IsCommandOption(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _IsCommandOption(
      arg0,
    );
  }

  late final _IsCommandOptionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'IsCommandOption');
  late final _IsCommandOption =
      _IsCommandOptionPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int IsOptionMember(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _IsOptionMember(
      arg0,
      arg1,
    );
  }

  late final _IsOptionMemberPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('IsOptionMember');
  late final _IsOptionMember = _IsOptionMemberPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int ListCommandOptions(
    ffi.Pointer<FILE> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ListCommandOptions(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ListCommandOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('ListCommandOptions');
  late final _ListCommandOptions = _ListCommandOptionsPtr.asFunction<
      int Function(ffi.Pointer<FILE>, int, ffi.Pointer<ExceptionInfo>)>();

  int SetImageOption(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _SetImageOption(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetImageOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('SetImageOption');
  late final _SetImageOption = _SetImageOptionPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int GetCommandOptionFlags(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _GetCommandOptionFlags(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetCommandOptionFlagsPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('GetCommandOptionFlags');
  late final _GetCommandOptionFlags = _GetCommandOptionFlagsPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int ParseChannelOption(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ParseChannelOption(
      arg0,
    );
  }

  late final _ParseChannelOptionPtr =
      _lookup<ffi.NativeFunction<ssize_t Function(ffi.Pointer<ffi.Char>)>>(
          'ParseChannelOption');
  late final _ParseChannelOption =
      _ParseChannelOptionPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ParsePixelChannelOption(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _ParsePixelChannelOption(
      arg0,
    );
  }

  late final _ParsePixelChannelOptionPtr =
      _lookup<ffi.NativeFunction<ssize_t Function(ffi.Pointer<ffi.Char>)>>(
          'ParsePixelChannelOption');
  late final _ParsePixelChannelOption = _ParsePixelChannelOptionPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  int ParseCommandOption(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _ParseCommandOption(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ParseCommandOptionPtr = _lookup<
      ffi.NativeFunction<
          ssize_t Function(ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('ParseCommandOption');
  late final _ParseCommandOption = _ParseCommandOptionPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>)>();

  void DestroyImageOptions(
    ffi.Pointer<ImageInfo> arg0,
  ) {
    return _DestroyImageOptions(
      arg0,
    );
  }

  late final _DestroyImageOptionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImageInfo>)>>(
          'DestroyImageOptions');
  late final _DestroyImageOptions = _DestroyImageOptionsPtr.asFunction<
      void Function(ffi.Pointer<ImageInfo>)>();

  void ResetImageOptions(
    ffi.Pointer<ImageInfo> arg0,
  ) {
    return _ResetImageOptions(
      arg0,
    );
  }

  late final _ResetImageOptionsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImageInfo>)>>(
          'ResetImageOptions');
  late final _ResetImageOptions =
      _ResetImageOptionsPtr.asFunction<void Function(ffi.Pointer<ImageInfo>)>();

  void ResetImageOptionIterator(
    ffi.Pointer<ImageInfo> arg0,
  ) {
    return _ResetImageOptionIterator(
      arg0,
    );
  }

  late final _ResetImageOptionIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ImageInfo>)>>(
          'ResetImageOptionIterator');
  late final _ResetImageOptionIterator = _ResetImageOptionIteratorPtr
      .asFunction<void Function(ffi.Pointer<ImageInfo>)>();

  ffi.Pointer<OptionInfo> GetCommandOptionInfo(
    ffi.Pointer<ffi.Char> value,
  ) {
    return _GetCommandOptionInfo(
      value,
    );
  }

  late final _GetCommandOptionInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<OptionInfo> Function(
              ffi.Pointer<ffi.Char>)>>('GetCommandOptionInfo');
  late final _GetCommandOptionInfo = _GetCommandOptionInfoPtr.asFunction<
      ffi.Pointer<OptionInfo> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<Image> OilPaintImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _OilPaintImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _OilPaintImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('OilPaintImage');
  late final _OilPaintImage = _OilPaintImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  int FloodfillPaintImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<DrawInfo> arg1,
    ffi.Pointer<PixelInfo> arg2,
    int arg3,
    int arg4,
    int arg5,
    ffi.Pointer<ExceptionInfo> arg6,
  ) {
    return _FloodfillPaintImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _FloodfillPaintImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<DrawInfo>,
              ffi.Pointer<PixelInfo>,
              ssize_t,
              ssize_t,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('FloodfillPaintImage');
  late final _FloodfillPaintImage = _FloodfillPaintImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
          ffi.Pointer<PixelInfo>, int, int, int, ffi.Pointer<ExceptionInfo>)>();

  int GradientImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<StopInfo> arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _GradientImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _GradientImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<StopInfo>,
              ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('GradientImage');
  late final _GradientImage = _GradientImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, int, ffi.Pointer<StopInfo>, int,
          ffi.Pointer<ExceptionInfo>)>();

  int OpaquePaintImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<PixelInfo> arg1,
    ffi.Pointer<PixelInfo> arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _OpaquePaintImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _OpaquePaintImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<PixelInfo>,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('OpaquePaintImage');
  late final _OpaquePaintImage = _OpaquePaintImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<PixelInfo>,
          ffi.Pointer<PixelInfo>, int, ffi.Pointer<ExceptionInfo>)>();

  int TransparentPaintImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<PixelInfo> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _TransparentPaintImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _TransparentPaintImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<PixelInfo>,
              Quantum,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('TransparentPaintImage');
  late final _TransparentPaintImage = _TransparentPaintImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<PixelInfo>, int, int,
          ffi.Pointer<ExceptionInfo>)>();

  int TransparentPaintImageChroma(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<PixelInfo> arg1,
    ffi.Pointer<PixelInfo> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _TransparentPaintImageChroma(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _TransparentPaintImageChromaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<PixelInfo>,
              Quantum,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('TransparentPaintImageChroma');
  late final _TransparentPaintImageChroma =
      _TransparentPaintImageChromaPtr.asFunction<
          int Function(ffi.Pointer<Image>, ffi.Pointer<PixelInfo>,
              ffi.Pointer<PixelInfo>, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetPolicyValue(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _GetPolicyValue(
      arg0,
    );
  }

  late final _GetPolicyValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('GetPolicyValue');
  late final _GetPolicyValue = _GetPolicyValuePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> GetPolicyList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetPolicyList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetPolicyListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetPolicyList');
  late final _GetPolicyList = _GetPolicyListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Pointer<PolicyInfo>> GetPolicyInfoList(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetPolicyInfoList(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetPolicyInfoListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<PolicyInfo>> Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetPolicyInfoList');
  late final _GetPolicyInfoList = _GetPolicyInfoListPtr.asFunction<
      ffi.Pointer<ffi.Pointer<PolicyInfo>> Function(ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  int IsRightsAuthorized(
    int arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _IsRightsAuthorized(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _IsRightsAuthorizedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('IsRightsAuthorized');
  late final _IsRightsAuthorized = _IsRightsAuthorizedPtr.asFunction<
      int Function(int, int, ffi.Pointer<ffi.Char>)>();

  int ListPolicyInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListPolicyInfo(
      arg0,
      arg1,
    );
  }

  late final _ListPolicyInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<ExceptionInfo>)>>('ListPolicyInfo');
  late final _ListPolicyInfo = _ListPolicyInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  int SetMagickSecurityPolicy(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _SetMagickSecurityPolicy(
      arg0,
      arg1,
    );
  }

  late final _SetMagickSecurityPolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('SetMagickSecurityPolicy');
  late final _SetMagickSecurityPolicy = _SetMagickSecurityPolicyPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  int SetMagickSecurityPolicyValue(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SetMagickSecurityPolicyValue(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SetMagickSecurityPolicyValuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('SetMagickSecurityPolicyValue');
  late final _SetMagickSecurityPolicyValue =
      _SetMagickSecurityPolicyValuePtr.asFunction<
          int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>();

  double GetImageTotalInkDensity(
    ffi.Pointer<Image> image,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetImageTotalInkDensity(
      image,
      arg1,
    );
  }

  late final _GetImageTotalInkDensityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageTotalInkDensity');
  late final _GetImageTotalInkDensity = _GetImageTotalInkDensityPtr.asFunction<
      double Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> InterpretImageProperties(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _InterpretImageProperties(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _InterpretImagePropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('InterpretImageProperties');
  late final _InterpretImageProperties =
      _InterpretImagePropertiesPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> RemoveImageProperty(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _RemoveImageProperty(
      arg0,
      arg1,
    );
  }

  late final _RemoveImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>)>>('RemoveImageProperty');
  late final _RemoveImageProperty = _RemoveImagePropertyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetNextImageProperty(
    ffi.Pointer<Image> arg0,
  ) {
    return _GetNextImageProperty(
      arg0,
    );
  }

  late final _GetNextImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Image>)>>('GetNextImageProperty');
  late final _GetNextImageProperty = _GetNextImagePropertyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<ffi.Char> GetImageProperty(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetImageProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageProperty');
  late final _GetImageProperty = _GetImagePropertyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetMagickProperty(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _GetMagickProperty(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetMagickPropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetMagickProperty');
  late final _GetMagickProperty = _GetMagickPropertyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  int CloneImageProperties(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
  ) {
    return _CloneImageProperties(
      arg0,
      arg1,
    );
  }

  late final _CloneImagePropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>, ffi.Pointer<Image>)>>('CloneImageProperties');
  late final _CloneImageProperties = _CloneImagePropertiesPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<Image>)>();

  int DefineImageProperty(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _DefineImageProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DefineImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('DefineImageProperty');
  late final _DefineImageProperty = _DefineImagePropertyPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int DeleteImageProperty(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DeleteImageProperty(
      arg0,
      arg1,
    );
  }

  late final _DeleteImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>)>>('DeleteImageProperty');
  late final _DeleteImageProperty = _DeleteImagePropertyPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>)>();

  int FormatImageProperty(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _FormatImageProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _FormatImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('FormatImageProperty');
  late final _FormatImageProperty = _FormatImagePropertyPtr.asFunction<
      int Function(
          ffi.Pointer<Image>, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int SetImageProperty(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SetImageProperty(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SetImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('SetImageProperty');
  late final _SetImageProperty = _SetImagePropertyPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  void DestroyImageProperties(
    ffi.Pointer<Image> arg0,
  ) {
    return _DestroyImageProperties(
      arg0,
    );
  }

  late final _DestroyImagePropertiesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'DestroyImageProperties');
  late final _DestroyImageProperties = _DestroyImagePropertiesPtr.asFunction<
      void Function(ffi.Pointer<Image>)>();

  void ResetImagePropertyIterator(
    ffi.Pointer<Image> arg0,
  ) {
    return _ResetImagePropertyIterator(
      arg0,
    );
  }

  late final _ResetImagePropertyIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<Image>)>>(
          'ResetImagePropertyIterator');
  late final _ResetImagePropertyIterator = _ResetImagePropertyIteratorPtr
      .asFunction<void Function(ffi.Pointer<Image>)>();

  int CompressImageColormap(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _CompressImageColormap(
      arg0,
      arg1,
    );
  }

  late final _CompressImageColormapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('CompressImageColormap');
  late final _CompressImageColormap = _CompressImageColormapPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int GetImageQuantizeError(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetImageQuantizeError(
      arg0,
      arg1,
    );
  }

  late final _GetImageQuantizeErrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageQuantizeError');
  late final _GetImageQuantizeError = _GetImageQuantizeErrorPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int KmeansImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    double arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _KmeansImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _KmeansImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Size, ffi.Size, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('KmeansImage');
  late final _KmeansImage = _KmeansImagePtr.asFunction<
      int Function(
          ffi.Pointer<Image>, int, int, double, ffi.Pointer<ExceptionInfo>)>();

  int PosterizeImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _PosterizeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PosterizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Size, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('PosterizeImage');
  late final _PosterizeImage = _PosterizeImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, int, ffi.Pointer<ExceptionInfo>)>();

  int QuantizeImage(
    ffi.Pointer<QuantizeInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _QuantizeImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _QuantizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<QuantizeInfo>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('QuantizeImage');
  late final _QuantizeImage = _QuantizeImagePtr.asFunction<
      int Function(ffi.Pointer<QuantizeInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  int QuantizeImages(
    ffi.Pointer<QuantizeInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _QuantizeImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _QuantizeImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<QuantizeInfo>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('QuantizeImages');
  late final _QuantizeImages = _QuantizeImagesPtr.asFunction<
      int Function(ffi.Pointer<QuantizeInfo>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  int RemapImage(
    ffi.Pointer<QuantizeInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<Image> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _RemapImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _RemapImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<QuantizeInfo>, ffi.Pointer<Image>,
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('RemapImage');
  late final _RemapImage = _RemapImagePtr.asFunction<
      int Function(ffi.Pointer<QuantizeInfo>, ffi.Pointer<Image>,
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int RemapImages(
    ffi.Pointer<QuantizeInfo> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<Image> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _RemapImages(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _RemapImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<QuantizeInfo>, ffi.Pointer<Image>,
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('RemapImages');
  late final _RemapImages = _RemapImagesPtr.asFunction<
      int Function(ffi.Pointer<QuantizeInfo>, ffi.Pointer<Image>,
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<QuantizeInfo> AcquireQuantizeInfo(
    ffi.Pointer<ImageInfo> arg0,
  ) {
    return _AcquireQuantizeInfo(
      arg0,
    );
  }

  late final _AcquireQuantizeInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<QuantizeInfo> Function(
              ffi.Pointer<ImageInfo>)>>('AcquireQuantizeInfo');
  late final _AcquireQuantizeInfo = _AcquireQuantizeInfoPtr.asFunction<
      ffi.Pointer<QuantizeInfo> Function(ffi.Pointer<ImageInfo>)>();

  ffi.Pointer<QuantizeInfo> CloneQuantizeInfo(
    ffi.Pointer<QuantizeInfo> arg0,
  ) {
    return _CloneQuantizeInfo(
      arg0,
    );
  }

  late final _CloneQuantizeInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<QuantizeInfo> Function(
              ffi.Pointer<QuantizeInfo>)>>('CloneQuantizeInfo');
  late final _CloneQuantizeInfo = _CloneQuantizeInfoPtr.asFunction<
      ffi.Pointer<QuantizeInfo> Function(ffi.Pointer<QuantizeInfo>)>();

  ffi.Pointer<QuantizeInfo> DestroyQuantizeInfo(
    ffi.Pointer<QuantizeInfo> arg0,
  ) {
    return _DestroyQuantizeInfo(
      arg0,
    );
  }

  late final _DestroyQuantizeInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<QuantizeInfo> Function(
              ffi.Pointer<QuantizeInfo>)>>('DestroyQuantizeInfo');
  late final _DestroyQuantizeInfo = _DestroyQuantizeInfoPtr.asFunction<
      ffi.Pointer<QuantizeInfo> Function(ffi.Pointer<QuantizeInfo>)>();

  void GetQuantizeInfo(
    ffi.Pointer<QuantizeInfo> arg0,
  ) {
    return _GetQuantizeInfo(
      arg0,
    );
  }

  late final _GetQuantizeInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<QuantizeInfo>)>>(
          'GetQuantizeInfo');
  late final _GetQuantizeInfo = _GetQuantizeInfoPtr.asFunction<
      void Function(ffi.Pointer<QuantizeInfo>)>();

  ffi.Pointer<ffi.Char> GetNextImageRegistry() {
    return _GetNextImageRegistry();
  }

  late final _GetNextImageRegistryPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'GetNextImageRegistry');
  late final _GetNextImageRegistry =
      _GetNextImageRegistryPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int DefineImageRegistry(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _DefineImageRegistry(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DefineImageRegistryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Int32, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('DefineImageRegistry');
  late final _DefineImageRegistry = _DefineImageRegistryPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  int DeleteImageRegistry(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _DeleteImageRegistry(
      arg0,
    );
  }

  late final _DeleteImageRegistryPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'DeleteImageRegistry');
  late final _DeleteImageRegistry =
      _DeleteImageRegistryPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int SetImageRegistry(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SetImageRegistry(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SetImageRegistryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ExceptionInfo>)>>('SetImageRegistry');
  late final _SetImageRegistry = _SetImageRegistryPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Void> GetImageRegistry(
    int arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetImageRegistry(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetImageRegistryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Int32, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageRegistry');
  late final _GetImageRegistry = _GetImageRegistryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          int, ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Void> RemoveImageRegistry(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _RemoveImageRegistry(
      arg0,
    );
  }

  late final _RemoveImageRegistryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Char>)>>('RemoveImageRegistry');
  late final _RemoveImageRegistry = _RemoveImageRegistryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Char>)>();

  void ResetImageRegistryIterator() {
    return _ResetImageRegistryIterator();
  }

  late final _ResetImageRegistryIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'ResetImageRegistryIterator');
  late final _ResetImageRegistryIterator =
      _ResetImageRegistryIteratorPtr.asFunction<void Function()>();

  int AcquireUniqueFileResource(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _AcquireUniqueFileResource(
      arg0,
    );
  }

  late final _AcquireUniqueFileResourcePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'AcquireUniqueFileResource');
  late final _AcquireUniqueFileResource = _AcquireUniqueFileResourcePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int AcquireMagickResource(
    int arg0,
    int arg1,
  ) {
    return _AcquireMagickResource(
      arg0,
      arg1,
    );
  }

  late final _AcquireMagickResourcePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, MagickSizeType)>>(
      'AcquireMagickResource');
  late final _AcquireMagickResource =
      _AcquireMagickResourcePtr.asFunction<int Function(int, int)>();

  int GetPathTemplate(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _GetPathTemplate(
      arg0,
    );
  }

  late final _GetPathTemplatePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'GetPathTemplate');
  late final _GetPathTemplate =
      _GetPathTemplatePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int ListMagickResourceInfo(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListMagickResourceInfo(
      arg0,
      arg1,
    );
  }

  late final _ListMagickResourceInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<ExceptionInfo>)>>('ListMagickResourceInfo');
  late final _ListMagickResourceInfo = _ListMagickResourceInfoPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  int RelinquishUniqueFileResource(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _RelinquishUniqueFileResource(
      arg0,
    );
  }

  late final _RelinquishUniqueFileResourcePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'RelinquishUniqueFileResource');
  late final _RelinquishUniqueFileResource = _RelinquishUniqueFileResourcePtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int SetMagickResourceLimit(
    int arg0,
    int arg1,
  ) {
    return _SetMagickResourceLimit(
      arg0,
      arg1,
    );
  }

  late final _SetMagickResourceLimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, MagickSizeType)>>(
      'SetMagickResourceLimit');
  late final _SetMagickResourceLimit =
      _SetMagickResourceLimitPtr.asFunction<int Function(int, int)>();

  int GetMagickResource(
    int arg0,
  ) {
    return _GetMagickResource(
      arg0,
    );
  }

  late final _GetMagickResourcePtr =
      _lookup<ffi.NativeFunction<MagickSizeType Function(ffi.Int32)>>(
          'GetMagickResource');
  late final _GetMagickResource =
      _GetMagickResourcePtr.asFunction<int Function(int)>();

  int GetMagickResourceLimit(
    int arg0,
  ) {
    return _GetMagickResourceLimit(
      arg0,
    );
  }

  late final _GetMagickResourceLimitPtr =
      _lookup<ffi.NativeFunction<MagickSizeType Function(ffi.Int32)>>(
          'GetMagickResourceLimit');
  late final _GetMagickResourceLimit =
      _GetMagickResourceLimitPtr.asFunction<int Function(int)>();

  void RelinquishMagickResource(
    int arg0,
    int arg1,
  ) {
    return _RelinquishMagickResource(
      arg0,
      arg1,
    );
  }

  late final _RelinquishMagickResourcePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int32, MagickSizeType)>>(
          'RelinquishMagickResource');
  late final _RelinquishMagickResource =
      _RelinquishMagickResourcePtr.asFunction<void Function(int, int)>();

  int GetImageDynamicThreshold(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<PixelInfo> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _GetImageDynamicThreshold(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _GetImageDynamicThresholdPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageDynamicThreshold');
  late final _GetImageDynamicThreshold =
      _GetImageDynamicThresholdPtr.asFunction<
          int Function(ffi.Pointer<Image>, double, double,
              ffi.Pointer<PixelInfo>, ffi.Pointer<ExceptionInfo>)>();

  int SegmentImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    double arg3,
    double arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _SegmentImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _SegmentImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('SegmentImage');
  late final _SegmentImage = _SegmentImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, int, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> DeskewImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _DeskewImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DeskewImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('DeskewImage');
  late final _DeskewImage = _DeskewImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> IntegralRotateImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _IntegralRotateImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _IntegralRotateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('IntegralRotateImage');
  late final _IntegralRotateImage = _IntegralRotateImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ShearImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ShearImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ShearImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('ShearImage');
  late final _ShearImage = _ShearImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ShearRotateImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ShearRotateImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ShearRotateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('ShearRotateImage');
  late final _ShearRotateImage = _ShearRotateImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, ffi.Pointer<ExceptionInfo>)>();

  int SignatureImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _SignatureImage(
      arg0,
      arg1,
    );
  }

  late final _SignatureImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SignatureImage');
  late final _SignatureImage = _SignatureImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int AddValueToSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _AddValueToSplayTree(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AddValueToSplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<SplayTreeInfo>, ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('AddValueToSplayTree');
  late final _AddValueToSplayTree = _AddValueToSplayTreePtr.asFunction<
      int Function(ffi.Pointer<SplayTreeInfo>, ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>)>();

  int DeleteNodeByValueFromSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _DeleteNodeByValueFromSplayTree(
      arg0,
      arg1,
    );
  }

  late final _DeleteNodeByValueFromSplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<SplayTreeInfo>,
              ffi.Pointer<ffi.Void>)>>('DeleteNodeByValueFromSplayTree');
  late final _DeleteNodeByValueFromSplayTree =
      _DeleteNodeByValueFromSplayTreePtr.asFunction<
          int Function(ffi.Pointer<SplayTreeInfo>, ffi.Pointer<ffi.Void>)>();

  int DeleteNodeFromSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _DeleteNodeFromSplayTree(
      arg0,
      arg1,
    );
  }

  late final _DeleteNodeFromSplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<SplayTreeInfo>,
              ffi.Pointer<ffi.Void>)>>('DeleteNodeFromSplayTree');
  late final _DeleteNodeFromSplayTree = _DeleteNodeFromSplayTreePtr.asFunction<
      int Function(ffi.Pointer<SplayTreeInfo>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> GetNextKeyInSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
  ) {
    return _GetNextKeyInSplayTree(
      arg0,
    );
  }

  late final _GetNextKeyInSplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<SplayTreeInfo>)>>('GetNextKeyInSplayTree');
  late final _GetNextKeyInSplayTree = _GetNextKeyInSplayTreePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<SplayTreeInfo>)>();

  ffi.Pointer<ffi.Void> GetNextValueInSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
  ) {
    return _GetNextValueInSplayTree(
      arg0,
    );
  }

  late final _GetNextValueInSplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<SplayTreeInfo>)>>('GetNextValueInSplayTree');
  late final _GetNextValueInSplayTree = _GetNextValueInSplayTreePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<SplayTreeInfo>)>();

  ffi.Pointer<ffi.Void> GetRootValueFromSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
  ) {
    return _GetRootValueFromSplayTree(
      arg0,
    );
  }

  late final _GetRootValueFromSplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<SplayTreeInfo>)>>('GetRootValueFromSplayTree');
  late final _GetRootValueFromSplayTree = _GetRootValueFromSplayTreePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<SplayTreeInfo>)>();

  ffi.Pointer<ffi.Void> GetValueFromSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _GetValueFromSplayTree(
      arg0,
      arg1,
    );
  }

  late final _GetValueFromSplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<SplayTreeInfo>,
              ffi.Pointer<ffi.Void>)>>('GetValueFromSplayTree');
  late final _GetValueFromSplayTree = _GetValueFromSplayTreePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<SplayTreeInfo>, ffi.Pointer<ffi.Void>)>();

  int CompareSplayTreeString(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _CompareSplayTreeString(
      arg0,
      arg1,
    );
  }

  late final _CompareSplayTreeStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CompareSplayTreeString');
  late final _CompareSplayTreeString = _CompareSplayTreeStringPtr.asFunction<
      int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  int CompareSplayTreeStringInfo(
    ffi.Pointer<ffi.Void> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _CompareSplayTreeStringInfo(
      arg0,
      arg1,
    );
  }

  late final _CompareSplayTreeStringInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>)>>('CompareSplayTreeStringInfo');
  late final _CompareSplayTreeStringInfo = _CompareSplayTreeStringInfoPtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<SplayTreeInfo> CloneSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _CloneSplayTree(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _CloneSplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SplayTreeInfo> Function(
              ffi.Pointer<SplayTreeInfo>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<ffi.Void>)>>)>>('CloneSplayTree');
  late final _CloneSplayTree = _CloneSplayTreePtr.asFunction<
      ffi.Pointer<SplayTreeInfo> Function(
          ffi.Pointer<SplayTreeInfo>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>)>();

  ffi.Pointer<SplayTreeInfo> DestroySplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
  ) {
    return _DestroySplayTree(
      arg0,
    );
  }

  late final _DestroySplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SplayTreeInfo> Function(
              ffi.Pointer<SplayTreeInfo>)>>('DestroySplayTree');
  late final _DestroySplayTree = _DestroySplayTreePtr.asFunction<
      ffi.Pointer<SplayTreeInfo> Function(ffi.Pointer<SplayTreeInfo>)>();

  ffi.Pointer<SplayTreeInfo> NewSplayTree(
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>
        arg0,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg1,
    ffi.Pointer<
            ffi.NativeFunction<
                ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>
        arg2,
  ) {
    return _NewSplayTree(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _NewSplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<SplayTreeInfo> Function(
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Int Function(
                          ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
              ffi.Pointer<
                  ffi.NativeFunction<
                      ffi.Pointer<ffi.Void> Function(
                          ffi.Pointer<ffi.Void>)>>)>>('NewSplayTree');
  late final _NewSplayTree = _NewSplayTreePtr.asFunction<
      ffi.Pointer<SplayTreeInfo> Function(
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Int Function(
                      ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>,
          ffi.Pointer<
              ffi.NativeFunction<
                  ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>>)>();

  int GetNumberOfNodesInSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
  ) {
    return _GetNumberOfNodesInSplayTree(
      arg0,
    );
  }

  late final _GetNumberOfNodesInSplayTreePtr = _lookup<
          ffi.NativeFunction<ffi.Size Function(ffi.Pointer<SplayTreeInfo>)>>(
      'GetNumberOfNodesInSplayTree');
  late final _GetNumberOfNodesInSplayTree = _GetNumberOfNodesInSplayTreePtr
      .asFunction<int Function(ffi.Pointer<SplayTreeInfo>)>();

  ffi.Pointer<ffi.Void> RemoveNodeByValueFromSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _RemoveNodeByValueFromSplayTree(
      arg0,
      arg1,
    );
  }

  late final _RemoveNodeByValueFromSplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<SplayTreeInfo>,
              ffi.Pointer<ffi.Void>)>>('RemoveNodeByValueFromSplayTree');
  late final _RemoveNodeByValueFromSplayTree =
      _RemoveNodeByValueFromSplayTreePtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<SplayTreeInfo>, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> RemoveNodeFromSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _RemoveNodeFromSplayTree(
      arg0,
      arg1,
    );
  }

  late final _RemoveNodeFromSplayTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<SplayTreeInfo>,
              ffi.Pointer<ffi.Void>)>>('RemoveNodeFromSplayTree');
  late final _RemoveNodeFromSplayTree = _RemoveNodeFromSplayTreePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<SplayTreeInfo>, ffi.Pointer<ffi.Void>)>();

  void ResetSplayTree(
    ffi.Pointer<SplayTreeInfo> arg0,
  ) {
    return _ResetSplayTree(
      arg0,
    );
  }

  late final _ResetSplayTreePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SplayTreeInfo>)>>(
      'ResetSplayTree');
  late final _ResetSplayTree = _ResetSplayTreePtr.asFunction<
      void Function(ffi.Pointer<SplayTreeInfo>)>();

  void ResetSplayTreeIterator(
    ffi.Pointer<SplayTreeInfo> arg0,
  ) {
    return _ResetSplayTreeIterator(
      arg0,
    );
  }

  late final _ResetSplayTreeIteratorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<SplayTreeInfo>)>>(
      'ResetSplayTreeIterator');
  late final _ResetSplayTreeIterator = _ResetSplayTreeIteratorPtr.asFunction<
      void Function(ffi.Pointer<SplayTreeInfo>)>();

  int InvokeStaticImageFilter(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<Image>> arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _InvokeStaticImageFilter(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _InvokeStaticImageFilterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('InvokeStaticImageFilter');
  late final _InvokeStaticImageFilter = _InvokeStaticImageFilterPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<Image>>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ExceptionInfo>)>();

  int RegisterStaticModule(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> exception,
  ) {
    return _RegisterStaticModule(
      arg0,
      exception,
    );
  }

  late final _RegisterStaticModulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('RegisterStaticModule');
  late final _RegisterStaticModule = _RegisterStaticModulePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  int UnregisterStaticModule(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _UnregisterStaticModule(
      arg0,
    );
  }

  late final _UnregisterStaticModulePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'UnregisterStaticModule');
  late final _UnregisterStaticModule = _UnregisterStaticModulePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  void RegisterStaticModules() {
    return _RegisterStaticModules();
  }

  late final _RegisterStaticModulesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('RegisterStaticModules');
  late final _RegisterStaticModules =
      _RegisterStaticModulesPtr.asFunction<void Function()>();

  void UnregisterStaticModules() {
    return _UnregisterStaticModules();
  }

  late final _UnregisterStaticModulesPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UnregisterStaticModules');
  late final _UnregisterStaticModules =
      _UnregisterStaticModulesPtr.asFunction<void Function()>();

  int RegisterAAIImage() {
    return _RegisterAAIImage();
  }

  late final _RegisterAAIImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterAAIImage');
  late final _RegisterAAIImage =
      _RegisterAAIImagePtr.asFunction<int Function()>();

  int RegisterARTImage() {
    return _RegisterARTImage();
  }

  late final _RegisterARTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterARTImage');
  late final _RegisterARTImage =
      _RegisterARTImagePtr.asFunction<int Function()>();

  int RegisterASHLARImage() {
    return _RegisterASHLARImage();
  }

  late final _RegisterASHLARImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterASHLARImage');
  late final _RegisterASHLARImage =
      _RegisterASHLARImagePtr.asFunction<int Function()>();

  int RegisterAVSImage() {
    return _RegisterAVSImage();
  }

  late final _RegisterAVSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterAVSImage');
  late final _RegisterAVSImage =
      _RegisterAVSImagePtr.asFunction<int Function()>();

  int RegisterBAYERImage() {
    return _RegisterBAYERImage();
  }

  late final _RegisterBAYERImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterBAYERImage');
  late final _RegisterBAYERImage =
      _RegisterBAYERImagePtr.asFunction<int Function()>();

  int RegisterBGRImage() {
    return _RegisterBGRImage();
  }

  late final _RegisterBGRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterBGRImage');
  late final _RegisterBGRImage =
      _RegisterBGRImagePtr.asFunction<int Function()>();

  int RegisterBMPImage() {
    return _RegisterBMPImage();
  }

  late final _RegisterBMPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterBMPImage');
  late final _RegisterBMPImage =
      _RegisterBMPImagePtr.asFunction<int Function()>();

  int RegisterBRAILLEImage() {
    return _RegisterBRAILLEImage();
  }

  late final _RegisterBRAILLEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterBRAILLEImage');
  late final _RegisterBRAILLEImage =
      _RegisterBRAILLEImagePtr.asFunction<int Function()>();

  int RegisterCALSImage() {
    return _RegisterCALSImage();
  }

  late final _RegisterCALSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterCALSImage');
  late final _RegisterCALSImage =
      _RegisterCALSImagePtr.asFunction<int Function()>();

  int RegisterCAPTIONImage() {
    return _RegisterCAPTIONImage();
  }

  late final _RegisterCAPTIONImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterCAPTIONImage');
  late final _RegisterCAPTIONImage =
      _RegisterCAPTIONImagePtr.asFunction<int Function()>();

  int RegisterCINImage() {
    return _RegisterCINImage();
  }

  late final _RegisterCINImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterCINImage');
  late final _RegisterCINImage =
      _RegisterCINImagePtr.asFunction<int Function()>();

  int RegisterCIPImage() {
    return _RegisterCIPImage();
  }

  late final _RegisterCIPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterCIPImage');
  late final _RegisterCIPImage =
      _RegisterCIPImagePtr.asFunction<int Function()>();

  int RegisterCLIPImage() {
    return _RegisterCLIPImage();
  }

  late final _RegisterCLIPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterCLIPImage');
  late final _RegisterCLIPImage =
      _RegisterCLIPImagePtr.asFunction<int Function()>();

  int RegisterCLIPBOARDImage() {
    return _RegisterCLIPBOARDImage();
  }

  late final _RegisterCLIPBOARDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'RegisterCLIPBOARDImage');
  late final _RegisterCLIPBOARDImage =
      _RegisterCLIPBOARDImagePtr.asFunction<int Function()>();

  int RegisterCMYKImage() {
    return _RegisterCMYKImage();
  }

  late final _RegisterCMYKImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterCMYKImage');
  late final _RegisterCMYKImage =
      _RegisterCMYKImagePtr.asFunction<int Function()>();

  int RegisterCUBEImage() {
    return _RegisterCUBEImage();
  }

  late final _RegisterCUBEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterCUBEImage');
  late final _RegisterCUBEImage =
      _RegisterCUBEImagePtr.asFunction<int Function()>();

  int RegisterCUTImage() {
    return _RegisterCUTImage();
  }

  late final _RegisterCUTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterCUTImage');
  late final _RegisterCUTImage =
      _RegisterCUTImagePtr.asFunction<int Function()>();

  int RegisterDCMImage() {
    return _RegisterDCMImage();
  }

  late final _RegisterDCMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterDCMImage');
  late final _RegisterDCMImage =
      _RegisterDCMImagePtr.asFunction<int Function()>();

  int RegisterDDSImage() {
    return _RegisterDDSImage();
  }

  late final _RegisterDDSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterDDSImage');
  late final _RegisterDDSImage =
      _RegisterDDSImagePtr.asFunction<int Function()>();

  int RegisterDEBUGImage() {
    return _RegisterDEBUGImage();
  }

  late final _RegisterDEBUGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterDEBUGImage');
  late final _RegisterDEBUGImage =
      _RegisterDEBUGImagePtr.asFunction<int Function()>();

  int RegisterDIBImage() {
    return _RegisterDIBImage();
  }

  late final _RegisterDIBImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterDIBImage');
  late final _RegisterDIBImage =
      _RegisterDIBImagePtr.asFunction<int Function()>();

  int RegisterDJVUImage() {
    return _RegisterDJVUImage();
  }

  late final _RegisterDJVUImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterDJVUImage');
  late final _RegisterDJVUImage =
      _RegisterDJVUImagePtr.asFunction<int Function()>();

  int RegisterDNGImage() {
    return _RegisterDNGImage();
  }

  late final _RegisterDNGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterDNGImage');
  late final _RegisterDNGImage =
      _RegisterDNGImagePtr.asFunction<int Function()>();

  int RegisterDPSImage() {
    return _RegisterDPSImage();
  }

  late final _RegisterDPSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterDPSImage');
  late final _RegisterDPSImage =
      _RegisterDPSImagePtr.asFunction<int Function()>();

  int RegisterDPXImage() {
    return _RegisterDPXImage();
  }

  late final _RegisterDPXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterDPXImage');
  late final _RegisterDPXImage =
      _RegisterDPXImagePtr.asFunction<int Function()>();

  int RegisterEMFImage() {
    return _RegisterEMFImage();
  }

  late final _RegisterEMFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterEMFImage');
  late final _RegisterEMFImage =
      _RegisterEMFImagePtr.asFunction<int Function()>();

  int RegisterEPTImage() {
    return _RegisterEPTImage();
  }

  late final _RegisterEPTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterEPTImage');
  late final _RegisterEPTImage =
      _RegisterEPTImagePtr.asFunction<int Function()>();

  int RegisterEXRImage() {
    return _RegisterEXRImage();
  }

  late final _RegisterEXRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterEXRImage');
  late final _RegisterEXRImage =
      _RegisterEXRImagePtr.asFunction<int Function()>();

  int RegisterFARBFELDImage() {
    return _RegisterFARBFELDImage();
  }

  late final _RegisterFARBFELDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterFARBFELDImage');
  late final _RegisterFARBFELDImage =
      _RegisterFARBFELDImagePtr.asFunction<int Function()>();

  int RegisterFAXImage() {
    return _RegisterFAXImage();
  }

  late final _RegisterFAXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterFAXImage');
  late final _RegisterFAXImage =
      _RegisterFAXImagePtr.asFunction<int Function()>();

  int RegisterFITSImage() {
    return _RegisterFITSImage();
  }

  late final _RegisterFITSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterFITSImage');
  late final _RegisterFITSImage =
      _RegisterFITSImagePtr.asFunction<int Function()>();

  int RegisterFL32Image() {
    return _RegisterFL32Image();
  }

  late final _RegisterFL32ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterFL32Image');
  late final _RegisterFL32Image =
      _RegisterFL32ImagePtr.asFunction<int Function()>();

  int RegisterFLIFImage() {
    return _RegisterFLIFImage();
  }

  late final _RegisterFLIFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterFLIFImage');
  late final _RegisterFLIFImage =
      _RegisterFLIFImagePtr.asFunction<int Function()>();

  int RegisterFPXImage() {
    return _RegisterFPXImage();
  }

  late final _RegisterFPXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterFPXImage');
  late final _RegisterFPXImage =
      _RegisterFPXImagePtr.asFunction<int Function()>();

  int RegisterFTXTImage() {
    return _RegisterFTXTImage();
  }

  late final _RegisterFTXTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterFTXTImage');
  late final _RegisterFTXTImage =
      _RegisterFTXTImagePtr.asFunction<int Function()>();

  int RegisterGIFImage() {
    return _RegisterGIFImage();
  }

  late final _RegisterGIFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterGIFImage');
  late final _RegisterGIFImage =
      _RegisterGIFImagePtr.asFunction<int Function()>();

  int RegisterGRADIENTImage() {
    return _RegisterGRADIENTImage();
  }

  late final _RegisterGRADIENTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterGRADIENTImage');
  late final _RegisterGRADIENTImage =
      _RegisterGRADIENTImagePtr.asFunction<int Function()>();

  int RegisterGRAYImage() {
    return _RegisterGRAYImage();
  }

  late final _RegisterGRAYImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterGRAYImage');
  late final _RegisterGRAYImage =
      _RegisterGRAYImagePtr.asFunction<int Function()>();

  int RegisterHALDImage() {
    return _RegisterHALDImage();
  }

  late final _RegisterHALDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterHALDImage');
  late final _RegisterHALDImage =
      _RegisterHALDImagePtr.asFunction<int Function()>();

  int RegisterHDRImage() {
    return _RegisterHDRImage();
  }

  late final _RegisterHDRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterHDRImage');
  late final _RegisterHDRImage =
      _RegisterHDRImagePtr.asFunction<int Function()>();

  int RegisterHEICImage() {
    return _RegisterHEICImage();
  }

  late final _RegisterHEICImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterHEICImage');
  late final _RegisterHEICImage =
      _RegisterHEICImagePtr.asFunction<int Function()>();

  int RegisterHISTOGRAMImage() {
    return _RegisterHISTOGRAMImage();
  }

  late final _RegisterHISTOGRAMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'RegisterHISTOGRAMImage');
  late final _RegisterHISTOGRAMImage =
      _RegisterHISTOGRAMImagePtr.asFunction<int Function()>();

  int RegisterHRZImage() {
    return _RegisterHRZImage();
  }

  late final _RegisterHRZImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterHRZImage');
  late final _RegisterHRZImage =
      _RegisterHRZImagePtr.asFunction<int Function()>();

  int RegisterHTMLImage() {
    return _RegisterHTMLImage();
  }

  late final _RegisterHTMLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterHTMLImage');
  late final _RegisterHTMLImage =
      _RegisterHTMLImagePtr.asFunction<int Function()>();

  int RegisterICONImage() {
    return _RegisterICONImage();
  }

  late final _RegisterICONImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterICONImage');
  late final _RegisterICONImage =
      _RegisterICONImagePtr.asFunction<int Function()>();

  int RegisterINFOImage() {
    return _RegisterINFOImage();
  }

  late final _RegisterINFOImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterINFOImage');
  late final _RegisterINFOImage =
      _RegisterINFOImagePtr.asFunction<int Function()>();

  int RegisterINLINEImage() {
    return _RegisterINLINEImage();
  }

  late final _RegisterINLINEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterINLINEImage');
  late final _RegisterINLINEImage =
      _RegisterINLINEImagePtr.asFunction<int Function()>();

  int RegisterIPLImage() {
    return _RegisterIPLImage();
  }

  late final _RegisterIPLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterIPLImage');
  late final _RegisterIPLImage =
      _RegisterIPLImagePtr.asFunction<int Function()>();

  int RegisterJBIGImage() {
    return _RegisterJBIGImage();
  }

  late final _RegisterJBIGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterJBIGImage');
  late final _RegisterJBIGImage =
      _RegisterJBIGImagePtr.asFunction<int Function()>();

  int RegisterJNXImage() {
    return _RegisterJNXImage();
  }

  late final _RegisterJNXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterJNXImage');
  late final _RegisterJNXImage =
      _RegisterJNXImagePtr.asFunction<int Function()>();

  int RegisterJPEGImage() {
    return _RegisterJPEGImage();
  }

  late final _RegisterJPEGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterJPEGImage');
  late final _RegisterJPEGImage =
      _RegisterJPEGImagePtr.asFunction<int Function()>();

  int RegisterJSONImage() {
    return _RegisterJSONImage();
  }

  late final _RegisterJSONImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterJSONImage');
  late final _RegisterJSONImage =
      _RegisterJSONImagePtr.asFunction<int Function()>();

  int RegisterJP2Image() {
    return _RegisterJP2Image();
  }

  late final _RegisterJP2ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterJP2Image');
  late final _RegisterJP2Image =
      _RegisterJP2ImagePtr.asFunction<int Function()>();

  int RegisterJXLImage() {
    return _RegisterJXLImage();
  }

  late final _RegisterJXLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterJXLImage');
  late final _RegisterJXLImage =
      _RegisterJXLImagePtr.asFunction<int Function()>();

  int RegisterLABELImage() {
    return _RegisterLABELImage();
  }

  late final _RegisterLABELImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterLABELImage');
  late final _RegisterLABELImage =
      _RegisterLABELImagePtr.asFunction<int Function()>();

  int RegisterMACImage() {
    return _RegisterMACImage();
  }

  late final _RegisterMACImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMACImage');
  late final _RegisterMACImage =
      _RegisterMACImagePtr.asFunction<int Function()>();

  int RegisterMAGICKImage() {
    return _RegisterMAGICKImage();
  }

  late final _RegisterMAGICKImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMAGICKImage');
  late final _RegisterMAGICKImage =
      _RegisterMAGICKImagePtr.asFunction<int Function()>();

  int RegisterMAPImage() {
    return _RegisterMAPImage();
  }

  late final _RegisterMAPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMAPImage');
  late final _RegisterMAPImage =
      _RegisterMAPImagePtr.asFunction<int Function()>();

  int RegisterMASKImage() {
    return _RegisterMASKImage();
  }

  late final _RegisterMASKImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMASKImage');
  late final _RegisterMASKImage =
      _RegisterMASKImagePtr.asFunction<int Function()>();

  int RegisterMATImage() {
    return _RegisterMATImage();
  }

  late final _RegisterMATImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMATImage');
  late final _RegisterMATImage =
      _RegisterMATImagePtr.asFunction<int Function()>();

  int RegisterMATTEImage() {
    return _RegisterMATTEImage();
  }

  late final _RegisterMATTEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMATTEImage');
  late final _RegisterMATTEImage =
      _RegisterMATTEImagePtr.asFunction<int Function()>();

  int RegisterMETAImage() {
    return _RegisterMETAImage();
  }

  late final _RegisterMETAImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMETAImage');
  late final _RegisterMETAImage =
      _RegisterMETAImagePtr.asFunction<int Function()>();

  int RegisterMIFFImage() {
    return _RegisterMIFFImage();
  }

  late final _RegisterMIFFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMIFFImage');
  late final _RegisterMIFFImage =
      _RegisterMIFFImagePtr.asFunction<int Function()>();

  int RegisterMONOImage() {
    return _RegisterMONOImage();
  }

  late final _RegisterMONOImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMONOImage');
  late final _RegisterMONOImage =
      _RegisterMONOImagePtr.asFunction<int Function()>();

  int RegisterMPCImage() {
    return _RegisterMPCImage();
  }

  late final _RegisterMPCImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMPCImage');
  late final _RegisterMPCImage =
      _RegisterMPCImagePtr.asFunction<int Function()>();

  int RegisterMPRImage() {
    return _RegisterMPRImage();
  }

  late final _RegisterMPRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMPRImage');
  late final _RegisterMPRImage =
      _RegisterMPRImagePtr.asFunction<int Function()>();

  int RegisterMSLImage() {
    return _RegisterMSLImage();
  }

  late final _RegisterMSLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMSLImage');
  late final _RegisterMSLImage =
      _RegisterMSLImagePtr.asFunction<int Function()>();

  int RegisterMTVImage() {
    return _RegisterMTVImage();
  }

  late final _RegisterMTVImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMTVImage');
  late final _RegisterMTVImage =
      _RegisterMTVImagePtr.asFunction<int Function()>();

  int RegisterMVGImage() {
    return _RegisterMVGImage();
  }

  late final _RegisterMVGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterMVGImage');
  late final _RegisterMVGImage =
      _RegisterMVGImagePtr.asFunction<int Function()>();

  int RegisterNULLImage() {
    return _RegisterNULLImage();
  }

  late final _RegisterNULLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterNULLImage');
  late final _RegisterNULLImage =
      _RegisterNULLImagePtr.asFunction<int Function()>();

  int RegisterORAImage() {
    return _RegisterORAImage();
  }

  late final _RegisterORAImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterORAImage');
  late final _RegisterORAImage =
      _RegisterORAImagePtr.asFunction<int Function()>();

  int RegisterOTBImage() {
    return _RegisterOTBImage();
  }

  late final _RegisterOTBImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterOTBImage');
  late final _RegisterOTBImage =
      _RegisterOTBImagePtr.asFunction<int Function()>();

  int RegisterPALMImage() {
    return _RegisterPALMImage();
  }

  late final _RegisterPALMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPALMImage');
  late final _RegisterPALMImage =
      _RegisterPALMImagePtr.asFunction<int Function()>();

  int RegisterPANGOImage() {
    return _RegisterPANGOImage();
  }

  late final _RegisterPANGOImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPANGOImage');
  late final _RegisterPANGOImage =
      _RegisterPANGOImagePtr.asFunction<int Function()>();

  int RegisterPATTERNImage() {
    return _RegisterPATTERNImage();
  }

  late final _RegisterPATTERNImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPATTERNImage');
  late final _RegisterPATTERNImage =
      _RegisterPATTERNImagePtr.asFunction<int Function()>();

  int RegisterPCDImage() {
    return _RegisterPCDImage();
  }

  late final _RegisterPCDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPCDImage');
  late final _RegisterPCDImage =
      _RegisterPCDImagePtr.asFunction<int Function()>();

  int RegisterPCLImage() {
    return _RegisterPCLImage();
  }

  late final _RegisterPCLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPCLImage');
  late final _RegisterPCLImage =
      _RegisterPCLImagePtr.asFunction<int Function()>();

  int RegisterPCXImage() {
    return _RegisterPCXImage();
  }

  late final _RegisterPCXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPCXImage');
  late final _RegisterPCXImage =
      _RegisterPCXImagePtr.asFunction<int Function()>();

  int RegisterPDBImage() {
    return _RegisterPDBImage();
  }

  late final _RegisterPDBImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPDBImage');
  late final _RegisterPDBImage =
      _RegisterPDBImagePtr.asFunction<int Function()>();

  int RegisterPDFImage() {
    return _RegisterPDFImage();
  }

  late final _RegisterPDFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPDFImage');
  late final _RegisterPDFImage =
      _RegisterPDFImagePtr.asFunction<int Function()>();

  int RegisterPESImage() {
    return _RegisterPESImage();
  }

  late final _RegisterPESImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPESImage');
  late final _RegisterPESImage =
      _RegisterPESImagePtr.asFunction<int Function()>();

  int RegisterPGXImage() {
    return _RegisterPGXImage();
  }

  late final _RegisterPGXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPGXImage');
  late final _RegisterPGXImage =
      _RegisterPGXImagePtr.asFunction<int Function()>();

  int RegisterPICTImage() {
    return _RegisterPICTImage();
  }

  late final _RegisterPICTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPICTImage');
  late final _RegisterPICTImage =
      _RegisterPICTImagePtr.asFunction<int Function()>();

  int RegisterPIXImage() {
    return _RegisterPIXImage();
  }

  late final _RegisterPIXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPIXImage');
  late final _RegisterPIXImage =
      _RegisterPIXImagePtr.asFunction<int Function()>();

  int RegisterPLASMAImage() {
    return _RegisterPLASMAImage();
  }

  late final _RegisterPLASMAImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPLASMAImage');
  late final _RegisterPLASMAImage =
      _RegisterPLASMAImagePtr.asFunction<int Function()>();

  int RegisterPNGImage() {
    return _RegisterPNGImage();
  }

  late final _RegisterPNGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPNGImage');
  late final _RegisterPNGImage =
      _RegisterPNGImagePtr.asFunction<int Function()>();

  int RegisterPNMImage() {
    return _RegisterPNMImage();
  }

  late final _RegisterPNMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPNMImage');
  late final _RegisterPNMImage =
      _RegisterPNMImagePtr.asFunction<int Function()>();

  int RegisterPSImage() {
    return _RegisterPSImage();
  }

  late final _RegisterPSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPSImage');
  late final _RegisterPSImage =
      _RegisterPSImagePtr.asFunction<int Function()>();

  int RegisterPS2Image() {
    return _RegisterPS2Image();
  }

  late final _RegisterPS2ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPS2Image');
  late final _RegisterPS2Image =
      _RegisterPS2ImagePtr.asFunction<int Function()>();

  int RegisterPS3Image() {
    return _RegisterPS3Image();
  }

  late final _RegisterPS3ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPS3Image');
  late final _RegisterPS3Image =
      _RegisterPS3ImagePtr.asFunction<int Function()>();

  int RegisterPSDImage() {
    return _RegisterPSDImage();
  }

  late final _RegisterPSDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPSDImage');
  late final _RegisterPSDImage =
      _RegisterPSDImagePtr.asFunction<int Function()>();

  int RegisterPWPImage() {
    return _RegisterPWPImage();
  }

  late final _RegisterPWPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterPWPImage');
  late final _RegisterPWPImage =
      _RegisterPWPImagePtr.asFunction<int Function()>();

  int RegisterQOIImage() {
    return _RegisterQOIImage();
  }

  late final _RegisterQOIImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterQOIImage');
  late final _RegisterQOIImage =
      _RegisterQOIImagePtr.asFunction<int Function()>();

  int RegisterRAWImage() {
    return _RegisterRAWImage();
  }

  late final _RegisterRAWImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterRAWImage');
  late final _RegisterRAWImage =
      _RegisterRAWImagePtr.asFunction<int Function()>();

  int RegisterRGBImage() {
    return _RegisterRGBImage();
  }

  late final _RegisterRGBImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterRGBImage');
  late final _RegisterRGBImage =
      _RegisterRGBImagePtr.asFunction<int Function()>();

  int RegisterRGFImage() {
    return _RegisterRGFImage();
  }

  late final _RegisterRGFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterRGFImage');
  late final _RegisterRGFImage =
      _RegisterRGFImagePtr.asFunction<int Function()>();

  int RegisterRLAImage() {
    return _RegisterRLAImage();
  }

  late final _RegisterRLAImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterRLAImage');
  late final _RegisterRLAImage =
      _RegisterRLAImagePtr.asFunction<int Function()>();

  int RegisterRLEImage() {
    return _RegisterRLEImage();
  }

  late final _RegisterRLEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterRLEImage');
  late final _RegisterRLEImage =
      _RegisterRLEImagePtr.asFunction<int Function()>();

  int RegisterSCRImage() {
    return _RegisterSCRImage();
  }

  late final _RegisterSCRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterSCRImage');
  late final _RegisterSCRImage =
      _RegisterSCRImagePtr.asFunction<int Function()>();

  int RegisterSCREENSHOTImage() {
    return _RegisterSCREENSHOTImage();
  }

  late final _RegisterSCREENSHOTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'RegisterSCREENSHOTImage');
  late final _RegisterSCREENSHOTImage =
      _RegisterSCREENSHOTImagePtr.asFunction<int Function()>();

  int RegisterSCTImage() {
    return _RegisterSCTImage();
  }

  late final _RegisterSCTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterSCTImage');
  late final _RegisterSCTImage =
      _RegisterSCTImagePtr.asFunction<int Function()>();

  int RegisterSFWImage() {
    return _RegisterSFWImage();
  }

  late final _RegisterSFWImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterSFWImage');
  late final _RegisterSFWImage =
      _RegisterSFWImagePtr.asFunction<int Function()>();

  int RegisterSGIImage() {
    return _RegisterSGIImage();
  }

  late final _RegisterSGIImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterSGIImage');
  late final _RegisterSGIImage =
      _RegisterSGIImagePtr.asFunction<int Function()>();

  int RegisterSIXELImage() {
    return _RegisterSIXELImage();
  }

  late final _RegisterSIXELImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterSIXELImage');
  late final _RegisterSIXELImage =
      _RegisterSIXELImagePtr.asFunction<int Function()>();

  int RegisterSTEGANOImage() {
    return _RegisterSTEGANOImage();
  }

  late final _RegisterSTEGANOImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterSTEGANOImage');
  late final _RegisterSTEGANOImage =
      _RegisterSTEGANOImagePtr.asFunction<int Function()>();

  int RegisterSTRIMGImage() {
    return _RegisterSTRIMGImage();
  }

  late final _RegisterSTRIMGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterSTRIMGImage');
  late final _RegisterSTRIMGImage =
      _RegisterSTRIMGImagePtr.asFunction<int Function()>();

  int RegisterSUNImage() {
    return _RegisterSUNImage();
  }

  late final _RegisterSUNImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterSUNImage');
  late final _RegisterSUNImage =
      _RegisterSUNImagePtr.asFunction<int Function()>();

  int RegisterSVGImage() {
    return _RegisterSVGImage();
  }

  late final _RegisterSVGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterSVGImage');
  late final _RegisterSVGImage =
      _RegisterSVGImagePtr.asFunction<int Function()>();

  int RegisterTGAImage() {
    return _RegisterTGAImage();
  }

  late final _RegisterTGAImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterTGAImage');
  late final _RegisterTGAImage =
      _RegisterTGAImagePtr.asFunction<int Function()>();

  int RegisterTHUMBNAILImage() {
    return _RegisterTHUMBNAILImage();
  }

  late final _RegisterTHUMBNAILImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>(
          'RegisterTHUMBNAILImage');
  late final _RegisterTHUMBNAILImage =
      _RegisterTHUMBNAILImagePtr.asFunction<int Function()>();

  int RegisterTIFFImage() {
    return _RegisterTIFFImage();
  }

  late final _RegisterTIFFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterTIFFImage');
  late final _RegisterTIFFImage =
      _RegisterTIFFImagePtr.asFunction<int Function()>();

  int RegisterTILEImage() {
    return _RegisterTILEImage();
  }

  late final _RegisterTILEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterTILEImage');
  late final _RegisterTILEImage =
      _RegisterTILEImagePtr.asFunction<int Function()>();

  int RegisterTIMImage() {
    return _RegisterTIMImage();
  }

  late final _RegisterTIMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterTIMImage');
  late final _RegisterTIMImage =
      _RegisterTIMImagePtr.asFunction<int Function()>();

  int RegisterTIM2Image() {
    return _RegisterTIM2Image();
  }

  late final _RegisterTIM2ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterTIM2Image');
  late final _RegisterTIM2Image =
      _RegisterTIM2ImagePtr.asFunction<int Function()>();

  int RegisterTTFImage() {
    return _RegisterTTFImage();
  }

  late final _RegisterTTFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterTTFImage');
  late final _RegisterTTFImage =
      _RegisterTTFImagePtr.asFunction<int Function()>();

  int RegisterTXTImage() {
    return _RegisterTXTImage();
  }

  late final _RegisterTXTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterTXTImage');
  late final _RegisterTXTImage =
      _RegisterTXTImagePtr.asFunction<int Function()>();

  int RegisterUILImage() {
    return _RegisterUILImage();
  }

  late final _RegisterUILImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterUILImage');
  late final _RegisterUILImage =
      _RegisterUILImagePtr.asFunction<int Function()>();

  int RegisterURLImage() {
    return _RegisterURLImage();
  }

  late final _RegisterURLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterURLImage');
  late final _RegisterURLImage =
      _RegisterURLImagePtr.asFunction<int Function()>();

  int RegisterUYVYImage() {
    return _RegisterUYVYImage();
  }

  late final _RegisterUYVYImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterUYVYImage');
  late final _RegisterUYVYImage =
      _RegisterUYVYImagePtr.asFunction<int Function()>();

  int RegisterVICARImage() {
    return _RegisterVICARImage();
  }

  late final _RegisterVICARImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterVICARImage');
  late final _RegisterVICARImage =
      _RegisterVICARImagePtr.asFunction<int Function()>();

  int RegisterVIDImage() {
    return _RegisterVIDImage();
  }

  late final _RegisterVIDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterVIDImage');
  late final _RegisterVIDImage =
      _RegisterVIDImagePtr.asFunction<int Function()>();

  int RegisterVIDEOImage() {
    return _RegisterVIDEOImage();
  }

  late final _RegisterVIDEOImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterVIDEOImage');
  late final _RegisterVIDEOImage =
      _RegisterVIDEOImagePtr.asFunction<int Function()>();

  int RegisterVIFFImage() {
    return _RegisterVIFFImage();
  }

  late final _RegisterVIFFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterVIFFImage');
  late final _RegisterVIFFImage =
      _RegisterVIFFImagePtr.asFunction<int Function()>();

  int RegisterVIPSImage() {
    return _RegisterVIPSImage();
  }

  late final _RegisterVIPSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterVIPSImage');
  late final _RegisterVIPSImage =
      _RegisterVIPSImagePtr.asFunction<int Function()>();

  int RegisterWBMPImage() {
    return _RegisterWBMPImage();
  }

  late final _RegisterWBMPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterWBMPImage');
  late final _RegisterWBMPImage =
      _RegisterWBMPImagePtr.asFunction<int Function()>();

  int RegisterWEBPImage() {
    return _RegisterWEBPImage();
  }

  late final _RegisterWEBPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterWEBPImage');
  late final _RegisterWEBPImage =
      _RegisterWEBPImagePtr.asFunction<int Function()>();

  int RegisterWMFImage() {
    return _RegisterWMFImage();
  }

  late final _RegisterWMFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterWMFImage');
  late final _RegisterWMFImage =
      _RegisterWMFImagePtr.asFunction<int Function()>();

  int RegisterWPGImage() {
    return _RegisterWPGImage();
  }

  late final _RegisterWPGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterWPGImage');
  late final _RegisterWPGImage =
      _RegisterWPGImagePtr.asFunction<int Function()>();

  int RegisterXImage() {
    return _RegisterXImage();
  }

  late final _RegisterXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterXImage');
  late final _RegisterXImage = _RegisterXImagePtr.asFunction<int Function()>();

  int RegisterXBMImage() {
    return _RegisterXBMImage();
  }

  late final _RegisterXBMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterXBMImage');
  late final _RegisterXBMImage =
      _RegisterXBMImagePtr.asFunction<int Function()>();

  int RegisterXCImage() {
    return _RegisterXCImage();
  }

  late final _RegisterXCImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterXCImage');
  late final _RegisterXCImage =
      _RegisterXCImagePtr.asFunction<int Function()>();

  int RegisterXCFImage() {
    return _RegisterXCFImage();
  }

  late final _RegisterXCFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterXCFImage');
  late final _RegisterXCFImage =
      _RegisterXCFImagePtr.asFunction<int Function()>();

  int RegisterXPMImage() {
    return _RegisterXPMImage();
  }

  late final _RegisterXPMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterXPMImage');
  late final _RegisterXPMImage =
      _RegisterXPMImagePtr.asFunction<int Function()>();

  int RegisterXPSImage() {
    return _RegisterXPSImage();
  }

  late final _RegisterXPSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterXPSImage');
  late final _RegisterXPSImage =
      _RegisterXPSImagePtr.asFunction<int Function()>();

  int RegisterXWDImage() {
    return _RegisterXWDImage();
  }

  late final _RegisterXWDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterXWDImage');
  late final _RegisterXWDImage =
      _RegisterXWDImagePtr.asFunction<int Function()>();

  int RegisterYAMLImage() {
    return _RegisterYAMLImage();
  }

  late final _RegisterYAMLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterYAMLImage');
  late final _RegisterYAMLImage =
      _RegisterYAMLImagePtr.asFunction<int Function()>();

  int RegisterYCBCRImage() {
    return _RegisterYCBCRImage();
  }

  late final _RegisterYCBCRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterYCBCRImage');
  late final _RegisterYCBCRImage =
      _RegisterYCBCRImagePtr.asFunction<int Function()>();

  int RegisterYUVImage() {
    return _RegisterYUVImage();
  }

  late final _RegisterYUVImagePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('RegisterYUVImage');
  late final _RegisterYUVImage =
      _RegisterYUVImagePtr.asFunction<int Function()>();

  void UnregisterAAIImage() {
    return _UnregisterAAIImage();
  }

  late final _UnregisterAAIImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterAAIImage');
  late final _UnregisterAAIImage =
      _UnregisterAAIImagePtr.asFunction<void Function()>();

  void UnregisterARTImage() {
    return _UnregisterARTImage();
  }

  late final _UnregisterARTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterARTImage');
  late final _UnregisterARTImage =
      _UnregisterARTImagePtr.asFunction<void Function()>();

  void UnregisterASHLARImage() {
    return _UnregisterASHLARImage();
  }

  late final _UnregisterASHLARImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterASHLARImage');
  late final _UnregisterASHLARImage =
      _UnregisterASHLARImagePtr.asFunction<void Function()>();

  void UnregisterAVSImage() {
    return _UnregisterAVSImage();
  }

  late final _UnregisterAVSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterAVSImage');
  late final _UnregisterAVSImage =
      _UnregisterAVSImagePtr.asFunction<void Function()>();

  void UnregisterBAYERImage() {
    return _UnregisterBAYERImage();
  }

  late final _UnregisterBAYERImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterBAYERImage');
  late final _UnregisterBAYERImage =
      _UnregisterBAYERImagePtr.asFunction<void Function()>();

  void UnregisterBGRImage() {
    return _UnregisterBGRImage();
  }

  late final _UnregisterBGRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterBGRImage');
  late final _UnregisterBGRImage =
      _UnregisterBGRImagePtr.asFunction<void Function()>();

  void UnregisterBMPImage() {
    return _UnregisterBMPImage();
  }

  late final _UnregisterBMPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterBMPImage');
  late final _UnregisterBMPImage =
      _UnregisterBMPImagePtr.asFunction<void Function()>();

  void UnregisterBRAILLEImage() {
    return _UnregisterBRAILLEImage();
  }

  late final _UnregisterBRAILLEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UnregisterBRAILLEImage');
  late final _UnregisterBRAILLEImage =
      _UnregisterBRAILLEImagePtr.asFunction<void Function()>();

  void UnregisterCALSImage() {
    return _UnregisterCALSImage();
  }

  late final _UnregisterCALSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterCALSImage');
  late final _UnregisterCALSImage =
      _UnregisterCALSImagePtr.asFunction<void Function()>();

  void UnregisterCAPTIONImage() {
    return _UnregisterCAPTIONImage();
  }

  late final _UnregisterCAPTIONImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UnregisterCAPTIONImage');
  late final _UnregisterCAPTIONImage =
      _UnregisterCAPTIONImagePtr.asFunction<void Function()>();

  void UnregisterCINImage() {
    return _UnregisterCINImage();
  }

  late final _UnregisterCINImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterCINImage');
  late final _UnregisterCINImage =
      _UnregisterCINImagePtr.asFunction<void Function()>();

  void UnregisterCIPImage() {
    return _UnregisterCIPImage();
  }

  late final _UnregisterCIPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterCIPImage');
  late final _UnregisterCIPImage =
      _UnregisterCIPImagePtr.asFunction<void Function()>();

  void UnregisterCLIPImage() {
    return _UnregisterCLIPImage();
  }

  late final _UnregisterCLIPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterCLIPImage');
  late final _UnregisterCLIPImage =
      _UnregisterCLIPImagePtr.asFunction<void Function()>();

  void UnregisterCLIPBOARDImage() {
    return _UnregisterCLIPBOARDImage();
  }

  late final _UnregisterCLIPBOARDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UnregisterCLIPBOARDImage');
  late final _UnregisterCLIPBOARDImage =
      _UnregisterCLIPBOARDImagePtr.asFunction<void Function()>();

  void UnregisterCMYKImage() {
    return _UnregisterCMYKImage();
  }

  late final _UnregisterCMYKImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterCMYKImage');
  late final _UnregisterCMYKImage =
      _UnregisterCMYKImagePtr.asFunction<void Function()>();

  void UnregisterCUBEImage() {
    return _UnregisterCUBEImage();
  }

  late final _UnregisterCUBEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterCUBEImage');
  late final _UnregisterCUBEImage =
      _UnregisterCUBEImagePtr.asFunction<void Function()>();

  void UnregisterCUTImage() {
    return _UnregisterCUTImage();
  }

  late final _UnregisterCUTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterCUTImage');
  late final _UnregisterCUTImage =
      _UnregisterCUTImagePtr.asFunction<void Function()>();

  void UnregisterDCMImage() {
    return _UnregisterDCMImage();
  }

  late final _UnregisterDCMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterDCMImage');
  late final _UnregisterDCMImage =
      _UnregisterDCMImagePtr.asFunction<void Function()>();

  void UnregisterDDSImage() {
    return _UnregisterDDSImage();
  }

  late final _UnregisterDDSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterDDSImage');
  late final _UnregisterDDSImage =
      _UnregisterDDSImagePtr.asFunction<void Function()>();

  void UnregisterDEBUGImage() {
    return _UnregisterDEBUGImage();
  }

  late final _UnregisterDEBUGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterDEBUGImage');
  late final _UnregisterDEBUGImage =
      _UnregisterDEBUGImagePtr.asFunction<void Function()>();

  void UnregisterDIBImage() {
    return _UnregisterDIBImage();
  }

  late final _UnregisterDIBImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterDIBImage');
  late final _UnregisterDIBImage =
      _UnregisterDIBImagePtr.asFunction<void Function()>();

  void UnregisterDJVUImage() {
    return _UnregisterDJVUImage();
  }

  late final _UnregisterDJVUImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterDJVUImage');
  late final _UnregisterDJVUImage =
      _UnregisterDJVUImagePtr.asFunction<void Function()>();

  void UnregisterDNGImage() {
    return _UnregisterDNGImage();
  }

  late final _UnregisterDNGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterDNGImage');
  late final _UnregisterDNGImage =
      _UnregisterDNGImagePtr.asFunction<void Function()>();

  void UnregisterDPSImage() {
    return _UnregisterDPSImage();
  }

  late final _UnregisterDPSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterDPSImage');
  late final _UnregisterDPSImage =
      _UnregisterDPSImagePtr.asFunction<void Function()>();

  void UnregisterDPXImage() {
    return _UnregisterDPXImage();
  }

  late final _UnregisterDPXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterDPXImage');
  late final _UnregisterDPXImage =
      _UnregisterDPXImagePtr.asFunction<void Function()>();

  void UnregisterEMFImage() {
    return _UnregisterEMFImage();
  }

  late final _UnregisterEMFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterEMFImage');
  late final _UnregisterEMFImage =
      _UnregisterEMFImagePtr.asFunction<void Function()>();

  void UnregisterEPTImage() {
    return _UnregisterEPTImage();
  }

  late final _UnregisterEPTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterEPTImage');
  late final _UnregisterEPTImage =
      _UnregisterEPTImagePtr.asFunction<void Function()>();

  void UnregisterEXRImage() {
    return _UnregisterEXRImage();
  }

  late final _UnregisterEXRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterEXRImage');
  late final _UnregisterEXRImage =
      _UnregisterEXRImagePtr.asFunction<void Function()>();

  void UnregisterFARBFELDImage() {
    return _UnregisterFARBFELDImage();
  }

  late final _UnregisterFARBFELDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UnregisterFARBFELDImage');
  late final _UnregisterFARBFELDImage =
      _UnregisterFARBFELDImagePtr.asFunction<void Function()>();

  void UnregisterFAXImage() {
    return _UnregisterFAXImage();
  }

  late final _UnregisterFAXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterFAXImage');
  late final _UnregisterFAXImage =
      _UnregisterFAXImagePtr.asFunction<void Function()>();

  void UnregisterFITSImage() {
    return _UnregisterFITSImage();
  }

  late final _UnregisterFITSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterFITSImage');
  late final _UnregisterFITSImage =
      _UnregisterFITSImagePtr.asFunction<void Function()>();

  void UnregisterFL32Image() {
    return _UnregisterFL32Image();
  }

  late final _UnregisterFL32ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterFL32Image');
  late final _UnregisterFL32Image =
      _UnregisterFL32ImagePtr.asFunction<void Function()>();

  void UnregisterFLIFImage() {
    return _UnregisterFLIFImage();
  }

  late final _UnregisterFLIFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterFLIFImage');
  late final _UnregisterFLIFImage =
      _UnregisterFLIFImagePtr.asFunction<void Function()>();

  void UnregisterFPXImage() {
    return _UnregisterFPXImage();
  }

  late final _UnregisterFPXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterFPXImage');
  late final _UnregisterFPXImage =
      _UnregisterFPXImagePtr.asFunction<void Function()>();

  void UnregisterFTXTImage() {
    return _UnregisterFTXTImage();
  }

  late final _UnregisterFTXTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterFTXTImage');
  late final _UnregisterFTXTImage =
      _UnregisterFTXTImagePtr.asFunction<void Function()>();

  void UnregisterGIFImage() {
    return _UnregisterGIFImage();
  }

  late final _UnregisterGIFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterGIFImage');
  late final _UnregisterGIFImage =
      _UnregisterGIFImagePtr.asFunction<void Function()>();

  void UnregisterGRADIENTImage() {
    return _UnregisterGRADIENTImage();
  }

  late final _UnregisterGRADIENTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UnregisterGRADIENTImage');
  late final _UnregisterGRADIENTImage =
      _UnregisterGRADIENTImagePtr.asFunction<void Function()>();

  void UnregisterGRAYImage() {
    return _UnregisterGRAYImage();
  }

  late final _UnregisterGRAYImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterGRAYImage');
  late final _UnregisterGRAYImage =
      _UnregisterGRAYImagePtr.asFunction<void Function()>();

  void UnregisterHALDImage() {
    return _UnregisterHALDImage();
  }

  late final _UnregisterHALDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterHALDImage');
  late final _UnregisterHALDImage =
      _UnregisterHALDImagePtr.asFunction<void Function()>();

  void UnregisterHDRImage() {
    return _UnregisterHDRImage();
  }

  late final _UnregisterHDRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterHDRImage');
  late final _UnregisterHDRImage =
      _UnregisterHDRImagePtr.asFunction<void Function()>();

  void UnregisterHEICImage() {
    return _UnregisterHEICImage();
  }

  late final _UnregisterHEICImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterHEICImage');
  late final _UnregisterHEICImage =
      _UnregisterHEICImagePtr.asFunction<void Function()>();

  void UnregisterHISTOGRAMImage() {
    return _UnregisterHISTOGRAMImage();
  }

  late final _UnregisterHISTOGRAMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UnregisterHISTOGRAMImage');
  late final _UnregisterHISTOGRAMImage =
      _UnregisterHISTOGRAMImagePtr.asFunction<void Function()>();

  void UnregisterHRZImage() {
    return _UnregisterHRZImage();
  }

  late final _UnregisterHRZImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterHRZImage');
  late final _UnregisterHRZImage =
      _UnregisterHRZImagePtr.asFunction<void Function()>();

  void UnregisterHTMLImage() {
    return _UnregisterHTMLImage();
  }

  late final _UnregisterHTMLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterHTMLImage');
  late final _UnregisterHTMLImage =
      _UnregisterHTMLImagePtr.asFunction<void Function()>();

  void UnregisterICONImage() {
    return _UnregisterICONImage();
  }

  late final _UnregisterICONImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterICONImage');
  late final _UnregisterICONImage =
      _UnregisterICONImagePtr.asFunction<void Function()>();

  void UnregisterINFOImage() {
    return _UnregisterINFOImage();
  }

  late final _UnregisterINFOImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterINFOImage');
  late final _UnregisterINFOImage =
      _UnregisterINFOImagePtr.asFunction<void Function()>();

  void UnregisterINLINEImage() {
    return _UnregisterINLINEImage();
  }

  late final _UnregisterINLINEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterINLINEImage');
  late final _UnregisterINLINEImage =
      _UnregisterINLINEImagePtr.asFunction<void Function()>();

  void UnregisterIPLImage() {
    return _UnregisterIPLImage();
  }

  late final _UnregisterIPLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterIPLImage');
  late final _UnregisterIPLImage =
      _UnregisterIPLImagePtr.asFunction<void Function()>();

  void UnregisterJBIGImage() {
    return _UnregisterJBIGImage();
  }

  late final _UnregisterJBIGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterJBIGImage');
  late final _UnregisterJBIGImage =
      _UnregisterJBIGImagePtr.asFunction<void Function()>();

  void UnregisterJNXImage() {
    return _UnregisterJNXImage();
  }

  late final _UnregisterJNXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterJNXImage');
  late final _UnregisterJNXImage =
      _UnregisterJNXImagePtr.asFunction<void Function()>();

  void UnregisterJPEGImage() {
    return _UnregisterJPEGImage();
  }

  late final _UnregisterJPEGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterJPEGImage');
  late final _UnregisterJPEGImage =
      _UnregisterJPEGImagePtr.asFunction<void Function()>();

  void UnregisterJP2Image() {
    return _UnregisterJP2Image();
  }

  late final _UnregisterJP2ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterJP2Image');
  late final _UnregisterJP2Image =
      _UnregisterJP2ImagePtr.asFunction<void Function()>();

  void UnregisterJSONImage() {
    return _UnregisterJSONImage();
  }

  late final _UnregisterJSONImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterJSONImage');
  late final _UnregisterJSONImage =
      _UnregisterJSONImagePtr.asFunction<void Function()>();

  void UnregisterJXLImage() {
    return _UnregisterJXLImage();
  }

  late final _UnregisterJXLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterJXLImage');
  late final _UnregisterJXLImage =
      _UnregisterJXLImagePtr.asFunction<void Function()>();

  void UnregisterLABELImage() {
    return _UnregisterLABELImage();
  }

  late final _UnregisterLABELImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterLABELImage');
  late final _UnregisterLABELImage =
      _UnregisterLABELImagePtr.asFunction<void Function()>();

  void UnregisterMACImage() {
    return _UnregisterMACImage();
  }

  late final _UnregisterMACImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMACImage');
  late final _UnregisterMACImage =
      _UnregisterMACImagePtr.asFunction<void Function()>();

  void UnregisterMAGICKImage() {
    return _UnregisterMAGICKImage();
  }

  late final _UnregisterMAGICKImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMAGICKImage');
  late final _UnregisterMAGICKImage =
      _UnregisterMAGICKImagePtr.asFunction<void Function()>();

  void UnregisterMAPImage() {
    return _UnregisterMAPImage();
  }

  late final _UnregisterMAPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMAPImage');
  late final _UnregisterMAPImage =
      _UnregisterMAPImagePtr.asFunction<void Function()>();

  void UnregisterMASKImage() {
    return _UnregisterMASKImage();
  }

  late final _UnregisterMASKImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMASKImage');
  late final _UnregisterMASKImage =
      _UnregisterMASKImagePtr.asFunction<void Function()>();

  void UnregisterMATImage() {
    return _UnregisterMATImage();
  }

  late final _UnregisterMATImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMATImage');
  late final _UnregisterMATImage =
      _UnregisterMATImagePtr.asFunction<void Function()>();

  void UnregisterMATTEImage() {
    return _UnregisterMATTEImage();
  }

  late final _UnregisterMATTEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMATTEImage');
  late final _UnregisterMATTEImage =
      _UnregisterMATTEImagePtr.asFunction<void Function()>();

  void UnregisterMETAImage() {
    return _UnregisterMETAImage();
  }

  late final _UnregisterMETAImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMETAImage');
  late final _UnregisterMETAImage =
      _UnregisterMETAImagePtr.asFunction<void Function()>();

  void UnregisterMIFFImage() {
    return _UnregisterMIFFImage();
  }

  late final _UnregisterMIFFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMIFFImage');
  late final _UnregisterMIFFImage =
      _UnregisterMIFFImagePtr.asFunction<void Function()>();

  void UnregisterMONOImage() {
    return _UnregisterMONOImage();
  }

  late final _UnregisterMONOImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMONOImage');
  late final _UnregisterMONOImage =
      _UnregisterMONOImagePtr.asFunction<void Function()>();

  void UnregisterMPCImage() {
    return _UnregisterMPCImage();
  }

  late final _UnregisterMPCImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMPCImage');
  late final _UnregisterMPCImage =
      _UnregisterMPCImagePtr.asFunction<void Function()>();

  void UnregisterMPRImage() {
    return _UnregisterMPRImage();
  }

  late final _UnregisterMPRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMPRImage');
  late final _UnregisterMPRImage =
      _UnregisterMPRImagePtr.asFunction<void Function()>();

  void UnregisterMSLImage() {
    return _UnregisterMSLImage();
  }

  late final _UnregisterMSLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMSLImage');
  late final _UnregisterMSLImage =
      _UnregisterMSLImagePtr.asFunction<void Function()>();

  void UnregisterMTVImage() {
    return _UnregisterMTVImage();
  }

  late final _UnregisterMTVImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMTVImage');
  late final _UnregisterMTVImage =
      _UnregisterMTVImagePtr.asFunction<void Function()>();

  void UnregisterMVGImage() {
    return _UnregisterMVGImage();
  }

  late final _UnregisterMVGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterMVGImage');
  late final _UnregisterMVGImage =
      _UnregisterMVGImagePtr.asFunction<void Function()>();

  void UnregisterNULLImage() {
    return _UnregisterNULLImage();
  }

  late final _UnregisterNULLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterNULLImage');
  late final _UnregisterNULLImage =
      _UnregisterNULLImagePtr.asFunction<void Function()>();

  void UnregisterORAImage() {
    return _UnregisterORAImage();
  }

  late final _UnregisterORAImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterORAImage');
  late final _UnregisterORAImage =
      _UnregisterORAImagePtr.asFunction<void Function()>();

  void UnregisterOTBImage() {
    return _UnregisterOTBImage();
  }

  late final _UnregisterOTBImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterOTBImage');
  late final _UnregisterOTBImage =
      _UnregisterOTBImagePtr.asFunction<void Function()>();

  void UnregisterPALMImage() {
    return _UnregisterPALMImage();
  }

  late final _UnregisterPALMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPALMImage');
  late final _UnregisterPALMImage =
      _UnregisterPALMImagePtr.asFunction<void Function()>();

  void UnregisterPANGOImage() {
    return _UnregisterPANGOImage();
  }

  late final _UnregisterPANGOImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPANGOImage');
  late final _UnregisterPANGOImage =
      _UnregisterPANGOImagePtr.asFunction<void Function()>();

  void UnregisterPATTERNImage() {
    return _UnregisterPATTERNImage();
  }

  late final _UnregisterPATTERNImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UnregisterPATTERNImage');
  late final _UnregisterPATTERNImage =
      _UnregisterPATTERNImagePtr.asFunction<void Function()>();

  void UnregisterPCDImage() {
    return _UnregisterPCDImage();
  }

  late final _UnregisterPCDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPCDImage');
  late final _UnregisterPCDImage =
      _UnregisterPCDImagePtr.asFunction<void Function()>();

  void UnregisterPCLImage() {
    return _UnregisterPCLImage();
  }

  late final _UnregisterPCLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPCLImage');
  late final _UnregisterPCLImage =
      _UnregisterPCLImagePtr.asFunction<void Function()>();

  void UnregisterPCXImage() {
    return _UnregisterPCXImage();
  }

  late final _UnregisterPCXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPCXImage');
  late final _UnregisterPCXImage =
      _UnregisterPCXImagePtr.asFunction<void Function()>();

  void UnregisterPDBImage() {
    return _UnregisterPDBImage();
  }

  late final _UnregisterPDBImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPDBImage');
  late final _UnregisterPDBImage =
      _UnregisterPDBImagePtr.asFunction<void Function()>();

  void UnregisterPDFImage() {
    return _UnregisterPDFImage();
  }

  late final _UnregisterPDFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPDFImage');
  late final _UnregisterPDFImage =
      _UnregisterPDFImagePtr.asFunction<void Function()>();

  void UnregisterPESImage() {
    return _UnregisterPESImage();
  }

  late final _UnregisterPESImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPESImage');
  late final _UnregisterPESImage =
      _UnregisterPESImagePtr.asFunction<void Function()>();

  void UnregisterPGXImage() {
    return _UnregisterPGXImage();
  }

  late final _UnregisterPGXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPGXImage');
  late final _UnregisterPGXImage =
      _UnregisterPGXImagePtr.asFunction<void Function()>();

  void UnregisterPICTImage() {
    return _UnregisterPICTImage();
  }

  late final _UnregisterPICTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPICTImage');
  late final _UnregisterPICTImage =
      _UnregisterPICTImagePtr.asFunction<void Function()>();

  void UnregisterPIXImage() {
    return _UnregisterPIXImage();
  }

  late final _UnregisterPIXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPIXImage');
  late final _UnregisterPIXImage =
      _UnregisterPIXImagePtr.asFunction<void Function()>();

  void UnregisterPLASMAImage() {
    return _UnregisterPLASMAImage();
  }

  late final _UnregisterPLASMAImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPLASMAImage');
  late final _UnregisterPLASMAImage =
      _UnregisterPLASMAImagePtr.asFunction<void Function()>();

  void UnregisterPNGImage() {
    return _UnregisterPNGImage();
  }

  late final _UnregisterPNGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPNGImage');
  late final _UnregisterPNGImage =
      _UnregisterPNGImagePtr.asFunction<void Function()>();

  void UnregisterPNMImage() {
    return _UnregisterPNMImage();
  }

  late final _UnregisterPNMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPNMImage');
  late final _UnregisterPNMImage =
      _UnregisterPNMImagePtr.asFunction<void Function()>();

  void UnregisterPSImage() {
    return _UnregisterPSImage();
  }

  late final _UnregisterPSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPSImage');
  late final _UnregisterPSImage =
      _UnregisterPSImagePtr.asFunction<void Function()>();

  void UnregisterPS2Image() {
    return _UnregisterPS2Image();
  }

  late final _UnregisterPS2ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPS2Image');
  late final _UnregisterPS2Image =
      _UnregisterPS2ImagePtr.asFunction<void Function()>();

  void UnregisterPS3Image() {
    return _UnregisterPS3Image();
  }

  late final _UnregisterPS3ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPS3Image');
  late final _UnregisterPS3Image =
      _UnregisterPS3ImagePtr.asFunction<void Function()>();

  void UnregisterPSDImage() {
    return _UnregisterPSDImage();
  }

  late final _UnregisterPSDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPSDImage');
  late final _UnregisterPSDImage =
      _UnregisterPSDImagePtr.asFunction<void Function()>();

  void UnregisterPWPImage() {
    return _UnregisterPWPImage();
  }

  late final _UnregisterPWPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterPWPImage');
  late final _UnregisterPWPImage =
      _UnregisterPWPImagePtr.asFunction<void Function()>();

  void UnregisterQOIImage() {
    return _UnregisterQOIImage();
  }

  late final _UnregisterQOIImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterQOIImage');
  late final _UnregisterQOIImage =
      _UnregisterQOIImagePtr.asFunction<void Function()>();

  void UnregisterRAWImage() {
    return _UnregisterRAWImage();
  }

  late final _UnregisterRAWImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterRAWImage');
  late final _UnregisterRAWImage =
      _UnregisterRAWImagePtr.asFunction<void Function()>();

  void UnregisterRGBImage() {
    return _UnregisterRGBImage();
  }

  late final _UnregisterRGBImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterRGBImage');
  late final _UnregisterRGBImage =
      _UnregisterRGBImagePtr.asFunction<void Function()>();

  void UnregisterRGFImage() {
    return _UnregisterRGFImage();
  }

  late final _UnregisterRGFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterRGFImage');
  late final _UnregisterRGFImage =
      _UnregisterRGFImagePtr.asFunction<void Function()>();

  void UnregisterRLAImage() {
    return _UnregisterRLAImage();
  }

  late final _UnregisterRLAImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterRLAImage');
  late final _UnregisterRLAImage =
      _UnregisterRLAImagePtr.asFunction<void Function()>();

  void UnregisterRLEImage() {
    return _UnregisterRLEImage();
  }

  late final _UnregisterRLEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterRLEImage');
  late final _UnregisterRLEImage =
      _UnregisterRLEImagePtr.asFunction<void Function()>();

  void UnregisterSCRImage() {
    return _UnregisterSCRImage();
  }

  late final _UnregisterSCRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterSCRImage');
  late final _UnregisterSCRImage =
      _UnregisterSCRImagePtr.asFunction<void Function()>();

  void UnregisterSCREENSHOTImage() {
    return _UnregisterSCREENSHOTImage();
  }

  late final _UnregisterSCREENSHOTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UnregisterSCREENSHOTImage');
  late final _UnregisterSCREENSHOTImage =
      _UnregisterSCREENSHOTImagePtr.asFunction<void Function()>();

  void UnregisterSCTImage() {
    return _UnregisterSCTImage();
  }

  late final _UnregisterSCTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterSCTImage');
  late final _UnregisterSCTImage =
      _UnregisterSCTImagePtr.asFunction<void Function()>();

  void UnregisterSFWImage() {
    return _UnregisterSFWImage();
  }

  late final _UnregisterSFWImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterSFWImage');
  late final _UnregisterSFWImage =
      _UnregisterSFWImagePtr.asFunction<void Function()>();

  void UnregisterSGIImage() {
    return _UnregisterSGIImage();
  }

  late final _UnregisterSGIImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterSGIImage');
  late final _UnregisterSGIImage =
      _UnregisterSGIImagePtr.asFunction<void Function()>();

  void UnregisterSIXELImage() {
    return _UnregisterSIXELImage();
  }

  late final _UnregisterSIXELImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterSIXELImage');
  late final _UnregisterSIXELImage =
      _UnregisterSIXELImagePtr.asFunction<void Function()>();

  void UnregisterSTEGANOImage() {
    return _UnregisterSTEGANOImage();
  }

  late final _UnregisterSTEGANOImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UnregisterSTEGANOImage');
  late final _UnregisterSTEGANOImage =
      _UnregisterSTEGANOImagePtr.asFunction<void Function()>();

  void UnregisterSTRIMGImage() {
    return _UnregisterSTRIMGImage();
  }

  late final _UnregisterSTRIMGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterSTRIMGImage');
  late final _UnregisterSTRIMGImage =
      _UnregisterSTRIMGImagePtr.asFunction<void Function()>();

  void UnregisterSUNImage() {
    return _UnregisterSUNImage();
  }

  late final _UnregisterSUNImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterSUNImage');
  late final _UnregisterSUNImage =
      _UnregisterSUNImagePtr.asFunction<void Function()>();

  void UnregisterSVGImage() {
    return _UnregisterSVGImage();
  }

  late final _UnregisterSVGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterSVGImage');
  late final _UnregisterSVGImage =
      _UnregisterSVGImagePtr.asFunction<void Function()>();

  void UnregisterTGAImage() {
    return _UnregisterTGAImage();
  }

  late final _UnregisterTGAImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterTGAImage');
  late final _UnregisterTGAImage =
      _UnregisterTGAImagePtr.asFunction<void Function()>();

  void UnregisterTHUMBNAILImage() {
    return _UnregisterTHUMBNAILImage();
  }

  late final _UnregisterTHUMBNAILImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          'UnregisterTHUMBNAILImage');
  late final _UnregisterTHUMBNAILImage =
      _UnregisterTHUMBNAILImagePtr.asFunction<void Function()>();

  void UnregisterTIFFImage() {
    return _UnregisterTIFFImage();
  }

  late final _UnregisterTIFFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterTIFFImage');
  late final _UnregisterTIFFImage =
      _UnregisterTIFFImagePtr.asFunction<void Function()>();

  void UnregisterTILEImage() {
    return _UnregisterTILEImage();
  }

  late final _UnregisterTILEImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterTILEImage');
  late final _UnregisterTILEImage =
      _UnregisterTILEImagePtr.asFunction<void Function()>();

  void UnregisterTIMImage() {
    return _UnregisterTIMImage();
  }

  late final _UnregisterTIMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterTIMImage');
  late final _UnregisterTIMImage =
      _UnregisterTIMImagePtr.asFunction<void Function()>();

  void UnregisterTIM2Image() {
    return _UnregisterTIM2Image();
  }

  late final _UnregisterTIM2ImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterTIM2Image');
  late final _UnregisterTIM2Image =
      _UnregisterTIM2ImagePtr.asFunction<void Function()>();

  void UnregisterTTFImage() {
    return _UnregisterTTFImage();
  }

  late final _UnregisterTTFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterTTFImage');
  late final _UnregisterTTFImage =
      _UnregisterTTFImagePtr.asFunction<void Function()>();

  void UnregisterTXTImage() {
    return _UnregisterTXTImage();
  }

  late final _UnregisterTXTImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterTXTImage');
  late final _UnregisterTXTImage =
      _UnregisterTXTImagePtr.asFunction<void Function()>();

  void UnregisterUILImage() {
    return _UnregisterUILImage();
  }

  late final _UnregisterUILImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterUILImage');
  late final _UnregisterUILImage =
      _UnregisterUILImagePtr.asFunction<void Function()>();

  void UnregisterURLImage() {
    return _UnregisterURLImage();
  }

  late final _UnregisterURLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterURLImage');
  late final _UnregisterURLImage =
      _UnregisterURLImagePtr.asFunction<void Function()>();

  void UnregisterUYVYImage() {
    return _UnregisterUYVYImage();
  }

  late final _UnregisterUYVYImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterUYVYImage');
  late final _UnregisterUYVYImage =
      _UnregisterUYVYImagePtr.asFunction<void Function()>();

  void UnregisterVICARImage() {
    return _UnregisterVICARImage();
  }

  late final _UnregisterVICARImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterVICARImage');
  late final _UnregisterVICARImage =
      _UnregisterVICARImagePtr.asFunction<void Function()>();

  void UnregisterVIDImage() {
    return _UnregisterVIDImage();
  }

  late final _UnregisterVIDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterVIDImage');
  late final _UnregisterVIDImage =
      _UnregisterVIDImagePtr.asFunction<void Function()>();

  void UnregisterVIDEOImage() {
    return _UnregisterVIDEOImage();
  }

  late final _UnregisterVIDEOImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterVIDEOImage');
  late final _UnregisterVIDEOImage =
      _UnregisterVIDEOImagePtr.asFunction<void Function()>();

  void UnregisterVIFFImage() {
    return _UnregisterVIFFImage();
  }

  late final _UnregisterVIFFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterVIFFImage');
  late final _UnregisterVIFFImage =
      _UnregisterVIFFImagePtr.asFunction<void Function()>();

  void UnregisterVIPSImage() {
    return _UnregisterVIPSImage();
  }

  late final _UnregisterVIPSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterVIPSImage');
  late final _UnregisterVIPSImage =
      _UnregisterVIPSImagePtr.asFunction<void Function()>();

  void UnregisterWBMPImage() {
    return _UnregisterWBMPImage();
  }

  late final _UnregisterWBMPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterWBMPImage');
  late final _UnregisterWBMPImage =
      _UnregisterWBMPImagePtr.asFunction<void Function()>();

  void UnregisterWEBPImage() {
    return _UnregisterWEBPImage();
  }

  late final _UnregisterWEBPImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterWEBPImage');
  late final _UnregisterWEBPImage =
      _UnregisterWEBPImagePtr.asFunction<void Function()>();

  void UnregisterWMFImage() {
    return _UnregisterWMFImage();
  }

  late final _UnregisterWMFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterWMFImage');
  late final _UnregisterWMFImage =
      _UnregisterWMFImagePtr.asFunction<void Function()>();

  void UnregisterWPGImage() {
    return _UnregisterWPGImage();
  }

  late final _UnregisterWPGImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterWPGImage');
  late final _UnregisterWPGImage =
      _UnregisterWPGImagePtr.asFunction<void Function()>();

  void UnregisterXImage() {
    return _UnregisterXImage();
  }

  late final _UnregisterXImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterXImage');
  late final _UnregisterXImage =
      _UnregisterXImagePtr.asFunction<void Function()>();

  void UnregisterXBMImage() {
    return _UnregisterXBMImage();
  }

  late final _UnregisterXBMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterXBMImage');
  late final _UnregisterXBMImage =
      _UnregisterXBMImagePtr.asFunction<void Function()>();

  void UnregisterXCImage() {
    return _UnregisterXCImage();
  }

  late final _UnregisterXCImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterXCImage');
  late final _UnregisterXCImage =
      _UnregisterXCImagePtr.asFunction<void Function()>();

  void UnregisterXCFImage() {
    return _UnregisterXCFImage();
  }

  late final _UnregisterXCFImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterXCFImage');
  late final _UnregisterXCFImage =
      _UnregisterXCFImagePtr.asFunction<void Function()>();

  void UnregisterXPMImage() {
    return _UnregisterXPMImage();
  }

  late final _UnregisterXPMImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterXPMImage');
  late final _UnregisterXPMImage =
      _UnregisterXPMImagePtr.asFunction<void Function()>();

  void UnregisterXPSImage() {
    return _UnregisterXPSImage();
  }

  late final _UnregisterXPSImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterXPSImage');
  late final _UnregisterXPSImage =
      _UnregisterXPSImagePtr.asFunction<void Function()>();

  void UnregisterXWDImage() {
    return _UnregisterXWDImage();
  }

  late final _UnregisterXWDImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterXWDImage');
  late final _UnregisterXWDImage =
      _UnregisterXWDImagePtr.asFunction<void Function()>();

  void UnregisterYAMLImage() {
    return _UnregisterYAMLImage();
  }

  late final _UnregisterYAMLImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterYAMLImage');
  late final _UnregisterYAMLImage =
      _UnregisterYAMLImagePtr.asFunction<void Function()>();

  void UnregisterYCBCRImage() {
    return _UnregisterYCBCRImage();
  }

  late final _UnregisterYCBCRImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterYCBCRImage');
  late final _UnregisterYCBCRImage =
      _UnregisterYCBCRImagePtr.asFunction<void Function()>();

  void UnregisterYUVImage() {
    return _UnregisterYUVImage();
  }

  late final _UnregisterYUVImagePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('UnregisterYUVImage');
  late final _UnregisterYUVImage =
      _UnregisterYUVImagePtr.asFunction<void Function()>();

  ffi.Pointer<ChannelStatistics> GetImageStatistics(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetImageStatistics(
      arg0,
      arg1,
    );
  }

  late final _GetImageStatisticsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ChannelStatistics> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageStatistics');
  late final _GetImageStatistics = _GetImageStatisticsPtr.asFunction<
      ffi.Pointer<ChannelStatistics> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ChannelMoments> GetImageMoments(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetImageMoments(
      arg0,
      arg1,
    );
  }

  late final _GetImageMomentsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ChannelMoments> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageMoments');
  late final _GetImageMoments = _GetImageMomentsPtr.asFunction<
      ffi.Pointer<ChannelMoments> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ChannelPerceptualHash> GetImagePerceptualHash(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetImagePerceptualHash(
      arg0,
      arg1,
    );
  }

  late final _GetImagePerceptualHashPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ChannelPerceptualHash> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('GetImagePerceptualHash');
  late final _GetImagePerceptualHash = _GetImagePerceptualHashPtr.asFunction<
      ffi.Pointer<ChannelPerceptualHash> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> EvaluateImages(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _EvaluateImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _EvaluateImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('EvaluateImages');
  late final _EvaluateImages = _EvaluateImagesPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> PolynomialImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ffi.Double> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _PolynomialImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PolynomialImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Size,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('PolynomialImage');
  late final _PolynomialImage = _PolynomialImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, int,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> StatisticImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _StatisticImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _StatisticImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32, ffi.Size,
              ffi.Size, ffi.Pointer<ExceptionInfo>)>>('StatisticImage');
  late final _StatisticImage = _StatisticImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, int, ffi.Pointer<ExceptionInfo>)>();

  int EvaluateImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _EvaluateImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _EvaluateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('EvaluateImage');
  late final _EvaluateImage = _EvaluateImagePtr.asFunction<
      int Function(
          ffi.Pointer<Image>, int, double, ffi.Pointer<ExceptionInfo>)>();

  int FunctionImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Double> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _FunctionImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _FunctionImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Int32,
              ffi.Size,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('FunctionImage');
  late final _FunctionImage = _FunctionImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, int, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ExceptionInfo>)>();

  int GetImageEntropy(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetImageEntropy(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetImageEntropyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageEntropy');
  late final _GetImageEntropy = _GetImageEntropyPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ExceptionInfo>)>();

  int GetImageExtrema(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ffi.Size> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _GetImageExtrema(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetImageExtremaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageExtrema');
  late final _GetImageExtrema = _GetImageExtremaPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ExceptionInfo>)>();

  int GetImageMean(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _GetImageMean(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetImageMeanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageMean');
  late final _GetImageMean = _GetImageMeanPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ExceptionInfo>)>();

  int GetImageMedian(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _GetImageMedian(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetImageMedianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageMedian');
  late final _GetImageMedian = _GetImageMedianPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ExceptionInfo>)>();

  int GetImageKurtosis(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _GetImageKurtosis(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetImageKurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageKurtosis');
  late final _GetImageKurtosis = _GetImageKurtosisPtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ExceptionInfo>)>();

  int GetImageRange(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _GetImageRange(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetImageRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ExceptionInfo>)>>('GetImageRange');
  late final _GetImageRange = _GetImageRangePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ExceptionInfo>)>();

  int Tokenizer(
    ffi.Pointer<TokenInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    ffi.Pointer<ffi.Char> arg4,
    ffi.Pointer<ffi.Char> arg5,
    ffi.Pointer<ffi.Char> arg6,
    ffi.Pointer<ffi.Char> arg7,
    int arg8,
    ffi.Pointer<ffi.Char> arg9,
    ffi.Pointer<ffi.Int> arg10,
    ffi.Pointer<ffi.Char> arg11,
  ) {
    return _Tokenizer(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
      arg8,
      arg9,
      arg10,
      arg11,
    );
  }

  late final _TokenizerPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<TokenInfo>,
              ffi.UnsignedInt,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Char,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Int>,
              ffi.Pointer<ffi.Char>)>>('Tokenizer');
  late final _Tokenizer = _TokenizerPtr.asFunction<
      int Function(
          ffi.Pointer<TokenInfo>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Char>)>();

  int GlobExpression(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _GlobExpression(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GlobExpressionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('GlobExpression');
  late final _GlobExpression = _GlobExpressionPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int GetNextToken(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
  ) {
    return _GetNextToken(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _GetNextTokenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size,
              ffi.Pointer<ffi.Char>)>>('GetNextToken');
  late final _GetNextToken = _GetNextTokenPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<TokenInfo> AcquireTokenInfo() {
    return _AcquireTokenInfo();
  }

  late final _AcquireTokenInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<TokenInfo> Function()>>(
          'AcquireTokenInfo');
  late final _AcquireTokenInfo =
      _AcquireTokenInfoPtr.asFunction<ffi.Pointer<TokenInfo> Function()>();

  ffi.Pointer<TokenInfo> DestroyTokenInfo(
    ffi.Pointer<TokenInfo> arg0,
  ) {
    return _DestroyTokenInfo(
      arg0,
    );
  }

  late final _DestroyTokenInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<TokenInfo> Function(
              ffi.Pointer<TokenInfo>)>>('DestroyTokenInfo');
  late final _DestroyTokenInfo = _DestroyTokenInfoPtr.asFunction<
      ffi.Pointer<TokenInfo> Function(ffi.Pointer<TokenInfo>)>();

  ffi.Pointer<Image> AutoOrientImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _AutoOrientImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AutoOrientImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('AutoOrientImage');
  late final _AutoOrientImage = _AutoOrientImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ChopImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<RectangleInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ChopImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ChopImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ChopImage');
  late final _ChopImage = _ChopImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>,
          ffi.Pointer<RectangleInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ConsolidateCMYKImages(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ConsolidateCMYKImages(
      arg0,
      arg1,
    );
  }

  late final _ConsolidateCMYKImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('ConsolidateCMYKImages');
  late final _ConsolidateCMYKImages = _ConsolidateCMYKImagesPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> CropImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<RectangleInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _CropImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _CropImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ExceptionInfo>)>>('CropImage');
  late final _CropImage = _CropImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>,
          ffi.Pointer<RectangleInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> CropImageToTiles(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _CropImageToTiles(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _CropImageToTilesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('CropImageToTiles');
  late final _CropImageToTiles = _CropImageToTilesPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ExcerptImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<RectangleInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ExcerptImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ExcerptImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ExcerptImage');
  late final _ExcerptImage = _ExcerptImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>,
          ffi.Pointer<RectangleInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ExtentImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<RectangleInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ExtentImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ExtentImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ExtentImage');
  late final _ExtentImage = _ExtentImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>,
          ffi.Pointer<RectangleInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> FlipImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _FlipImage(
      arg0,
      arg1,
    );
  }

  late final _FlipImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('FlipImage');
  late final _FlipImage = _FlipImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> FlopImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _FlopImage(
      arg0,
      arg1,
    );
  }

  late final _FlopImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('FlopImage');
  late final _FlopImage = _FlopImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> RollImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _RollImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _RollImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ssize_t, ssize_t,
              ffi.Pointer<ExceptionInfo>)>>('RollImage');
  late final _RollImage = _RollImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ShaveImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<RectangleInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ShaveImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _ShaveImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ShaveImage');
  late final _ShaveImage = _ShaveImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>,
          ffi.Pointer<RectangleInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SpliceImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<RectangleInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SpliceImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SpliceImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ExceptionInfo>)>>('SpliceImage');
  late final _SpliceImage = _SpliceImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>,
          ffi.Pointer<RectangleInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> TransposeImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _TransposeImage(
      arg0,
      arg1,
    );
  }

  late final _TransposeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('TransposeImage');
  late final _TransposeImage = _TransposeImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> TransverseImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _TransverseImage(
      arg0,
      arg1,
    );
  }

  late final _TransverseImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('TransverseImage');
  late final _TransverseImage = _TransverseImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> TrimImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _TrimImage(
      arg0,
      arg1,
    );
  }

  late final _TrimImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('TrimImage');
  late final _TrimImage = _TrimImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> AdaptiveThresholdImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    int arg2,
    double arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _AdaptiveThresholdImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _AdaptiveThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Size,
              ffi.Size,
              ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('AdaptiveThresholdImage');
  late final _AdaptiveThresholdImage = _AdaptiveThresholdImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, int, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ThresholdMap> DestroyThresholdMap(
    ffi.Pointer<ThresholdMap> arg0,
  ) {
    return _DestroyThresholdMap(
      arg0,
    );
  }

  late final _DestroyThresholdMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ThresholdMap> Function(
              ffi.Pointer<ThresholdMap>)>>('DestroyThresholdMap');
  late final _DestroyThresholdMap = _DestroyThresholdMapPtr.asFunction<
      ffi.Pointer<ThresholdMap> Function(ffi.Pointer<ThresholdMap>)>();

  ffi.Pointer<ThresholdMap> GetThresholdMap(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _GetThresholdMap(
      arg0,
      arg1,
    );
  }

  late final _GetThresholdMapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ThresholdMap> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('GetThresholdMap');
  late final _GetThresholdMap = _GetThresholdMapPtr.asFunction<
      ffi.Pointer<ThresholdMap> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  int AutoThresholdImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _AutoThresholdImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AutoThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('AutoThresholdImage');
  late final _AutoThresholdImage = _AutoThresholdImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  int BilevelImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _BilevelImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _BilevelImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('BilevelImage');
  late final _BilevelImage = _BilevelImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, double, ffi.Pointer<ExceptionInfo>)>();

  int BlackThresholdImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _BlackThresholdImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _BlackThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('BlackThresholdImage');
  late final _BlackThresholdImage = _BlackThresholdImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int ClampImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ClampImage(
      arg0,
      arg1,
    );
  }

  late final _ClampImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>>('ClampImage');
  late final _ClampImage = _ClampImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  int ColorThresholdImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<PixelInfo> arg1,
    ffi.Pointer<PixelInfo> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ColorThresholdImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ColorThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ColorThresholdImage');
  late final _ColorThresholdImage = _ColorThresholdImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<PixelInfo>,
          ffi.Pointer<PixelInfo>, ffi.Pointer<ExceptionInfo>)>();

  int ListThresholdMaps(
    ffi.Pointer<FILE> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _ListThresholdMaps(
      arg0,
      arg1,
    );
  }

  late final _ListThresholdMapsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<FILE>,
              ffi.Pointer<ExceptionInfo>)>>('ListThresholdMaps');
  late final _ListThresholdMaps = _ListThresholdMapsPtr.asFunction<
      int Function(ffi.Pointer<FILE>, ffi.Pointer<ExceptionInfo>)>();

  int OrderedDitherImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _OrderedDitherImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _OrderedDitherImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('OrderedDitherImage');
  late final _OrderedDitherImage = _OrderedDitherImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  int PerceptibleImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _PerceptibleImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PerceptibleImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('PerceptibleImage');
  late final _PerceptibleImage = _PerceptibleImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, double, ffi.Pointer<ExceptionInfo>)>();

  int RandomThresholdImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _RandomThresholdImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _RandomThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Double, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('RandomThresholdImage');
  late final _RandomThresholdImage = _RandomThresholdImagePtr.asFunction<
      int Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  int RangeThresholdImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _RangeThresholdImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _RangeThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<Image>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('RangeThresholdImage');
  late final _RangeThresholdImage = _RangeThresholdImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, double, double, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  int WhiteThresholdImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _WhiteThresholdImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _WhiteThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('WhiteThresholdImage');
  late final _WhiteThresholdImage = _WhiteThresholdImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> Base64Encode(
    ffi.Pointer<ffi.UnsignedChar> arg0,
    int arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _Base64Encode(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _Base64EncodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.UnsignedChar>,
              ffi.Size, ffi.Pointer<ffi.Size>)>>('Base64Encode');
  late final _Base64Encode = _Base64EncodePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.UnsignedChar>, int, ffi.Pointer<ffi.Size>)>();

  int AcquireUniqueFilename(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _AcquireUniqueFilename(
      arg0,
    );
  }

  late final _AcquireUniqueFilenamePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'AcquireUniqueFilename');
  late final _AcquireUniqueFilename = _AcquireUniqueFilenamePtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>)>();

  int AcquireUniqueSymbolicLink(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _AcquireUniqueSymbolicLink(
      arg0,
      arg1,
    );
  }

  late final _AcquireUniqueSymbolicLinkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('AcquireUniqueSymbolicLink');
  late final _AcquireUniqueSymbolicLink = _AcquireUniqueSymbolicLinkPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int ExpandFilenames(
    ffi.Pointer<ffi.Int> arg0,
    ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> arg1,
  ) {
    return _ExpandFilenames(
      arg0,
      arg1,
    );
  }

  late final _ExpandFilenamesPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<ffi.Int>,
                  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>>(
      'ExpandFilenames');
  late final _ExpandFilenames = _ExpandFilenamesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>,
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>)>();

  int GetPathAttributes(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Void> arg1,
  ) {
    return _GetPathAttributes(
      arg0,
      arg1,
    );
  }

  late final _GetPathAttributesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>)>>('GetPathAttributes');
  late final _GetPathAttributes = _GetPathAttributesPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Void>)>();

  int IsPathAccessible(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _IsPathAccessible(
      arg0,
    );
  }

  late final _IsPathAccessiblePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<ffi.Char>)>>(
          'IsPathAccessible');
  late final _IsPathAccessible =
      _IsPathAccessiblePtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int MultilineCensus(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _MultilineCensus(
      arg0,
    );
  }

  late final _MultilineCensusPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>)>>(
          'MultilineCensus');
  late final _MultilineCensus =
      _MultilineCensusPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.UnsignedChar> Base64Decode(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _Base64Decode(
      arg0,
      arg1,
    );
  }

  late final _Base64DecodePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>>('Base64Decode');
  late final _Base64Decode = _Base64DecodePtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  void AppendImageFormat(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _AppendImageFormat(
      arg0,
      arg1,
    );
  }

  late final _AppendImageFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('AppendImageFormat');
  late final _AppendImageFormat = _AppendImageFormatPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void GetPathComponent(
    ffi.Pointer<ffi.Char> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _GetPathComponent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetPathComponentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('GetPathComponent');
  late final _GetPathComponent = _GetPathComponentPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  void MagickDelay(
    int arg0,
  ) {
    return _MagickDelay(
      arg0,
    );
  }

  late final _MagickDelayPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(MagickSizeType)>>(
          'MagickDelay');
  late final _MagickDelay = _MagickDelayPtr.asFunction<void Function(int)>();

  ffi.Pointer<Image> ConnectedComponentsImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<CCObjectInfo>> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ConnectedComponentsImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ConnectedComponentsImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Size,
              ffi.Pointer<ffi.Pointer<CCObjectInfo>>,
              ffi.Pointer<ExceptionInfo>)>>('ConnectedComponentsImage');
  late final _ConnectedComponentsImage =
      _ConnectedComponentsImagePtr.asFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              int,
              ffi.Pointer<ffi.Pointer<CCObjectInfo>>,
              ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> IntegralImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _IntegralImage(
      arg0,
      arg1,
    );
  }

  late final _IntegralImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('IntegralImage');
  late final _IntegralImage = _IntegralImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> AddNoiseImage(
    ffi.Pointer<Image> arg0,
    int arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _AddNoiseImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _AddNoiseImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Int32, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('AddNoiseImage');
  late final _AddNoiseImage = _AddNoiseImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> BlueShiftImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _BlueShiftImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _BlueShiftImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('BlueShiftImage');
  late final _BlueShiftImage = _BlueShiftImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> CharcoalImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _CharcoalImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _CharcoalImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('CharcoalImage');
  late final _CharcoalImage = _CharcoalImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ColorizeImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<PixelInfo> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ColorizeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ColorizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ColorizeImage');
  late final _ColorizeImage = _ColorizeImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<PixelInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ColorMatrixImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<KernelInfo> kernel,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _ColorMatrixImage(
      arg0,
      kernel,
      arg2,
    );
  }

  late final _ColorMatrixImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<KernelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('ColorMatrixImage');
  late final _ColorMatrixImage = _ColorMatrixImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<KernelInfo>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ImplodeImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _ImplodeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ImplodeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('ImplodeImage');
  late final _ImplodeImage = _ImplodeImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> MorphImages(
    ffi.Pointer<Image> arg0,
    int arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _MorphImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MorphImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Size,
              ffi.Pointer<ExceptionInfo>)>>('MorphImages');
  late final _MorphImages = _MorphImagesPtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> PolaroidImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<DrawInfo> arg1,
    ffi.Pointer<ffi.Char> arg2,
    double arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _PolaroidImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _PolaroidImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<DrawInfo>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('PolaroidImage');
  late final _PolaroidImage = _PolaroidImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<DrawInfo>,
          ffi.Pointer<ffi.Char>, double, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SepiaToneImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SepiaToneImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SepiaToneImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('SepiaToneImage');
  late final _SepiaToneImage = _SepiaToneImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> ShadowImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _ShadowImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _ShadowImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Double,
              ffi.Double,
              ssize_t,
              ssize_t,
              ffi.Pointer<ExceptionInfo>)>>('ShadowImage');
  late final _ShadowImage = _ShadowImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, double, double, int, int,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SketchImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    double arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _SketchImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _SketchImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('SketchImage');
  late final _SketchImage = _SketchImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, double, double, double,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SteganoImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SteganoImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SteganoImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('SteganoImage');
  late final _SteganoImage = _SteganoImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> StereoImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _StereoImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _StereoImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
              ffi.Pointer<ExceptionInfo>)>>('StereoImage');
  late final _StereoImage = _StereoImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<Image>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> StereoAnaglyphImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Image> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _StereoAnaglyphImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _StereoAnaglyphImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<Image>,
              ssize_t,
              ssize_t,
              ffi.Pointer<ExceptionInfo>)>>('StereoAnaglyphImage');
  late final _StereoAnaglyphImage = _StereoAnaglyphImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<Image>, int,
          int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> SwirlImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    int arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _SwirlImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _SwirlImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double, ffi.Int32,
              ffi.Pointer<ExceptionInfo>)>>('SwirlImage');
  late final _SwirlImage = _SwirlImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, int, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> TintImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<PixelInfo> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _TintImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _TintImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<PixelInfo>,
              ffi.Pointer<ExceptionInfo>)>>('TintImage');
  late final _TintImage = _TintImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<PixelInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> VignetteImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _VignetteImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _VignetteImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<Image>,
              ffi.Double,
              ffi.Double,
              ssize_t,
              ssize_t,
              ffi.Pointer<ExceptionInfo>)>>('VignetteImage');
  late final _VignetteImage = _VignetteImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, double, double, int, int,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> WaveImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _WaveImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _WaveImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Int32, ffi.Pointer<ExceptionInfo>)>>('WaveImage');
  late final _WaveImage = _WaveImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>, double, double, int,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<Image> WaveletDenoiseImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _WaveletDenoiseImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _WaveletDenoiseImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Double, ffi.Pointer<ExceptionInfo>)>>('WaveletDenoiseImage');
  late final _WaveletDenoiseImage = _WaveletDenoiseImagePtr.asFunction<
      ffi.Pointer<Image> Function(
          ffi.Pointer<Image>, double, double, ffi.Pointer<ExceptionInfo>)>();

  int PlasmaImage(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<SegmentInfo> arg1,
    int arg2,
    int arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _PlasmaImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _PlasmaImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Pointer<SegmentInfo>,
              ffi.Size, ffi.Size, ffi.Pointer<ExceptionInfo>)>>('PlasmaImage');
  late final _PlasmaImage = _PlasmaImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, ffi.Pointer<SegmentInfo>, int, int,
          ffi.Pointer<ExceptionInfo>)>();

  int SolarizeImage(
    ffi.Pointer<Image> arg0,
    double arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _SolarizeImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SolarizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<Image>, ffi.Double,
              ffi.Pointer<ExceptionInfo>)>>('SolarizeImage');
  late final _SolarizeImage = _SolarizeImagePtr.asFunction<
      int Function(ffi.Pointer<Image>, double, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> XMLTreeInfoToXML(
    ffi.Pointer<XMLTreeInfo> arg0,
  ) {
    return _XMLTreeInfoToXML(
      arg0,
    );
  }

  late final _XMLTreeInfoToXMLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<XMLTreeInfo>)>>('XMLTreeInfoToXML');
  late final _XMLTreeInfoToXML = _XMLTreeInfoToXMLPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<XMLTreeInfo>)>();

  ffi.Pointer<ffi.Char> GetXMLTreeAttribute(
    ffi.Pointer<XMLTreeInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _GetXMLTreeAttribute(
      arg0,
      arg1,
    );
  }

  late final _GetXMLTreeAttributePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<XMLTreeInfo>,
              ffi.Pointer<ffi.Char>)>>('GetXMLTreeAttribute');
  late final _GetXMLTreeAttribute = _GetXMLTreeAttributePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<XMLTreeInfo>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> GetXMLTreeContent(
    ffi.Pointer<XMLTreeInfo> arg0,
  ) {
    return _GetXMLTreeContent(
      arg0,
    );
  }

  late final _GetXMLTreeContentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<XMLTreeInfo>)>>('GetXMLTreeContent');
  late final _GetXMLTreeContent = _GetXMLTreeContentPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<XMLTreeInfo>)>();

  ffi.Pointer<ffi.Char> GetXMLTreeTag(
    ffi.Pointer<XMLTreeInfo> arg0,
  ) {
    return _GetXMLTreeTag(
      arg0,
    );
  }

  late final _GetXMLTreeTagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<XMLTreeInfo>)>>('GetXMLTreeTag');
  late final _GetXMLTreeTag = _GetXMLTreeTagPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<XMLTreeInfo>)>();

  ffi.Pointer<XMLTreeInfo> AddChildToXMLTree(
    ffi.Pointer<XMLTreeInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _AddChildToXMLTree(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _AddChildToXMLTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XMLTreeInfo> Function(ffi.Pointer<XMLTreeInfo>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('AddChildToXMLTree');
  late final _AddChildToXMLTree = _AddChildToXMLTreePtr.asFunction<
      ffi.Pointer<XMLTreeInfo> Function(
          ffi.Pointer<XMLTreeInfo>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<XMLTreeInfo> DestroyXMLTree(
    ffi.Pointer<XMLTreeInfo> arg0,
  ) {
    return _DestroyXMLTree(
      arg0,
    );
  }

  late final _DestroyXMLTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XMLTreeInfo> Function(
              ffi.Pointer<XMLTreeInfo>)>>('DestroyXMLTree');
  late final _DestroyXMLTree = _DestroyXMLTreePtr.asFunction<
      ffi.Pointer<XMLTreeInfo> Function(ffi.Pointer<XMLTreeInfo>)>();

  ffi.Pointer<XMLTreeInfo> GetNextXMLTreeTag(
    ffi.Pointer<XMLTreeInfo> arg0,
  ) {
    return _GetNextXMLTreeTag(
      arg0,
    );
  }

  late final _GetNextXMLTreeTagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XMLTreeInfo> Function(
              ffi.Pointer<XMLTreeInfo>)>>('GetNextXMLTreeTag');
  late final _GetNextXMLTreeTag = _GetNextXMLTreeTagPtr.asFunction<
      ffi.Pointer<XMLTreeInfo> Function(ffi.Pointer<XMLTreeInfo>)>();

  ffi.Pointer<XMLTreeInfo> GetXMLTreeChild(
    ffi.Pointer<XMLTreeInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _GetXMLTreeChild(
      arg0,
      arg1,
    );
  }

  late final _GetXMLTreeChildPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XMLTreeInfo> Function(ffi.Pointer<XMLTreeInfo>,
              ffi.Pointer<ffi.Char>)>>('GetXMLTreeChild');
  late final _GetXMLTreeChild = _GetXMLTreeChildPtr.asFunction<
      ffi.Pointer<XMLTreeInfo> Function(
          ffi.Pointer<XMLTreeInfo>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<XMLTreeInfo> GetXMLTreeSibling(
    ffi.Pointer<XMLTreeInfo> arg0,
  ) {
    return _GetXMLTreeSibling(
      arg0,
    );
  }

  late final _GetXMLTreeSiblingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XMLTreeInfo> Function(
              ffi.Pointer<XMLTreeInfo>)>>('GetXMLTreeSibling');
  late final _GetXMLTreeSibling = _GetXMLTreeSiblingPtr.asFunction<
      ffi.Pointer<XMLTreeInfo> Function(ffi.Pointer<XMLTreeInfo>)>();

  ffi.Pointer<XMLTreeInfo> NewXMLTree(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _NewXMLTree(
      arg0,
      arg1,
    );
  }

  late final _NewXMLTreePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XMLTreeInfo> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ExceptionInfo>)>>('NewXMLTree');
  late final _NewXMLTree = _NewXMLTreePtr.asFunction<
      ffi.Pointer<XMLTreeInfo> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<XMLTreeInfo> NewXMLTreeTag(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _NewXMLTreeTag(
      arg0,
    );
  }

  late final _NewXMLTreeTagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XMLTreeInfo> Function(
              ffi.Pointer<ffi.Char>)>>('NewXMLTreeTag');
  late final _NewXMLTreeTag = _NewXMLTreeTagPtr.asFunction<
      ffi.Pointer<XMLTreeInfo> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<XMLTreeInfo> SetXMLTreeContent(
    ffi.Pointer<XMLTreeInfo> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _SetXMLTreeContent(
      arg0,
      arg1,
    );
  }

  late final _SetXMLTreeContentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<XMLTreeInfo> Function(ffi.Pointer<XMLTreeInfo>,
              ffi.Pointer<ffi.Char>)>>('SetXMLTreeContent');
  late final _SetXMLTreeContent = _SetXMLTreeContentPtr.asFunction<
      ffi.Pointer<XMLTreeInfo> Function(
          ffi.Pointer<XMLTreeInfo>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<Image> XImportImage(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<XImportInfo> arg1,
    ffi.Pointer<ExceptionInfo> arg2,
  ) {
    return _XImportImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _XImportImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<ImageInfo>,
              ffi.Pointer<XImportInfo>,
              ffi.Pointer<ExceptionInfo>)>>('XImportImage');
  late final _XImportImage = _XImportImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<ImageInfo>,
          ffi.Pointer<XImportInfo>, ffi.Pointer<ExceptionInfo>)>();

  void XGetImportInfo(
    ffi.Pointer<XImportInfo> arg0,
  ) {
    return _XGetImportInfo(
      arg0,
    );
  }

  late final _XGetImportInfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<XImportInfo>)>>(
          'XGetImportInfo');
  late final _XGetImportInfo =
      _XGetImportInfoPtr.asFunction<void Function(ffi.Pointer<XImportInfo>)>();

  int AnimateImageCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _AnimateImageCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _AnimateImageCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('AnimateImageCommand');
  late final _AnimateImageCommand = _AnimateImageCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  int CompareImagesCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _CompareImagesCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _CompareImagesCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('CompareImagesCommand');
  late final _CompareImagesCommand = _CompareImagesCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  int CompositeImageCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _CompositeImageCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _CompositeImageCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('CompositeImageCommand');
  late final _CompositeImageCommand = _CompositeImageCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  int ConjureImageCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _ConjureImageCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ConjureImageCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('ConjureImageCommand');
  late final _ConjureImageCommand = _ConjureImageCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  int ConvertImageCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _ConvertImageCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ConvertImageCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('ConvertImageCommand');
  late final _ConvertImageCommand = _ConvertImageCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> PixelGetColorAsNormalizedString(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetColorAsNormalizedString(
      arg0,
    );
  }

  late final _PixelGetColorAsNormalizedStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PixelWand>)>>('PixelGetColorAsNormalizedString');
  late final _PixelGetColorAsNormalizedString =
      _PixelGetColorAsNormalizedStringPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PixelWand>)>();

  ffi.Pointer<ffi.Char> PixelGetColorAsString(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetColorAsString(
      arg0,
    );
  }

  late final _PixelGetColorAsStringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PixelWand>)>>('PixelGetColorAsString');
  late final _PixelGetColorAsString = _PixelGetColorAsStringPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<PixelWand>)>();

  ffi.Pointer<ffi.Char> PixelGetException(
    ffi.Pointer<PixelWand> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    return _PixelGetException(
      arg0,
      arg1,
    );
  }

  late final _PixelGetExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PixelWand>,
              ffi.Pointer<ffi.Int32>)>>('PixelGetException');
  late final _PixelGetException = _PixelGetExceptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<PixelWand>, ffi.Pointer<ffi.Int32>)>();

  double PixelGetAlpha(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetAlpha(
      arg0,
    );
  }

  late final _PixelGetAlphaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetAlpha');
  late final _PixelGetAlpha =
      _PixelGetAlphaPtr.asFunction<double Function(ffi.Pointer<PixelWand>)>();

  double PixelGetBlack(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetBlack(
      arg0,
    );
  }

  late final _PixelGetBlackPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetBlack');
  late final _PixelGetBlack =
      _PixelGetBlackPtr.asFunction<double Function(ffi.Pointer<PixelWand>)>();

  double PixelGetBlue(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetBlue(
      arg0,
    );
  }

  late final _PixelGetBluePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetBlue');
  late final _PixelGetBlue =
      _PixelGetBluePtr.asFunction<double Function(ffi.Pointer<PixelWand>)>();

  double PixelGetCyan(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetCyan(
      arg0,
    );
  }

  late final _PixelGetCyanPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetCyan');
  late final _PixelGetCyan =
      _PixelGetCyanPtr.asFunction<double Function(ffi.Pointer<PixelWand>)>();

  double PixelGetFuzz(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetFuzz(
      arg0,
    );
  }

  late final _PixelGetFuzzPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetFuzz');
  late final _PixelGetFuzz =
      _PixelGetFuzzPtr.asFunction<double Function(ffi.Pointer<PixelWand>)>();

  double PixelGetGreen(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetGreen(
      arg0,
    );
  }

  late final _PixelGetGreenPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetGreen');
  late final _PixelGetGreen =
      _PixelGetGreenPtr.asFunction<double Function(ffi.Pointer<PixelWand>)>();

  double PixelGetMagenta(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetMagenta(
      arg0,
    );
  }

  late final _PixelGetMagentaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetMagenta');
  late final _PixelGetMagenta =
      _PixelGetMagentaPtr.asFunction<double Function(ffi.Pointer<PixelWand>)>();

  double PixelGetRed(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetRed(
      arg0,
    );
  }

  late final _PixelGetRedPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetRed');
  late final _PixelGetRed =
      _PixelGetRedPtr.asFunction<double Function(ffi.Pointer<PixelWand>)>();

  double PixelGetYellow(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetYellow(
      arg0,
    );
  }

  late final _PixelGetYellowPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetYellow');
  late final _PixelGetYellow =
      _PixelGetYellowPtr.asFunction<double Function(ffi.Pointer<PixelWand>)>();

  int PixelGetExceptionType(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetExceptionType(
      arg0,
    );
  }

  late final _PixelGetExceptionTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetExceptionType');
  late final _PixelGetExceptionType = _PixelGetExceptionTypePtr.asFunction<
      int Function(ffi.Pointer<PixelWand>)>();

  int IsPixelWand(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _IsPixelWand(
      arg0,
    );
  }

  late final _IsPixelWandPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PixelWand>)>>(
          'IsPixelWand');
  late final _IsPixelWand =
      _IsPixelWandPtr.asFunction<int Function(ffi.Pointer<PixelWand>)>();

  int IsPixelWandSimilar(
    ffi.Pointer<PixelWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    double arg2,
  ) {
    return _IsPixelWandSimilar(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _IsPixelWandSimilarPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<PixelWand>, ffi.Pointer<PixelWand>,
              ffi.Double)>>('IsPixelWandSimilar');
  late final _IsPixelWandSimilar = _IsPixelWandSimilarPtr.asFunction<
      int Function(ffi.Pointer<PixelWand>, ffi.Pointer<PixelWand>, double)>();

  int PixelClearException(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelClearException(
      arg0,
    );
  }

  late final _PixelClearExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PixelWand>)>>(
          'PixelClearException');
  late final _PixelClearException = _PixelClearExceptionPtr.asFunction<
      int Function(ffi.Pointer<PixelWand>)>();

  int PixelSetColor(
    ffi.Pointer<PixelWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _PixelSetColor(
      arg0,
      arg1,
    );
  }

  late final _PixelSetColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<PixelWand>, ffi.Pointer<ffi.Char>)>>('PixelSetColor');
  late final _PixelSetColor = _PixelSetColorPtr.asFunction<
      int Function(ffi.Pointer<PixelWand>, ffi.Pointer<ffi.Char>)>();

  PixelInfo PixelGetPixel(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetPixel(
      arg0,
    );
  }

  late final _PixelGetPixelPtr =
      _lookup<ffi.NativeFunction<PixelInfo Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetPixel');
  late final _PixelGetPixel = _PixelGetPixelPtr.asFunction<
      PixelInfo Function(ffi.Pointer<PixelWand>)>();

  ffi.Pointer<PixelWand> ClonePixelWand(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _ClonePixelWand(
      arg0,
    );
  }

  late final _ClonePixelWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PixelWand> Function(
              ffi.Pointer<PixelWand>)>>('ClonePixelWand');
  late final _ClonePixelWand = _ClonePixelWandPtr.asFunction<
      ffi.Pointer<PixelWand> Function(ffi.Pointer<PixelWand>)>();

  ffi.Pointer<ffi.Pointer<PixelWand>> ClonePixelWands(
    ffi.Pointer<ffi.Pointer<PixelWand>> arg0,
    int arg1,
  ) {
    return _ClonePixelWands(
      arg0,
      arg1,
    );
  }

  late final _ClonePixelWandsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<PixelWand>> Function(
              ffi.Pointer<ffi.Pointer<PixelWand>>,
              ffi.Size)>>('ClonePixelWands');
  late final _ClonePixelWands = _ClonePixelWandsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<PixelWand>> Function(
          ffi.Pointer<ffi.Pointer<PixelWand>>, int)>();

  ffi.Pointer<PixelWand> DestroyPixelWand(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _DestroyPixelWand(
      arg0,
    );
  }

  late final _DestroyPixelWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PixelWand> Function(
              ffi.Pointer<PixelWand>)>>('DestroyPixelWand');
  late final _DestroyPixelWand = _DestroyPixelWandPtr.asFunction<
      ffi.Pointer<PixelWand> Function(ffi.Pointer<PixelWand>)>();

  ffi.Pointer<ffi.Pointer<PixelWand>> DestroyPixelWands(
    ffi.Pointer<ffi.Pointer<PixelWand>> arg0,
    int arg1,
  ) {
    return _DestroyPixelWands(
      arg0,
      arg1,
    );
  }

  late final _DestroyPixelWandsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<PixelWand>> Function(
              ffi.Pointer<ffi.Pointer<PixelWand>>,
              ffi.Size)>>('DestroyPixelWands');
  late final _DestroyPixelWands = _DestroyPixelWandsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<PixelWand>> Function(
          ffi.Pointer<ffi.Pointer<PixelWand>>, int)>();

  ffi.Pointer<PixelWand> NewPixelWand() {
    return _NewPixelWand();
  }

  late final _NewPixelWandPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<PixelWand> Function()>>(
          'NewPixelWand');
  late final _NewPixelWand =
      _NewPixelWandPtr.asFunction<ffi.Pointer<PixelWand> Function()>();

  ffi.Pointer<ffi.Pointer<PixelWand>> NewPixelWands(
    int arg0,
  ) {
    return _NewPixelWands(
      arg0,
    );
  }

  late final _NewPixelWandsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<PixelWand>> Function(
              ffi.Size)>>('NewPixelWands');
  late final _NewPixelWands = _NewPixelWandsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<PixelWand>> Function(int)>();

  int PixelGetAlphaQuantum(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetAlphaQuantum(
      arg0,
    );
  }

  late final _PixelGetAlphaQuantumPtr =
      _lookup<ffi.NativeFunction<Quantum Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetAlphaQuantum');
  late final _PixelGetAlphaQuantum = _PixelGetAlphaQuantumPtr.asFunction<
      int Function(ffi.Pointer<PixelWand>)>();

  int PixelGetBlackQuantum(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetBlackQuantum(
      arg0,
    );
  }

  late final _PixelGetBlackQuantumPtr =
      _lookup<ffi.NativeFunction<Quantum Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetBlackQuantum');
  late final _PixelGetBlackQuantum = _PixelGetBlackQuantumPtr.asFunction<
      int Function(ffi.Pointer<PixelWand>)>();

  int PixelGetBlueQuantum(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetBlueQuantum(
      arg0,
    );
  }

  late final _PixelGetBlueQuantumPtr =
      _lookup<ffi.NativeFunction<Quantum Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetBlueQuantum');
  late final _PixelGetBlueQuantum = _PixelGetBlueQuantumPtr.asFunction<
      int Function(ffi.Pointer<PixelWand>)>();

  int PixelGetCyanQuantum(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetCyanQuantum(
      arg0,
    );
  }

  late final _PixelGetCyanQuantumPtr =
      _lookup<ffi.NativeFunction<Quantum Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetCyanQuantum');
  late final _PixelGetCyanQuantum = _PixelGetCyanQuantumPtr.asFunction<
      int Function(ffi.Pointer<PixelWand>)>();

  int PixelGetGreenQuantum(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetGreenQuantum(
      arg0,
    );
  }

  late final _PixelGetGreenQuantumPtr =
      _lookup<ffi.NativeFunction<Quantum Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetGreenQuantum');
  late final _PixelGetGreenQuantum = _PixelGetGreenQuantumPtr.asFunction<
      int Function(ffi.Pointer<PixelWand>)>();

  int PixelGetIndex(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetIndex(
      arg0,
    );
  }

  late final _PixelGetIndexPtr =
      _lookup<ffi.NativeFunction<Quantum Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetIndex');
  late final _PixelGetIndex =
      _PixelGetIndexPtr.asFunction<int Function(ffi.Pointer<PixelWand>)>();

  int PixelGetMagentaQuantum(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetMagentaQuantum(
      arg0,
    );
  }

  late final _PixelGetMagentaQuantumPtr =
      _lookup<ffi.NativeFunction<Quantum Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetMagentaQuantum');
  late final _PixelGetMagentaQuantum = _PixelGetMagentaQuantumPtr.asFunction<
      int Function(ffi.Pointer<PixelWand>)>();

  int PixelGetRedQuantum(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetRedQuantum(
      arg0,
    );
  }

  late final _PixelGetRedQuantumPtr =
      _lookup<ffi.NativeFunction<Quantum Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetRedQuantum');
  late final _PixelGetRedQuantum =
      _PixelGetRedQuantumPtr.asFunction<int Function(ffi.Pointer<PixelWand>)>();

  int PixelGetYellowQuantum(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetYellowQuantum(
      arg0,
    );
  }

  late final _PixelGetYellowQuantumPtr =
      _lookup<ffi.NativeFunction<Quantum Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetYellowQuantum');
  late final _PixelGetYellowQuantum = _PixelGetYellowQuantumPtr.asFunction<
      int Function(ffi.Pointer<PixelWand>)>();

  int PixelGetColorCount(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _PixelGetColorCount(
      arg0,
    );
  }

  late final _PixelGetColorCountPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<PixelWand>)>>(
          'PixelGetColorCount');
  late final _PixelGetColorCount =
      _PixelGetColorCountPtr.asFunction<int Function(ffi.Pointer<PixelWand>)>();

  void ClearPixelWand(
    ffi.Pointer<PixelWand> arg0,
  ) {
    return _ClearPixelWand(
      arg0,
    );
  }

  late final _ClearPixelWandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PixelWand>)>>(
          'ClearPixelWand');
  late final _ClearPixelWand =
      _ClearPixelWandPtr.asFunction<void Function(ffi.Pointer<PixelWand>)>();

  void PixelGetHSL(
    ffi.Pointer<PixelWand> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
    ffi.Pointer<ffi.Double> arg3,
  ) {
    return _PixelGetHSL(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PixelGetHSLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('PixelGetHSL');
  late final _PixelGetHSL = _PixelGetHSLPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  void PixelGetMagickColor(
    ffi.Pointer<PixelWand> arg0,
    ffi.Pointer<PixelInfo> arg1,
  ) {
    return _PixelGetMagickColor(
      arg0,
      arg1,
    );
  }

  late final _PixelGetMagickColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PixelWand>,
              ffi.Pointer<PixelInfo>)>>('PixelGetMagickColor');
  late final _PixelGetMagickColor = _PixelGetMagickColorPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, ffi.Pointer<PixelInfo>)>();

  void PixelGetQuantumPacket(
    ffi.Pointer<PixelWand> arg0,
    ffi.Pointer<PixelInfo> arg1,
  ) {
    return _PixelGetQuantumPacket(
      arg0,
      arg1,
    );
  }

  late final _PixelGetQuantumPacketPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PixelWand>,
              ffi.Pointer<PixelInfo>)>>('PixelGetQuantumPacket');
  late final _PixelGetQuantumPacket = _PixelGetQuantumPacketPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, ffi.Pointer<PixelInfo>)>();

  void PixelGetQuantumPixel(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<PixelWand> arg1,
    ffi.Pointer<Quantum> arg2,
  ) {
    return _PixelGetQuantumPixel(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PixelGetQuantumPixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Pointer<PixelWand>,
              ffi.Pointer<Quantum>)>>('PixelGetQuantumPixel');
  late final _PixelGetQuantumPixel = _PixelGetQuantumPixelPtr.asFunction<
      void Function(
          ffi.Pointer<Image>, ffi.Pointer<PixelWand>, ffi.Pointer<Quantum>)>();

  void PixelSetAlpha(
    ffi.Pointer<PixelWand> arg0,
    double arg1,
  ) {
    return _PixelSetAlpha(
      arg0,
      arg1,
    );
  }

  late final _PixelSetAlphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, ffi.Double)>>('PixelSetAlpha');
  late final _PixelSetAlpha = _PixelSetAlphaPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, double)>();

  void PixelSetAlphaQuantum(
    ffi.Pointer<PixelWand> arg0,
    int arg1,
  ) {
    return _PixelSetAlphaQuantum(
      arg0,
      arg1,
    );
  }

  late final _PixelSetAlphaQuantumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, Quantum)>>('PixelSetAlphaQuantum');
  late final _PixelSetAlphaQuantum = _PixelSetAlphaQuantumPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, int)>();

  void PixelSetBlack(
    ffi.Pointer<PixelWand> arg0,
    double arg1,
  ) {
    return _PixelSetBlack(
      arg0,
      arg1,
    );
  }

  late final _PixelSetBlackPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, ffi.Double)>>('PixelSetBlack');
  late final _PixelSetBlack = _PixelSetBlackPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, double)>();

  void PixelSetBlackQuantum(
    ffi.Pointer<PixelWand> arg0,
    int arg1,
  ) {
    return _PixelSetBlackQuantum(
      arg0,
      arg1,
    );
  }

  late final _PixelSetBlackQuantumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, Quantum)>>('PixelSetBlackQuantum');
  late final _PixelSetBlackQuantum = _PixelSetBlackQuantumPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, int)>();

  void PixelSetBlue(
    ffi.Pointer<PixelWand> arg0,
    double arg1,
  ) {
    return _PixelSetBlue(
      arg0,
      arg1,
    );
  }

  late final _PixelSetBluePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, ffi.Double)>>('PixelSetBlue');
  late final _PixelSetBlue = _PixelSetBluePtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, double)>();

  void PixelSetBlueQuantum(
    ffi.Pointer<PixelWand> arg0,
    int arg1,
  ) {
    return _PixelSetBlueQuantum(
      arg0,
      arg1,
    );
  }

  late final _PixelSetBlueQuantumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, Quantum)>>('PixelSetBlueQuantum');
  late final _PixelSetBlueQuantum = _PixelSetBlueQuantumPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, int)>();

  void PixelSetColorFromWand(
    ffi.Pointer<PixelWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _PixelSetColorFromWand(
      arg0,
      arg1,
    );
  }

  late final _PixelSetColorFromWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PixelWand>,
              ffi.Pointer<PixelWand>)>>('PixelSetColorFromWand');
  late final _PixelSetColorFromWand = _PixelSetColorFromWandPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, ffi.Pointer<PixelWand>)>();

  void PixelSetColorCount(
    ffi.Pointer<PixelWand> arg0,
    int arg1,
  ) {
    return _PixelSetColorCount(
      arg0,
      arg1,
    );
  }

  late final _PixelSetColorCountPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, ffi.Size)>>('PixelSetColorCount');
  late final _PixelSetColorCount = _PixelSetColorCountPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, int)>();

  void PixelSetCyan(
    ffi.Pointer<PixelWand> arg0,
    double arg1,
  ) {
    return _PixelSetCyan(
      arg0,
      arg1,
    );
  }

  late final _PixelSetCyanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, ffi.Double)>>('PixelSetCyan');
  late final _PixelSetCyan = _PixelSetCyanPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, double)>();

  void PixelSetCyanQuantum(
    ffi.Pointer<PixelWand> arg0,
    int arg1,
  ) {
    return _PixelSetCyanQuantum(
      arg0,
      arg1,
    );
  }

  late final _PixelSetCyanQuantumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, Quantum)>>('PixelSetCyanQuantum');
  late final _PixelSetCyanQuantum = _PixelSetCyanQuantumPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, int)>();

  void PixelSetFuzz(
    ffi.Pointer<PixelWand> arg0,
    double arg1,
  ) {
    return _PixelSetFuzz(
      arg0,
      arg1,
    );
  }

  late final _PixelSetFuzzPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, ffi.Double)>>('PixelSetFuzz');
  late final _PixelSetFuzz = _PixelSetFuzzPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, double)>();

  void PixelSetGreen(
    ffi.Pointer<PixelWand> arg0,
    double arg1,
  ) {
    return _PixelSetGreen(
      arg0,
      arg1,
    );
  }

  late final _PixelSetGreenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, ffi.Double)>>('PixelSetGreen');
  late final _PixelSetGreen = _PixelSetGreenPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, double)>();

  void PixelSetGreenQuantum(
    ffi.Pointer<PixelWand> arg0,
    int arg1,
  ) {
    return _PixelSetGreenQuantum(
      arg0,
      arg1,
    );
  }

  late final _PixelSetGreenQuantumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, Quantum)>>('PixelSetGreenQuantum');
  late final _PixelSetGreenQuantum = _PixelSetGreenQuantumPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, int)>();

  void PixelSetHSL(
    ffi.Pointer<PixelWand> arg0,
    double arg1,
    double arg2,
    double arg3,
  ) {
    return _PixelSetHSL(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _PixelSetHSLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PixelWand>, ffi.Double, ffi.Double,
              ffi.Double)>>('PixelSetHSL');
  late final _PixelSetHSL = _PixelSetHSLPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, double, double, double)>();

  void PixelSetIndex(
    ffi.Pointer<PixelWand> arg0,
    int arg1,
  ) {
    return _PixelSetIndex(
      arg0,
      arg1,
    );
  }

  late final _PixelSetIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PixelWand>, Quantum)>>('PixelSetIndex');
  late final _PixelSetIndex = _PixelSetIndexPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, int)>();

  void PixelSetMagenta(
    ffi.Pointer<PixelWand> arg0,
    double arg1,
  ) {
    return _PixelSetMagenta(
      arg0,
      arg1,
    );
  }

  late final _PixelSetMagentaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, ffi.Double)>>('PixelSetMagenta');
  late final _PixelSetMagenta = _PixelSetMagentaPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, double)>();

  void PixelSetMagentaQuantum(
    ffi.Pointer<PixelWand> arg0,
    int arg1,
  ) {
    return _PixelSetMagentaQuantum(
      arg0,
      arg1,
    );
  }

  late final _PixelSetMagentaQuantumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, Quantum)>>('PixelSetMagentaQuantum');
  late final _PixelSetMagentaQuantum = _PixelSetMagentaQuantumPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, int)>();

  void PixelSetPixelColor(
    ffi.Pointer<PixelWand> arg0,
    ffi.Pointer<PixelInfo> arg1,
  ) {
    return _PixelSetPixelColor(
      arg0,
      arg1,
    );
  }

  late final _PixelSetPixelColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<PixelWand>,
              ffi.Pointer<PixelInfo>)>>('PixelSetPixelColor');
  late final _PixelSetPixelColor = _PixelSetPixelColorPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, ffi.Pointer<PixelInfo>)>();

  void PixelSetQuantumPixel(
    ffi.Pointer<Image> arg0,
    ffi.Pointer<Quantum> arg1,
    ffi.Pointer<PixelWand> arg2,
  ) {
    return _PixelSetQuantumPixel(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _PixelSetQuantumPixelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<Image>, ffi.Pointer<Quantum>,
              ffi.Pointer<PixelWand>)>>('PixelSetQuantumPixel');
  late final _PixelSetQuantumPixel = _PixelSetQuantumPixelPtr.asFunction<
      void Function(
          ffi.Pointer<Image>, ffi.Pointer<Quantum>, ffi.Pointer<PixelWand>)>();

  void PixelSetRed(
    ffi.Pointer<PixelWand> arg0,
    double arg1,
  ) {
    return _PixelSetRed(
      arg0,
      arg1,
    );
  }

  late final _PixelSetRedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, ffi.Double)>>('PixelSetRed');
  late final _PixelSetRed = _PixelSetRedPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, double)>();

  void PixelSetRedQuantum(
    ffi.Pointer<PixelWand> arg0,
    int arg1,
  ) {
    return _PixelSetRedQuantum(
      arg0,
      arg1,
    );
  }

  late final _PixelSetRedQuantumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, Quantum)>>('PixelSetRedQuantum');
  late final _PixelSetRedQuantum = _PixelSetRedQuantumPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, int)>();

  void PixelSetYellow(
    ffi.Pointer<PixelWand> arg0,
    double arg1,
  ) {
    return _PixelSetYellow(
      arg0,
      arg1,
    );
  }

  late final _PixelSetYellowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, ffi.Double)>>('PixelSetYellow');
  late final _PixelSetYellow = _PixelSetYellowPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, double)>();

  void PixelSetYellowQuantum(
    ffi.Pointer<PixelWand> arg0,
    int arg1,
  ) {
    return _PixelSetYellowQuantum(
      arg0,
      arg1,
    );
  }

  late final _PixelSetYellowQuantumPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<PixelWand>, Quantum)>>('PixelSetYellowQuantum');
  late final _PixelSetYellowQuantum = _PixelSetYellowQuantumPtr.asFunction<
      void Function(ffi.Pointer<PixelWand>, int)>();

  int DisplayImageCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _DisplayImageCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DisplayImageCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('DisplayImageCommand');
  late final _DisplayImageCommand = _DisplayImageCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  int DrawGetTextAlignment(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetTextAlignment(
      arg0,
    );
  }

  late final _DrawGetTextAlignmentPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetTextAlignment');
  late final _DrawGetTextAlignment = _DrawGetTextAlignmentPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  ffi.Pointer<ffi.Char> DrawGetClipPath(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetClipPath(
      arg0,
    );
  }

  late final _DrawGetClipPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DrawingWand>)>>('DrawGetClipPath');
  late final _DrawGetClipPath = _DrawGetClipPathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DrawingWand>)>();

  ffi.Pointer<ffi.Char> DrawGetDensity(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetDensity(
      arg0,
    );
  }

  late final _DrawGetDensityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DrawingWand>)>>('DrawGetDensity');
  late final _DrawGetDensity = _DrawGetDensityPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DrawingWand>)>();

  ffi.Pointer<ffi.Char> DrawGetException(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    return _DrawGetException(
      arg0,
      arg1,
    );
  }

  late final _DrawGetExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Int32>)>>('DrawGetException');
  late final _DrawGetException = _DrawGetExceptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Int32>)>();

  ffi.Pointer<ffi.Char> DrawGetFont(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetFont(
      arg0,
    );
  }

  late final _DrawGetFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DrawingWand>)>>('DrawGetFont');
  late final _DrawGetFont = _DrawGetFontPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DrawingWand>)>();

  ffi.Pointer<ffi.Char> DrawGetFontFamily(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetFontFamily(
      arg0,
    );
  }

  late final _DrawGetFontFamilyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DrawingWand>)>>('DrawGetFontFamily');
  late final _DrawGetFontFamily = _DrawGetFontFamilyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DrawingWand>)>();

  ffi.Pointer<ffi.Char> DrawGetTextEncoding(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetTextEncoding(
      arg0,
    );
  }

  late final _DrawGetTextEncodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DrawingWand>)>>('DrawGetTextEncoding');
  late final _DrawGetTextEncoding = _DrawGetTextEncodingPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DrawingWand>)>();

  ffi.Pointer<ffi.Char> DrawGetVectorGraphics(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetVectorGraphics(
      arg0,
    );
  }

  late final _DrawGetVectorGraphicsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<DrawingWand>)>>('DrawGetVectorGraphics');
  late final _DrawGetVectorGraphics = _DrawGetVectorGraphicsPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetClipUnits(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetClipUnits(
      arg0,
    );
  }

  late final _DrawGetClipUnitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetClipUnits');
  late final _DrawGetClipUnits =
      _DrawGetClipUnitsPtr.asFunction<int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetTextDecoration(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetTextDecoration(
      arg0,
    );
  }

  late final _DrawGetTextDecorationPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetTextDecoration');
  late final _DrawGetTextDecoration = _DrawGetTextDecorationPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetTextDirection(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetTextDirection(
      arg0,
    );
  }

  late final _DrawGetTextDirectionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetTextDirection');
  late final _DrawGetTextDirection = _DrawGetTextDirectionPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  double DrawGetFillOpacity(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetFillOpacity(
      arg0,
    );
  }

  late final _DrawGetFillOpacityPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<DrawingWand>)>>(
      'DrawGetFillOpacity');
  late final _DrawGetFillOpacity = _DrawGetFillOpacityPtr.asFunction<
      double Function(ffi.Pointer<DrawingWand>)>();

  double DrawGetFontSize(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetFontSize(
      arg0,
    );
  }

  late final _DrawGetFontSizePtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<DrawingWand>)>>(
      'DrawGetFontSize');
  late final _DrawGetFontSize = _DrawGetFontSizePtr.asFunction<
      double Function(ffi.Pointer<DrawingWand>)>();

  double DrawGetOpacity(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetOpacity(
      arg0,
    );
  }

  late final _DrawGetOpacityPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<DrawingWand>)>>(
      'DrawGetOpacity');
  late final _DrawGetOpacity = _DrawGetOpacityPtr.asFunction<
      double Function(ffi.Pointer<DrawingWand>)>();

  ffi.Pointer<ffi.Double> DrawGetStrokeDashArray(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _DrawGetStrokeDashArray(
      arg0,
      arg1,
    );
  }

  late final _DrawGetStrokeDashArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Size>)>>('DrawGetStrokeDashArray');
  late final _DrawGetStrokeDashArray = _DrawGetStrokeDashArrayPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(
          ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Size>)>();

  double DrawGetStrokeDashOffset(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetStrokeDashOffset(
      arg0,
    );
  }

  late final _DrawGetStrokeDashOffsetPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<DrawingWand>)>>(
      'DrawGetStrokeDashOffset');
  late final _DrawGetStrokeDashOffset = _DrawGetStrokeDashOffsetPtr.asFunction<
      double Function(ffi.Pointer<DrawingWand>)>();

  double DrawGetStrokeOpacity(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetStrokeOpacity(
      arg0,
    );
  }

  late final _DrawGetStrokeOpacityPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<DrawingWand>)>>(
      'DrawGetStrokeOpacity');
  late final _DrawGetStrokeOpacity = _DrawGetStrokeOpacityPtr.asFunction<
      double Function(ffi.Pointer<DrawingWand>)>();

  double DrawGetStrokeWidth(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetStrokeWidth(
      arg0,
    );
  }

  late final _DrawGetStrokeWidthPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<DrawingWand>)>>(
      'DrawGetStrokeWidth');
  late final _DrawGetStrokeWidth = _DrawGetStrokeWidthPtr.asFunction<
      double Function(ffi.Pointer<DrawingWand>)>();

  double DrawGetTextKerning(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetTextKerning(
      arg0,
    );
  }

  late final _DrawGetTextKerningPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<DrawingWand>)>>(
      'DrawGetTextKerning');
  late final _DrawGetTextKerning = _DrawGetTextKerningPtr.asFunction<
      double Function(ffi.Pointer<DrawingWand>)>();

  double DrawGetTextInterlineSpacing(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetTextInterlineSpacing(
      arg0,
    );
  }

  late final _DrawGetTextInterlineSpacingPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<DrawingWand>)>>(
      'DrawGetTextInterlineSpacing');
  late final _DrawGetTextInterlineSpacing = _DrawGetTextInterlineSpacingPtr
      .asFunction<double Function(ffi.Pointer<DrawingWand>)>();

  double DrawGetTextInterwordSpacing(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetTextInterwordSpacing(
      arg0,
    );
  }

  late final _DrawGetTextInterwordSpacingPtr = _lookup<
          ffi.NativeFunction<ffi.Double Function(ffi.Pointer<DrawingWand>)>>(
      'DrawGetTextInterwordSpacing');
  late final _DrawGetTextInterwordSpacing = _DrawGetTextInterwordSpacingPtr
      .asFunction<double Function(ffi.Pointer<DrawingWand>)>();

  ffi.Pointer<DrawInfo> PeekDrawingWand(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _PeekDrawingWand(
      arg0,
    );
  }

  late final _PeekDrawingWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DrawInfo> Function(
              ffi.Pointer<DrawingWand>)>>('PeekDrawingWand');
  late final _PeekDrawingWand = _PeekDrawingWandPtr.asFunction<
      ffi.Pointer<DrawInfo> Function(ffi.Pointer<DrawingWand>)>();

  ffi.Pointer<DrawingWand> AcquireDrawingWand(
    ffi.Pointer<DrawInfo> arg0,
    ffi.Pointer<Image> arg1,
  ) {
    return _AcquireDrawingWand(
      arg0,
      arg1,
    );
  }

  late final _AcquireDrawingWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DrawingWand> Function(ffi.Pointer<DrawInfo>,
              ffi.Pointer<Image>)>>('AcquireDrawingWand');
  late final _AcquireDrawingWand = _AcquireDrawingWandPtr.asFunction<
      ffi.Pointer<DrawingWand> Function(
          ffi.Pointer<DrawInfo>, ffi.Pointer<Image>)>();

  ffi.Pointer<DrawingWand> CloneDrawingWand(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _CloneDrawingWand(
      arg0,
    );
  }

  late final _CloneDrawingWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DrawingWand> Function(
              ffi.Pointer<DrawingWand>)>>('CloneDrawingWand');
  late final _CloneDrawingWand = _CloneDrawingWandPtr.asFunction<
      ffi.Pointer<DrawingWand> Function(ffi.Pointer<DrawingWand>)>();

  ffi.Pointer<DrawingWand> DestroyDrawingWand(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DestroyDrawingWand(
      arg0,
    );
  }

  late final _DestroyDrawingWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<DrawingWand> Function(
              ffi.Pointer<DrawingWand>)>>('DestroyDrawingWand');
  late final _DestroyDrawingWand = _DestroyDrawingWandPtr.asFunction<
      ffi.Pointer<DrawingWand> Function(ffi.Pointer<DrawingWand>)>();

  ffi.Pointer<DrawingWand> NewDrawingWand() {
    return _NewDrawingWand();
  }

  late final _NewDrawingWandPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DrawingWand> Function()>>(
          'NewDrawingWand');
  late final _NewDrawingWand =
      _NewDrawingWandPtr.asFunction<ffi.Pointer<DrawingWand> Function()>();

  ffi.Pointer<ExceptionInfo> DrawCloneExceptionInfo(
    ffi.Pointer<DrawingWand> wand,
  ) {
    return _DrawCloneExceptionInfo(
      wand,
    );
  }

  late final _DrawCloneExceptionInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ExceptionInfo> Function(
              ffi.Pointer<DrawingWand>)>>('DrawCloneExceptionInfo');
  late final _DrawCloneExceptionInfo = _DrawCloneExceptionInfoPtr.asFunction<
      ffi.Pointer<ExceptionInfo> Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetExceptionType(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetExceptionType(
      arg0,
    );
  }

  late final _DrawGetExceptionTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetExceptionType');
  late final _DrawGetExceptionType = _DrawGetExceptionTypePtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetClipRule(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetClipRule(
      arg0,
    );
  }

  late final _DrawGetClipRulePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetClipRule');
  late final _DrawGetClipRule =
      _DrawGetClipRulePtr.asFunction<int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetFillRule(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetFillRule(
      arg0,
    );
  }

  late final _DrawGetFillRulePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetFillRule');
  late final _DrawGetFillRule =
      _DrawGetFillRulePtr.asFunction<int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetGravity(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetGravity(
      arg0,
    );
  }

  late final _DrawGetGravityPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetGravity');
  late final _DrawGetGravity =
      _DrawGetGravityPtr.asFunction<int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetStrokeLineCap(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetStrokeLineCap(
      arg0,
    );
  }

  late final _DrawGetStrokeLineCapPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetStrokeLineCap');
  late final _DrawGetStrokeLineCap = _DrawGetStrokeLineCapPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetStrokeLineJoin(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetStrokeLineJoin(
      arg0,
    );
  }

  late final _DrawGetStrokeLineJoinPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetStrokeLineJoin');
  late final _DrawGetStrokeLineJoin = _DrawGetStrokeLineJoinPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  int DrawClearException(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawClearException(
      arg0,
    );
  }

  late final _DrawClearExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawClearException');
  late final _DrawClearException = _DrawClearExceptionPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  int DrawComposite(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
    double arg2,
    double arg3,
    double arg4,
    double arg5,
    ffi.Pointer<MagickWand> arg6,
  ) {
    return _DrawComposite(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _DrawCompositePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<DrawingWand>,
              ffi.Int32,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<MagickWand>)>>('DrawComposite');
  late final _DrawComposite = _DrawCompositePtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, int, double, double, double,
          double, ffi.Pointer<MagickWand>)>();

  int DrawGetFontResolution(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
  ) {
    return _DrawGetFontResolution(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawGetFontResolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('DrawGetFontResolution');
  late final _DrawGetFontResolution = _DrawGetFontResolutionPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int DrawGetStrokeAntialias(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetStrokeAntialias(
      arg0,
    );
  }

  late final _DrawGetStrokeAntialiasPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetStrokeAntialias');
  late final _DrawGetStrokeAntialias = _DrawGetStrokeAntialiasPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetTextAntialias(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetTextAntialias(
      arg0,
    );
  }

  late final _DrawGetTextAntialiasPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetTextAntialias');
  late final _DrawGetTextAntialias = _DrawGetTextAntialiasPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetTypeMetrics(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<TypeMetric> arg3,
  ) {
    return _DrawGetTypeMetrics(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _DrawGetTypeMetricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>,
              ffi.Int32, ffi.Pointer<TypeMetric>)>>('DrawGetTypeMetrics');
  late final _DrawGetTypeMetrics = _DrawGetTypeMetricsPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<TypeMetric>)>();

  int DrawPopPattern(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawPopPattern(
      arg0,
    );
  }

  late final _DrawPopPatternPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawPopPattern');
  late final _DrawPopPattern =
      _DrawPopPatternPtr.asFunction<int Function(ffi.Pointer<DrawingWand>)>();

  int DrawPushPattern(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    double arg2,
    double arg3,
    double arg4,
    double arg5,
  ) {
    return _DrawPushPattern(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _DrawPushPatternPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('DrawPushPattern');
  late final _DrawPushPattern = _DrawPushPatternPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>, double,
          double, double, double)>();

  int DrawRender(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawRender(
      arg0,
    );
  }

  late final _DrawRenderPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawRender');
  late final _DrawRender =
      _DrawRenderPtr.asFunction<int Function(ffi.Pointer<DrawingWand>)>();

  int DrawSetClipPath(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DrawSetClipPath(
      arg0,
      arg1,
    );
  }

  late final _DrawSetClipPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>)>>('DrawSetClipPath');
  late final _DrawSetClipPath = _DrawSetClipPathPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  int DrawSetDensity(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DrawSetDensity(
      arg0,
      arg1,
    );
  }

  late final _DrawSetDensityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>)>>('DrawSetDensity');
  late final _DrawSetDensity = _DrawSetDensityPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  int DrawSetFillPatternURL(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DrawSetFillPatternURL(
      arg0,
      arg1,
    );
  }

  late final _DrawSetFillPatternURLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>)>>('DrawSetFillPatternURL');
  late final _DrawSetFillPatternURL = _DrawSetFillPatternURLPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  int DrawSetFont(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DrawSetFont(
      arg0,
      arg1,
    );
  }

  late final _DrawSetFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>>('DrawSetFont');
  late final _DrawSetFont = _DrawSetFontPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  int DrawSetFontFamily(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DrawSetFontFamily(
      arg0,
      arg1,
    );
  }

  late final _DrawSetFontFamilyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>)>>('DrawSetFontFamily');
  late final _DrawSetFontFamily = _DrawSetFontFamilyPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  int DrawSetFontResolution(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _DrawSetFontResolution(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawSetFontResolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<DrawingWand>, ffi.Double,
              ffi.Double)>>('DrawSetFontResolution');
  late final _DrawSetFontResolution = _DrawSetFontResolutionPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, double, double)>();

  int DrawSetStrokeDashArray(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
    ffi.Pointer<ffi.Double> arg2,
  ) {
    return _DrawSetStrokeDashArray(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawSetStrokeDashArrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<DrawingWand>, ffi.Size,
              ffi.Pointer<ffi.Double>)>>('DrawSetStrokeDashArray');
  late final _DrawSetStrokeDashArray = _DrawSetStrokeDashArrayPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, int, ffi.Pointer<ffi.Double>)>();

  int DrawSetStrokePatternURL(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DrawSetStrokePatternURL(
      arg0,
      arg1,
    );
  }

  late final _DrawSetStrokePatternURLPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>)>>('DrawSetStrokePatternURL');
  late final _DrawSetStrokePatternURL = _DrawSetStrokePatternURLPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  int DrawSetVectorGraphics(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DrawSetVectorGraphics(
      arg0,
      arg1,
    );
  }

  late final _DrawSetVectorGraphicsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>)>>('DrawSetVectorGraphics');
  late final _DrawSetVectorGraphics = _DrawSetVectorGraphicsPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  int IsDrawingWand(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _IsDrawingWand(
      arg0,
    );
  }

  late final _IsDrawingWandPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'IsDrawingWand');
  late final _IsDrawingWand =
      _IsDrawingWandPtr.asFunction<int Function(ffi.Pointer<DrawingWand>)>();

  int PopDrawingWand(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _PopDrawingWand(
      arg0,
    );
  }

  late final _PopDrawingWandPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'PopDrawingWand');
  late final _PopDrawingWand =
      _PopDrawingWandPtr.asFunction<int Function(ffi.Pointer<DrawingWand>)>();

  int PushDrawingWand(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _PushDrawingWand(
      arg0,
    );
  }

  late final _PushDrawingWandPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'PushDrawingWand');
  late final _PushDrawingWand =
      _PushDrawingWandPtr.asFunction<int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetFontStretch(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetFontStretch(
      arg0,
    );
  }

  late final _DrawGetFontStretchPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetFontStretch');
  late final _DrawGetFontStretch = _DrawGetFontStretchPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetFontStyle(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetFontStyle(
      arg0,
    );
  }

  late final _DrawGetFontStylePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetFontStyle');
  late final _DrawGetFontStyle =
      _DrawGetFontStylePtr.asFunction<int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetFontWeight(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetFontWeight(
      arg0,
    );
  }

  late final _DrawGetFontWeightPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetFontWeight');
  late final _DrawGetFontWeight = _DrawGetFontWeightPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  int DrawGetStrokeMiterLimit(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawGetStrokeMiterLimit(
      arg0,
    );
  }

  late final _DrawGetStrokeMiterLimitPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<DrawingWand>)>>(
          'DrawGetStrokeMiterLimit');
  late final _DrawGetStrokeMiterLimit = _DrawGetStrokeMiterLimitPtr.asFunction<
      int Function(ffi.Pointer<DrawingWand>)>();

  void ClearDrawingWand(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _ClearDrawingWand(
      arg0,
    );
  }

  late final _ClearDrawingWandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DrawingWand>)>>(
          'ClearDrawingWand');
  late final _ClearDrawingWand = _ClearDrawingWandPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>)>();

  void DrawAffine(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<AffineMatrix> arg1,
  ) {
    return _DrawAffine(
      arg0,
      arg1,
    );
  }

  late final _DrawAffinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<AffineMatrix>)>>('DrawAffine');
  late final _DrawAffine = _DrawAffinePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<AffineMatrix>)>();

  void DrawAlpha(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    int arg3,
  ) {
    return _DrawAlpha(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _DrawAlphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double,
              ffi.Int32)>>('DrawAlpha');
  late final _DrawAlpha = _DrawAlphaPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double, int)>();

  void DrawAnnotation(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    ffi.Pointer<ffi.UnsignedChar> arg3,
  ) {
    return _DrawAnnotation(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _DrawAnnotationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double,
              ffi.Pointer<ffi.UnsignedChar>)>>('DrawAnnotation');
  late final _DrawAnnotation = _DrawAnnotationPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double,
          ffi.Pointer<ffi.UnsignedChar>)>();

  void DrawArc(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
    double arg5,
    double arg6,
  ) {
    return _DrawArc(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _DrawArcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double, ffi.Double, ffi.Double)>>('DrawArc');
  late final _DrawArc = _DrawArcPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double, double, double,
          double, double)>();

  void DrawBezier(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
    ffi.Pointer<PointInfo> arg2,
  ) {
    return _DrawBezier(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawBezierPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Size,
              ffi.Pointer<PointInfo>)>>('DrawBezier');
  late final _DrawBezier = _DrawBezierPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int, ffi.Pointer<PointInfo>)>();

  void DrawGetBorderColor(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _DrawGetBorderColor(
      arg0,
      arg1,
    );
  }

  late final _DrawGetBorderColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<PixelWand>)>>('DrawGetBorderColor');
  late final _DrawGetBorderColor = _DrawGetBorderColorPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<PixelWand>)>();

  void DrawCircle(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _DrawCircle(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DrawCirclePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('DrawCircle');
  late final _DrawCircle = _DrawCirclePtr.asFunction<
      void Function(
          ffi.Pointer<DrawingWand>, double, double, double, double)>();

  void DrawColor(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    int arg3,
  ) {
    return _DrawColor(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _DrawColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double,
              ffi.Int32)>>('DrawColor');
  late final _DrawColor = _DrawColorPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double, int)>();

  void DrawComment(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DrawComment(
      arg0,
      arg1,
    );
  }

  late final _DrawCommentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>>('DrawComment');
  late final _DrawComment = _DrawCommentPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  void DrawEllipse(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
    double arg5,
    double arg6,
  ) {
    return _DrawEllipse(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _DrawEllipsePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double, ffi.Double, ffi.Double)>>('DrawEllipse');
  late final _DrawEllipse = _DrawEllipsePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double, double, double,
          double, double)>();

  void DrawGetFillColor(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _DrawGetFillColor(
      arg0,
      arg1,
    );
  }

  late final _DrawGetFillColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<PixelWand>)>>('DrawGetFillColor');
  late final _DrawGetFillColor = _DrawGetFillColorPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<PixelWand>)>();

  void DrawGetStrokeColor(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _DrawGetStrokeColor(
      arg0,
      arg1,
    );
  }

  late final _DrawGetStrokeColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<PixelWand>)>>('DrawGetStrokeColor');
  late final _DrawGetStrokeColor = _DrawGetStrokeColorPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<PixelWand>)>();

  void DrawSetTextKerning(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawSetTextKerning(
      arg0,
      arg1,
    );
  }

  late final _DrawSetTextKerningPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Double)>>('DrawSetTextKerning');
  late final _DrawSetTextKerning = _DrawSetTextKerningPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawSetTextInterlineSpacing(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawSetTextInterlineSpacing(
      arg0,
      arg1,
    );
  }

  late final _DrawSetTextInterlineSpacingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Double)>>('DrawSetTextInterlineSpacing');
  late final _DrawSetTextInterlineSpacing = _DrawSetTextInterlineSpacingPtr
      .asFunction<void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawSetTextInterwordSpacing(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawSetTextInterwordSpacing(
      arg0,
      arg1,
    );
  }

  late final _DrawSetTextInterwordSpacingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Double)>>('DrawSetTextInterwordSpacing');
  late final _DrawSetTextInterwordSpacing = _DrawSetTextInterwordSpacingPtr
      .asFunction<void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawGetTextUnderColor(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _DrawGetTextUnderColor(
      arg0,
      arg1,
    );
  }

  late final _DrawGetTextUnderColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<PixelWand>)>>('DrawGetTextUnderColor');
  late final _DrawGetTextUnderColor = _DrawGetTextUnderColorPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<PixelWand>)>();

  void DrawLine(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _DrawLine(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DrawLinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('DrawLine');
  late final _DrawLine = _DrawLinePtr.asFunction<
      void Function(
          ffi.Pointer<DrawingWand>, double, double, double, double)>();

  void DrawPathClose(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawPathClose(
      arg0,
    );
  }

  late final _DrawPathClosePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DrawingWand>)>>(
          'DrawPathClose');
  late final _DrawPathClose =
      _DrawPathClosePtr.asFunction<void Function(ffi.Pointer<DrawingWand>)>();

  void DrawPathCurveToAbsolute(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
    double arg5,
    double arg6,
  ) {
    return _DrawPathCurveToAbsolute(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _DrawPathCurveToAbsolutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('DrawPathCurveToAbsolute');
  late final _DrawPathCurveToAbsolute = _DrawPathCurveToAbsolutePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double, double, double,
          double, double)>();

  void DrawPathCurveToRelative(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
    double arg5,
    double arg6,
  ) {
    return _DrawPathCurveToRelative(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _DrawPathCurveToRelativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('DrawPathCurveToRelative');
  late final _DrawPathCurveToRelative = _DrawPathCurveToRelativePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double, double, double,
          double, double)>();

  void DrawPathCurveToQuadraticBezierAbsolute(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _DrawPathCurveToQuadraticBezierAbsolute(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DrawPathCurveToQuadraticBezierAbsolutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('DrawPathCurveToQuadraticBezierAbsolute');
  late final _DrawPathCurveToQuadraticBezierAbsolute =
      _DrawPathCurveToQuadraticBezierAbsolutePtr.asFunction<
          void Function(
              ffi.Pointer<DrawingWand>, double, double, double, double)>();

  void DrawPathCurveToQuadraticBezierRelative(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _DrawPathCurveToQuadraticBezierRelative(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DrawPathCurveToQuadraticBezierRelativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('DrawPathCurveToQuadraticBezierRelative');
  late final _DrawPathCurveToQuadraticBezierRelative =
      _DrawPathCurveToQuadraticBezierRelativePtr.asFunction<
          void Function(
              ffi.Pointer<DrawingWand>, double, double, double, double)>();

  void DrawPathCurveToQuadraticBezierSmoothAbsolute(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _DrawPathCurveToQuadraticBezierSmoothAbsolute(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawPathCurveToQuadraticBezierSmoothAbsolutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double,
              ffi.Double)>>('DrawPathCurveToQuadraticBezierSmoothAbsolute');
  late final _DrawPathCurveToQuadraticBezierSmoothAbsolute =
      _DrawPathCurveToQuadraticBezierSmoothAbsolutePtr.asFunction<
          void Function(ffi.Pointer<DrawingWand>, double, double)>();

  void DrawPathCurveToQuadraticBezierSmoothRelative(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _DrawPathCurveToQuadraticBezierSmoothRelative(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawPathCurveToQuadraticBezierSmoothRelativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double,
              ffi.Double)>>('DrawPathCurveToQuadraticBezierSmoothRelative');
  late final _DrawPathCurveToQuadraticBezierSmoothRelative =
      _DrawPathCurveToQuadraticBezierSmoothRelativePtr.asFunction<
          void Function(ffi.Pointer<DrawingWand>, double, double)>();

  void DrawPathCurveToSmoothAbsolute(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _DrawPathCurveToSmoothAbsolute(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DrawPathCurveToSmoothAbsolutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('DrawPathCurveToSmoothAbsolute');
  late final _DrawPathCurveToSmoothAbsolute =
      _DrawPathCurveToSmoothAbsolutePtr.asFunction<
          void Function(
              ffi.Pointer<DrawingWand>, double, double, double, double)>();

  void DrawPathCurveToSmoothRelative(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _DrawPathCurveToSmoothRelative(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DrawPathCurveToSmoothRelativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('DrawPathCurveToSmoothRelative');
  late final _DrawPathCurveToSmoothRelative =
      _DrawPathCurveToSmoothRelativePtr.asFunction<
          void Function(
              ffi.Pointer<DrawingWand>, double, double, double, double)>();

  void DrawPathEllipticArcAbsolute(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    int arg4,
    int arg5,
    double arg6,
    double arg7,
  ) {
    return _DrawPathEllipticArcAbsolute(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _DrawPathEllipticArcAbsolutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>>('DrawPathEllipticArcAbsolute');
  late final _DrawPathEllipticArcAbsolute =
      _DrawPathEllipticArcAbsolutePtr.asFunction<
          void Function(ffi.Pointer<DrawingWand>, double, double, double, int,
              int, double, double)>();

  void DrawPathEllipticArcRelative(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    int arg4,
    int arg5,
    double arg6,
    double arg7,
  ) {
    return _DrawPathEllipticArcRelative(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _DrawPathEllipticArcRelativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Int32,
              ffi.Int32,
              ffi.Double,
              ffi.Double)>>('DrawPathEllipticArcRelative');
  late final _DrawPathEllipticArcRelative =
      _DrawPathEllipticArcRelativePtr.asFunction<
          void Function(ffi.Pointer<DrawingWand>, double, double, double, int,
              int, double, double)>();

  void DrawPathFinish(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawPathFinish(
      arg0,
    );
  }

  late final _DrawPathFinishPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DrawingWand>)>>(
          'DrawPathFinish');
  late final _DrawPathFinish =
      _DrawPathFinishPtr.asFunction<void Function(ffi.Pointer<DrawingWand>)>();

  void DrawPathLineToAbsolute(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _DrawPathLineToAbsolute(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawPathLineToAbsolutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double,
              ffi.Double)>>('DrawPathLineToAbsolute');
  late final _DrawPathLineToAbsolute = _DrawPathLineToAbsolutePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double)>();

  void DrawPathLineToRelative(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _DrawPathLineToRelative(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawPathLineToRelativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double,
              ffi.Double)>>('DrawPathLineToRelative');
  late final _DrawPathLineToRelative = _DrawPathLineToRelativePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double)>();

  void DrawPathLineToHorizontalAbsolute(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawPathLineToHorizontalAbsolute(
      arg0,
      arg1,
    );
  }

  late final _DrawPathLineToHorizontalAbsolutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Double)>>('DrawPathLineToHorizontalAbsolute');
  late final _DrawPathLineToHorizontalAbsolute =
      _DrawPathLineToHorizontalAbsolutePtr.asFunction<
          void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawPathLineToHorizontalRelative(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawPathLineToHorizontalRelative(
      arg0,
      arg1,
    );
  }

  late final _DrawPathLineToHorizontalRelativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Double)>>('DrawPathLineToHorizontalRelative');
  late final _DrawPathLineToHorizontalRelative =
      _DrawPathLineToHorizontalRelativePtr.asFunction<
          void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawPathLineToVerticalAbsolute(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawPathLineToVerticalAbsolute(
      arg0,
      arg1,
    );
  }

  late final _DrawPathLineToVerticalAbsolutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Double)>>('DrawPathLineToVerticalAbsolute');
  late final _DrawPathLineToVerticalAbsolute =
      _DrawPathLineToVerticalAbsolutePtr.asFunction<
          void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawPathLineToVerticalRelative(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawPathLineToVerticalRelative(
      arg0,
      arg1,
    );
  }

  late final _DrawPathLineToVerticalRelativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Double)>>('DrawPathLineToVerticalRelative');
  late final _DrawPathLineToVerticalRelative =
      _DrawPathLineToVerticalRelativePtr.asFunction<
          void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawPathMoveToAbsolute(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _DrawPathMoveToAbsolute(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawPathMoveToAbsolutePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double,
              ffi.Double)>>('DrawPathMoveToAbsolute');
  late final _DrawPathMoveToAbsolute = _DrawPathMoveToAbsolutePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double)>();

  void DrawPathMoveToRelative(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _DrawPathMoveToRelative(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawPathMoveToRelativePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double,
              ffi.Double)>>('DrawPathMoveToRelative');
  late final _DrawPathMoveToRelative = _DrawPathMoveToRelativePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double)>();

  void DrawPathStart(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawPathStart(
      arg0,
    );
  }

  late final _DrawPathStartPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DrawingWand>)>>(
          'DrawPathStart');
  late final _DrawPathStart =
      _DrawPathStartPtr.asFunction<void Function(ffi.Pointer<DrawingWand>)>();

  void DrawPoint(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _DrawPoint(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawPointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double)>>('DrawPoint');
  late final _DrawPoint = _DrawPointPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double)>();

  void DrawPolygon(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
    ffi.Pointer<PointInfo> arg2,
  ) {
    return _DrawPolygon(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawPolygonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Size,
              ffi.Pointer<PointInfo>)>>('DrawPolygon');
  late final _DrawPolygon = _DrawPolygonPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int, ffi.Pointer<PointInfo>)>();

  void DrawPolyline(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
    ffi.Pointer<PointInfo> arg2,
  ) {
    return _DrawPolyline(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawPolylinePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Size,
              ffi.Pointer<PointInfo>)>>('DrawPolyline');
  late final _DrawPolyline = _DrawPolylinePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int, ffi.Pointer<PointInfo>)>();

  void DrawPopClipPath(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawPopClipPath(
      arg0,
    );
  }

  late final _DrawPopClipPathPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DrawingWand>)>>(
          'DrawPopClipPath');
  late final _DrawPopClipPath =
      _DrawPopClipPathPtr.asFunction<void Function(ffi.Pointer<DrawingWand>)>();

  void DrawPopDefs(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawPopDefs(
      arg0,
    );
  }

  late final _DrawPopDefsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DrawingWand>)>>(
          'DrawPopDefs');
  late final _DrawPopDefs =
      _DrawPopDefsPtr.asFunction<void Function(ffi.Pointer<DrawingWand>)>();

  void DrawPushClipPath(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DrawPushClipPath(
      arg0,
      arg1,
    );
  }

  late final _DrawPushClipPathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>)>>('DrawPushClipPath');
  late final _DrawPushClipPath = _DrawPushClipPathPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  void DrawPushDefs(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawPushDefs(
      arg0,
    );
  }

  late final _DrawPushDefsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DrawingWand>)>>(
          'DrawPushDefs');
  late final _DrawPushDefs =
      _DrawPushDefsPtr.asFunction<void Function(ffi.Pointer<DrawingWand>)>();

  void DrawRectangle(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _DrawRectangle(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DrawRectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('DrawRectangle');
  late final _DrawRectangle = _DrawRectanglePtr.asFunction<
      void Function(
          ffi.Pointer<DrawingWand>, double, double, double, double)>();

  void DrawResetVectorGraphics(
    ffi.Pointer<DrawingWand> arg0,
  ) {
    return _DrawResetVectorGraphics(
      arg0,
    );
  }

  late final _DrawResetVectorGraphicsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DrawingWand>)>>(
          'DrawResetVectorGraphics');
  late final _DrawResetVectorGraphics = _DrawResetVectorGraphicsPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>)>();

  void DrawRotate(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawRotate(
      arg0,
      arg1,
    );
  }

  late final _DrawRotatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Double)>>('DrawRotate');
  late final _DrawRotate = _DrawRotatePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawRoundRectangle(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
    double arg5,
    double arg6,
  ) {
    return _DrawRoundRectangle(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _DrawRoundRectanglePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Double)>>('DrawRoundRectangle');
  late final _DrawRoundRectangle = _DrawRoundRectanglePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double, double, double,
          double, double)>();

  void DrawScale(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _DrawScale(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawScalePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double)>>('DrawScale');
  late final _DrawScale = _DrawScalePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double)>();

  void DrawSetBorderColor(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _DrawSetBorderColor(
      arg0,
      arg1,
    );
  }

  late final _DrawSetBorderColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<PixelWand>)>>('DrawSetBorderColor');
  late final _DrawSetBorderColor = _DrawSetBorderColorPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<PixelWand>)>();

  void DrawSetClipRule(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetClipRule(
      arg0,
      arg1,
    );
  }

  late final _DrawSetClipRulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetClipRule');
  late final _DrawSetClipRule = _DrawSetClipRulePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetClipUnits(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetClipUnits(
      arg0,
      arg1,
    );
  }

  late final _DrawSetClipUnitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetClipUnits');
  late final _DrawSetClipUnits = _DrawSetClipUnitsPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetFillColor(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _DrawSetFillColor(
      arg0,
      arg1,
    );
  }

  late final _DrawSetFillColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<PixelWand>)>>('DrawSetFillColor');
  late final _DrawSetFillColor = _DrawSetFillColorPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<PixelWand>)>();

  void DrawSetFillOpacity(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawSetFillOpacity(
      arg0,
      arg1,
    );
  }

  late final _DrawSetFillOpacityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Double)>>('DrawSetFillOpacity');
  late final _DrawSetFillOpacity = _DrawSetFillOpacityPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawSetFillRule(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetFillRule(
      arg0,
      arg1,
    );
  }

  late final _DrawSetFillRulePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetFillRule');
  late final _DrawSetFillRule = _DrawSetFillRulePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetFontSize(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawSetFontSize(
      arg0,
      arg1,
    );
  }

  late final _DrawSetFontSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Double)>>('DrawSetFontSize');
  late final _DrawSetFontSize = _DrawSetFontSizePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawSetFontStretch(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetFontStretch(
      arg0,
      arg1,
    );
  }

  late final _DrawSetFontStretchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetFontStretch');
  late final _DrawSetFontStretch = _DrawSetFontStretchPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetFontStyle(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetFontStyle(
      arg0,
      arg1,
    );
  }

  late final _DrawSetFontStylePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetFontStyle');
  late final _DrawSetFontStyle = _DrawSetFontStylePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetFontWeight(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetFontWeight(
      arg0,
      arg1,
    );
  }

  late final _DrawSetFontWeightPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Size)>>('DrawSetFontWeight');
  late final _DrawSetFontWeight = _DrawSetFontWeightPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetGravity(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetGravity(
      arg0,
      arg1,
    );
  }

  late final _DrawSetGravityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetGravity');
  late final _DrawSetGravity = _DrawSetGravityPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetOpacity(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawSetOpacity(
      arg0,
      arg1,
    );
  }

  late final _DrawSetOpacityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Double)>>('DrawSetOpacity');
  late final _DrawSetOpacity = _DrawSetOpacityPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawSetStrokeAntialias(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetStrokeAntialias(
      arg0,
      arg1,
    );
  }

  late final _DrawSetStrokeAntialiasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetStrokeAntialias');
  late final _DrawSetStrokeAntialias = _DrawSetStrokeAntialiasPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetStrokeColor(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _DrawSetStrokeColor(
      arg0,
      arg1,
    );
  }

  late final _DrawSetStrokeColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<PixelWand>)>>('DrawSetStrokeColor');
  late final _DrawSetStrokeColor = _DrawSetStrokeColorPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<PixelWand>)>();

  void DrawSetStrokeDashOffset(
    ffi.Pointer<DrawingWand> arg0,
    double dashoffset,
  ) {
    return _DrawSetStrokeDashOffset(
      arg0,
      dashoffset,
    );
  }

  late final _DrawSetStrokeDashOffsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Double)>>('DrawSetStrokeDashOffset');
  late final _DrawSetStrokeDashOffset = _DrawSetStrokeDashOffsetPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawSetStrokeLineCap(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetStrokeLineCap(
      arg0,
      arg1,
    );
  }

  late final _DrawSetStrokeLineCapPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetStrokeLineCap');
  late final _DrawSetStrokeLineCap = _DrawSetStrokeLineCapPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetStrokeLineJoin(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetStrokeLineJoin(
      arg0,
      arg1,
    );
  }

  late final _DrawSetStrokeLineJoinPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetStrokeLineJoin');
  late final _DrawSetStrokeLineJoin = _DrawSetStrokeLineJoinPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetStrokeMiterLimit(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetStrokeMiterLimit(
      arg0,
      arg1,
    );
  }

  late final _DrawSetStrokeMiterLimitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Size)>>('DrawSetStrokeMiterLimit');
  late final _DrawSetStrokeMiterLimit = _DrawSetStrokeMiterLimitPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetStrokeOpacity(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawSetStrokeOpacity(
      arg0,
      arg1,
    );
  }

  late final _DrawSetStrokeOpacityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Double)>>('DrawSetStrokeOpacity');
  late final _DrawSetStrokeOpacity = _DrawSetStrokeOpacityPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawSetStrokeWidth(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawSetStrokeWidth(
      arg0,
      arg1,
    );
  }

  late final _DrawSetStrokeWidthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Double)>>('DrawSetStrokeWidth');
  late final _DrawSetStrokeWidth = _DrawSetStrokeWidthPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawSetTextAlignment(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetTextAlignment(
      arg0,
      arg1,
    );
  }

  late final _DrawSetTextAlignmentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetTextAlignment');
  late final _DrawSetTextAlignment = _DrawSetTextAlignmentPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetTextAntialias(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetTextAntialias(
      arg0,
      arg1,
    );
  }

  late final _DrawSetTextAntialiasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetTextAntialias');
  late final _DrawSetTextAntialias = _DrawSetTextAntialiasPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetTextDecoration(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetTextDecoration(
      arg0,
      arg1,
    );
  }

  late final _DrawSetTextDecorationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetTextDecoration');
  late final _DrawSetTextDecoration = _DrawSetTextDecorationPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetTextDirection(
    ffi.Pointer<DrawingWand> arg0,
    int arg1,
  ) {
    return _DrawSetTextDirection(
      arg0,
      arg1,
    );
  }

  late final _DrawSetTextDirectionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Int32)>>('DrawSetTextDirection');
  late final _DrawSetTextDirection = _DrawSetTextDirectionPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, int)>();

  void DrawSetTextEncoding(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _DrawSetTextEncoding(
      arg0,
      arg1,
    );
  }

  late final _DrawSetTextEncodingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>)>>('DrawSetTextEncoding');
  late final _DrawSetTextEncoding = _DrawSetTextEncodingPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  void DrawSetTextUnderColor(
    ffi.Pointer<DrawingWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _DrawSetTextUnderColor(
      arg0,
      arg1,
    );
  }

  late final _DrawSetTextUnderColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>,
              ffi.Pointer<PixelWand>)>>('DrawSetTextUnderColor');
  late final _DrawSetTextUnderColor = _DrawSetTextUnderColorPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, ffi.Pointer<PixelWand>)>();

  void DrawSetViewbox(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _DrawSetViewbox(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DrawSetViewboxPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('DrawSetViewbox');
  late final _DrawSetViewbox = _DrawSetViewboxPtr.asFunction<
      void Function(
          ffi.Pointer<DrawingWand>, double, double, double, double)>();

  void DrawSkewX(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawSkewX(
      arg0,
      arg1,
    );
  }

  late final _DrawSkewXPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Double)>>('DrawSkewX');
  late final _DrawSkewX = _DrawSkewXPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawSkewY(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
  ) {
    return _DrawSkewY(
      arg0,
      arg1,
    );
  }

  late final _DrawSkewYPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<DrawingWand>, ffi.Double)>>('DrawSkewY');
  late final _DrawSkewY = _DrawSkewYPtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double)>();

  void DrawTranslate(
    ffi.Pointer<DrawingWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _DrawTranslate(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _DrawTranslatePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<DrawingWand>, ffi.Double,
              ffi.Double)>>('DrawTranslate');
  late final _DrawTranslate = _DrawTranslatePtr.asFunction<
      void Function(ffi.Pointer<DrawingWand>, double, double)>();

  int IdentifyImageCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _IdentifyImageCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _IdentifyImageCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('IdentifyImageCommand');
  late final _IdentifyImageCommand = _IdentifyImageCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  int ImportImageCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _ImportImageCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ImportImageCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('ImportImageCommand');
  late final _ImportImageCommand = _ImportImageCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<MagickCLI> AcquireMagickCLI(
    ffi.Pointer<ImageInfo> arg0,
    ffi.Pointer<ExceptionInfo> arg1,
  ) {
    return _AcquireMagickCLI(
      arg0,
      arg1,
    );
  }

  late final _AcquireMagickCLIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickCLI> Function(ffi.Pointer<ImageInfo>,
              ffi.Pointer<ExceptionInfo>)>>('AcquireMagickCLI');
  late final _AcquireMagickCLI = _AcquireMagickCLIPtr.asFunction<
      ffi.Pointer<MagickCLI> Function(
          ffi.Pointer<ImageInfo>, ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<MagickCLI> DestroyMagickCLI(
    ffi.Pointer<MagickCLI> arg0,
  ) {
    return _DestroyMagickCLI(
      arg0,
    );
  }

  late final _DestroyMagickCLIPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickCLI> Function(
              ffi.Pointer<MagickCLI>)>>('DestroyMagickCLI');
  late final _DestroyMagickCLI = _DestroyMagickCLIPtr.asFunction<
      ffi.Pointer<MagickCLI> Function(ffi.Pointer<MagickCLI>)>();

  int CLICatchException(
    ffi.Pointer<MagickCLI> arg0,
    int arg1,
  ) {
    return _CLICatchException(
      arg0,
      arg1,
    );
  }

  late final _CLICatchExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickCLI>, ffi.Int32)>>('CLICatchException');
  late final _CLICatchException = _CLICatchExceptionPtr.asFunction<
      int Function(ffi.Pointer<MagickCLI>, int)>();

  int CLILogEvent(
    ffi.Pointer<MagickCLI> arg0,
    int arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
  ) {
    return _CLILogEvent(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _CLILogEventPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickCLI>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>)>>('CLILogEvent');
  late final _CLILogEvent = _CLILogEventPtr.asFunction<
      int Function(ffi.Pointer<MagickCLI>, int, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Char>)>();

  int CLIThrowException(
    ffi.Pointer<MagickCLI> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
    ffi.Pointer<ffi.Char> arg6,
  ) {
    return _CLIThrowException(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _CLIThrowExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickCLI>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Int32,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('CLIThrowException');
  late final _CLIThrowException = _CLIThrowExceptionPtr.asFunction<
      int Function(
          ffi.Pointer<MagickCLI>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void CLIOption(
    ffi.Pointer<MagickCLI> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _CLIOption(
      arg0,
      arg1,
    );
  }

  late final _CLIOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<MagickCLI>, ffi.Pointer<ffi.Char>)>>('CLIOption');
  late final _CLIOption = _CLIOptionPtr.asFunction<
      void Function(ffi.Pointer<MagickCLI>, ffi.Pointer<ffi.Char>)>();

  void ProcessScriptOptions(
    ffi.Pointer<MagickCLI> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    int arg4,
  ) {
    return _ProcessScriptOptions(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _ProcessScriptOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<MagickCLI>,
              ffi.Pointer<ffi.Char>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('ProcessScriptOptions');
  late final _ProcessScriptOptions = _ProcessScriptOptionsPtr.asFunction<
      void Function(ffi.Pointer<MagickCLI>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int ProcessCommandOptions(
    ffi.Pointer<MagickCLI> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    int arg3,
  ) {
    return _ProcessCommandOptions(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _ProcessCommandOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<MagickCLI>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int)>>('ProcessCommandOptions');
  late final _ProcessCommandOptions = _ProcessCommandOptionsPtr.asFunction<
      int Function(ffi.Pointer<MagickCLI>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int MagickCommandGenesis(
    ffi.Pointer<ImageInfo> arg0,
    MagickCommand arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _MagickCommandGenesis(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _MagickCommandGenesisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              MagickCommand,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('MagickCommandGenesis');
  late final _MagickCommandGenesis = _MagickCommandGenesisPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          MagickCommand,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  int MagickImageCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _MagickImageCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickImageCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('MagickImageCommand');
  late final _MagickImageCommand = _MagickImageCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> MagickGetFilename(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetFilename(
      arg0,
    );
  }

  late final _MagickGetFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagickWand>)>>('MagickGetFilename');
  late final _MagickGetFilename = _MagickGetFilenamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.Char> MagickGetFormat(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetFormat(
      arg0,
    );
  }

  late final _MagickGetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagickWand>)>>('MagickGetFormat');
  late final _MagickGetFormat = _MagickGetFormatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.Char> MagickGetFont(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetFont(
      arg0,
    );
  }

  late final _MagickGetFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagickWand>)>>('MagickGetFont');
  late final _MagickGetFont = _MagickGetFontPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.Char> MagickGetHomeURL() {
    return _MagickGetHomeURL();
  }

  late final _MagickGetHomeURLPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'MagickGetHomeURL');
  late final _MagickGetHomeURL =
      _MagickGetHomeURLPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> MagickGetImageArtifact(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickGetImageArtifact(
      arg0,
      arg1,
    );
  }

  late final _MagickGetImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickGetImageArtifact');
  late final _MagickGetImageArtifact = _MagickGetImageArtifactPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> MagickGetImageArtifacts(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _MagickGetImageArtifacts(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetImageArtifactsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('MagickGetImageArtifacts');
  late final _MagickGetImageArtifacts = _MagickGetImageArtifactsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<MagickWand>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> MagickGetImageProfiles(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _MagickGetImageProfiles(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetImageProfilesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('MagickGetImageProfiles');
  late final _MagickGetImageProfiles = _MagickGetImageProfilesPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<MagickWand>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> MagickGetImageProperty(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickGetImageProperty(
      arg0,
      arg1,
    );
  }

  late final _MagickGetImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickGetImageProperty');
  late final _MagickGetImageProperty = _MagickGetImagePropertyPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> MagickGetImageProperties(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _MagickGetImageProperties(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetImagePropertiesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('MagickGetImageProperties');
  late final _MagickGetImageProperties =
      _MagickGetImagePropertiesPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> MagickGetOption(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickGetOption(
      arg0,
      arg1,
    );
  }

  late final _MagickGetOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickGetOption');
  late final _MagickGetOption = _MagickGetOptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> MagickGetOptions(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _MagickGetOptions(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('MagickGetOptions');
  late final _MagickGetOptions = _MagickGetOptionsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<MagickWand>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> MagickQueryConfigureOption(
    ffi.Pointer<ffi.Char> arg0,
  ) {
    return _MagickQueryConfigureOption(
      arg0,
    );
  }

  late final _MagickQueryConfigureOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Char>)>>('MagickQueryConfigureOption');
  late final _MagickQueryConfigureOption = _MagickQueryConfigureOptionPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> MagickQueryConfigureOptions(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _MagickQueryConfigureOptions(
      arg0,
      arg1,
    );
  }

  late final _MagickQueryConfigureOptionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('MagickQueryConfigureOptions');
  late final _MagickQueryConfigureOptions =
      _MagickQueryConfigureOptionsPtr.asFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> MagickQueryFonts(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _MagickQueryFonts(
      arg0,
      arg1,
    );
  }

  late final _MagickQueryFontsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('MagickQueryFonts');
  late final _MagickQueryFonts = _MagickQueryFontsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> MagickQueryFormats(
    ffi.Pointer<ffi.Char> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _MagickQueryFormats(
      arg0,
      arg1,
    );
  }

  late final _MagickQueryFormatsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Char>> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('MagickQueryFormats');
  late final _MagickQueryFormats = _MagickQueryFormatsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Char>> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  int MagickGetColorspace(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetColorspace(
      arg0,
    );
  }

  late final _MagickGetColorspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetColorspace');
  late final _MagickGetColorspace = _MagickGetColorspacePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetCompression(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetCompression(
      arg0,
    );
  }

  late final _MagickGetCompressionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetCompression');
  late final _MagickGetCompression = _MagickGetCompressionPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.Char> MagickGetCopyright() {
    return _MagickGetCopyright();
  }

  late final _MagickGetCopyrightPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'MagickGetCopyright');
  late final _MagickGetCopyright =
      _MagickGetCopyrightPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> MagickGetPackageName() {
    return _MagickGetPackageName();
  }

  late final _MagickGetPackageNamePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'MagickGetPackageName');
  late final _MagickGetPackageName =
      _MagickGetPackageNamePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> MagickGetQuantumDepth(
    ffi.Pointer<ffi.Size> arg0,
  ) {
    return _MagickGetQuantumDepth(
      arg0,
    );
  }

  late final _MagickGetQuantumDepthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('MagickGetQuantumDepth');
  late final _MagickGetQuantumDepth = _MagickGetQuantumDepthPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> MagickGetQuantumRange(
    ffi.Pointer<ffi.Size> arg0,
  ) {
    return _MagickGetQuantumRange(
      arg0,
    );
  }

  late final _MagickGetQuantumRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('MagickGetQuantumRange');
  late final _MagickGetQuantumRange = _MagickGetQuantumRangePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Char> MagickGetReleaseDate() {
    return _MagickGetReleaseDate();
  }

  late final _MagickGetReleaseDatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'MagickGetReleaseDate');
  late final _MagickGetReleaseDate =
      _MagickGetReleaseDatePtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> MagickGetVersion(
    ffi.Pointer<ffi.Size> arg0,
  ) {
    return _MagickGetVersion(
      arg0,
    );
  }

  late final _MagickGetVersionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<ffi.Size>)>>('MagickGetVersion');
  late final _MagickGetVersion = _MagickGetVersionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Size>)>();

  double MagickGetPointsize(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetPointsize(
      arg0,
    );
  }

  late final _MagickGetPointsizePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetPointsize');
  late final _MagickGetPointsize = _MagickGetPointsizePtr.asFunction<
      double Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.Double> MagickGetSamplingFactors(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _MagickGetSamplingFactors(
      arg0,
      arg1,
    );
  }

  late final _MagickGetSamplingFactorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Size>)>>('MagickGetSamplingFactors');
  late final _MagickGetSamplingFactors =
      _MagickGetSamplingFactorsPtr.asFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Double> MagickQueryFontMetrics(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<DrawingWand> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _MagickQueryFontMetrics(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickQueryFontMetricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>)>>('MagickQueryFontMetrics');
  late final _MagickQueryFontMetrics = _MagickQueryFontMetricsPtr.asFunction<
      ffi.Pointer<ffi.Double> Function(ffi.Pointer<MagickWand>,
          ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Double> MagickQueryMultilineFontMetrics(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<DrawingWand> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _MagickQueryMultilineFontMetrics(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickQueryMultilineFontMetricsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>)>>('MagickQueryMultilineFontMetrics');
  late final _MagickQueryMultilineFontMetrics =
      _MagickQueryMultilineFontMetricsPtr.asFunction<
          ffi.Pointer<ffi.Double> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<DrawingWand>, ffi.Pointer<ffi.Char>)>();

  int MagickGetGravity(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetGravity(
      arg0,
    );
  }

  late final _MagickGetGravityPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetGravity');
  late final _MagickGetGravity =
      _MagickGetGravityPtr.asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetType(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetType(
      arg0,
    );
  }

  late final _MagickGetTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetType');
  late final _MagickGetType =
      _MagickGetTypePtr.asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetInterlaceScheme(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetInterlaceScheme(
      arg0,
    );
  }

  late final _MagickGetInterlaceSchemePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetInterlaceScheme');
  late final _MagickGetInterlaceScheme = _MagickGetInterlaceSchemePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetInterpolateMethod(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetInterpolateMethod(
      arg0,
    );
  }

  late final _MagickGetInterpolateMethodPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetInterpolateMethod');
  late final _MagickGetInterpolateMethod = _MagickGetInterpolateMethodPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetOrientation(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetOrientation(
      arg0,
    );
  }

  late final _MagickGetOrientationPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetOrientation');
  late final _MagickGetOrientation = _MagickGetOrientationPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickDeleteImageArtifact(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickDeleteImageArtifact(
      arg0,
      arg1,
    );
  }

  late final _MagickDeleteImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickDeleteImageArtifact');
  late final _MagickDeleteImageArtifact =
      _MagickDeleteImageArtifactPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickDeleteImageProperty(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickDeleteImageProperty(
      arg0,
      arg1,
    );
  }

  late final _MagickDeleteImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickDeleteImageProperty');
  late final _MagickDeleteImageProperty =
      _MagickDeleteImagePropertyPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickDeleteOption(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickDeleteOption(
      arg0,
      arg1,
    );
  }

  late final _MagickDeleteOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickDeleteOption');
  late final _MagickDeleteOption = _MagickDeleteOptionPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickGetAntialias(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetAntialias(
      arg0,
    );
  }

  late final _MagickGetAntialiasPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetAntialias');
  late final _MagickGetAntialias = _MagickGetAntialiasPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetPage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ffi.Size> arg2,
    ffi.Pointer<ssize_t> arg3,
    ffi.Pointer<ssize_t> arg4,
  ) {
    return _MagickGetPage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickGetPagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ssize_t>,
              ffi.Pointer<ssize_t>)>>('MagickGetPage');
  late final _MagickGetPage = _MagickGetPagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ssize_t>, ffi.Pointer<ssize_t>)>();

  int MagickGetResolution(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
  ) {
    return _MagickGetResolution(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetResolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('MagickGetResolution');
  late final _MagickGetResolution = _MagickGetResolutionPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int MagickGetSize(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _MagickGetSize(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>)>>('MagickGetSize');
  late final _MagickGetSize = _MagickGetSizePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>)>();

  int MagickGetSizeOffset(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ssize_t> arg1,
  ) {
    return _MagickGetSizeOffset(
      arg0,
      arg1,
    );
  }

  late final _MagickGetSizeOffsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ssize_t>)>>('MagickGetSizeOffset');
  late final _MagickGetSizeOffset = _MagickGetSizeOffsetPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ssize_t>)>();

  int MagickProfileImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _MagickProfileImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickProfileImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('MagickProfileImage');
  late final _MagickProfileImage = _MagickProfileImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, int)>();

  int MagickSetAntialias(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetAntialias(
      arg0,
      arg1,
    );
  }

  late final _MagickSetAntialiasPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetAntialias');
  late final _MagickSetAntialias = _MagickSetAntialiasPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetBackgroundColor(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _MagickSetBackgroundColor(
      arg0,
      arg1,
    );
  }

  late final _MagickSetBackgroundColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>)>>('MagickSetBackgroundColor');
  late final _MagickSetBackgroundColor =
      _MagickSetBackgroundColorPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>)>();

  int MagickSetColorspace(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetColorspace(
      arg0,
      arg1,
    );
  }

  late final _MagickSetColorspacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetColorspace');
  late final _MagickSetColorspace = _MagickSetColorspacePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetCompression(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetCompression(
      arg0,
      arg1,
    );
  }

  late final _MagickSetCompressionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetCompression');
  late final _MagickSetCompression = _MagickSetCompressionPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetCompressionQuality(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetCompressionQuality(
      arg0,
      arg1,
    );
  }

  late final _MagickSetCompressionQualityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Size)>>('MagickSetCompressionQuality');
  late final _MagickSetCompressionQuality = _MagickSetCompressionQualityPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetDepth(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetDepth(
      arg0,
      arg1,
    );
  }

  late final _MagickSetDepthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Size)>>('MagickSetDepth');
  late final _MagickSetDepth = _MagickSetDepthPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetExtract(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickSetExtract(
      arg0,
      arg1,
    );
  }

  late final _MagickSetExtractPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickSetExtract');
  late final _MagickSetExtract = _MagickSetExtractPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickSetFilename(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickSetFilename(
      arg0,
      arg1,
    );
  }

  late final _MagickSetFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickSetFilename');
  late final _MagickSetFilename = _MagickSetFilenamePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickSetFormat(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickSetFormat(
      arg0,
      arg1,
    );
  }

  late final _MagickSetFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickSetFormat');
  late final _MagickSetFormat = _MagickSetFormatPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickSetFont(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickSetFont(
      arg0,
      arg1,
    );
  }

  late final _MagickSetFontPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickSetFont');
  late final _MagickSetFont = _MagickSetFontPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickSetGravity(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetGravity(
      arg0,
      arg1,
    );
  }

  late final _MagickSetGravityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetGravity');
  late final _MagickSetGravity = _MagickSetGravityPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageArtifact(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _MagickSetImageArtifact(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetImageArtifactPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MagickSetImageArtifact');
  late final _MagickSetImageArtifact = _MagickSetImageArtifactPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int MagickSetImageProfile(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Void> arg2,
    int arg3,
  ) {
    return _MagickSetImageProfile(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickSetImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Void>, ffi.Size)>>('MagickSetImageProfile');
  late final _MagickSetImageProfile = _MagickSetImageProfilePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Void>, int)>();

  int MagickSetImageProperty(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _MagickSetImageProperty(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetImagePropertyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MagickSetImageProperty');
  late final _MagickSetImageProperty = _MagickSetImagePropertyPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int MagickSetInterlaceScheme(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetInterlaceScheme(
      arg0,
      arg1,
    );
  }

  late final _MagickSetInterlaceSchemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetInterlaceScheme');
  late final _MagickSetInterlaceScheme = _MagickSetInterlaceSchemePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetInterpolateMethod(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetInterpolateMethod(
      arg0,
      arg1,
    );
  }

  late final _MagickSetInterpolateMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickSetInterpolateMethod');
  late final _MagickSetInterpolateMethod = _MagickSetInterpolateMethodPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetOption(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Char> arg2,
  ) {
    return _MagickSetOption(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetOptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('MagickSetOption');
  late final _MagickSetOption = _MagickSetOptionPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int MagickSetOrientation(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetOrientation(
      arg0,
      arg1,
    );
  }

  late final _MagickSetOrientationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetOrientation');
  late final _MagickSetOrientation = _MagickSetOrientationPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetPage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _MagickSetPage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickSetPagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ssize_t, ssize_t)>>('MagickSetPage');
  late final _MagickSetPage = _MagickSetPagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int, int)>();

  int MagickSetPassphrase(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickSetPassphrase(
      arg0,
      arg1,
    );
  }

  late final _MagickSetPassphrasePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickSetPassphrase');
  late final _MagickSetPassphrase = _MagickSetPassphrasePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickSetPointsize(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickSetPointsize(
      arg0,
      arg1,
    );
  }

  late final _MagickSetPointsizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickSetPointsize');
  late final _MagickSetPointsize = _MagickSetPointsizePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickSetResolution(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickSetResolution(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetResolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickSetResolution');
  late final _MagickSetResolution = _MagickSetResolutionPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickSetResourceLimit(
    int type,
    int limit,
  ) {
    return _MagickSetResourceLimit(
      type,
      limit,
    );
  }

  late final _MagickSetResourceLimitPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Int32, MagickSizeType)>>(
      'MagickSetResourceLimit');
  late final _MagickSetResourceLimit =
      _MagickSetResourceLimitPtr.asFunction<int Function(int, int)>();

  int MagickSetSamplingFactors(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    ffi.Pointer<ffi.Double> arg2,
  ) {
    return _MagickSetSamplingFactors(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetSamplingFactorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Pointer<ffi.Double>)>>('MagickSetSamplingFactors');
  late final _MagickSetSamplingFactors =
      _MagickSetSamplingFactorsPtr.asFunction<
          int Function(
              ffi.Pointer<MagickWand>, int, ffi.Pointer<ffi.Double>)>();

  int MagickSetSecurityPolicy(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickSetSecurityPolicy(
      arg0,
      arg1,
    );
  }

  late final _MagickSetSecurityPolicyPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickSetSecurityPolicy');
  late final _MagickSetSecurityPolicy = _MagickSetSecurityPolicyPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickSetSize(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
  ) {
    return _MagickSetSize(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetSizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Size, ffi.Size)>>('MagickSetSize');
  late final _MagickSetSize = _MagickSetSizePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int)>();

  int MagickSetSizeOffset(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _MagickSetSizeOffset(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickSetSizeOffsetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ssize_t)>>('MagickSetSizeOffset');
  late final _MagickSetSizeOffset = _MagickSetSizeOffsetPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int)>();

  int MagickSetType(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetType(
      arg0,
      arg1,
    );
  }

  late final _MagickSetTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetType');
  late final _MagickSetType = _MagickSetTypePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  MagickProgressMonitor MagickSetProgressMonitor(
    ffi.Pointer<MagickWand> arg0,
    MagickProgressMonitor arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _MagickSetProgressMonitor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetProgressMonitorPtr = _lookup<
      ffi.NativeFunction<
          MagickProgressMonitor Function(
              ffi.Pointer<MagickWand>,
              MagickProgressMonitor,
              ffi.Pointer<ffi.Void>)>>('MagickSetProgressMonitor');
  late final _MagickSetProgressMonitor =
      _MagickSetProgressMonitorPtr.asFunction<
          MagickProgressMonitor Function(ffi.Pointer<MagickWand>,
              MagickProgressMonitor, ffi.Pointer<ffi.Void>)>();

  int MagickGetResource(
    int arg0,
  ) {
    return _MagickGetResource(
      arg0,
    );
  }

  late final _MagickGetResourcePtr =
      _lookup<ffi.NativeFunction<MagickSizeType Function(ffi.Int32)>>(
          'MagickGetResource');
  late final _MagickGetResource =
      _MagickGetResourcePtr.asFunction<int Function(int)>();

  int MagickGetResourceLimit(
    int arg0,
  ) {
    return _MagickGetResourceLimit(
      arg0,
    );
  }

  late final _MagickGetResourceLimitPtr =
      _lookup<ffi.NativeFunction<MagickSizeType Function(ffi.Int32)>>(
          'MagickGetResourceLimit');
  late final _MagickGetResourceLimit =
      _MagickGetResourceLimitPtr.asFunction<int Function(int)>();

  ffi.Pointer<PixelWand> MagickGetBackgroundColor(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetBackgroundColor(
      arg0,
    );
  }

  late final _MagickGetBackgroundColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PixelWand> Function(
              ffi.Pointer<MagickWand>)>>('MagickGetBackgroundColor');
  late final _MagickGetBackgroundColor = _MagickGetBackgroundColorPtr
      .asFunction<ffi.Pointer<PixelWand> Function(ffi.Pointer<MagickWand>)>();

  int MagickGetOrientationType(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetOrientationType(
      arg0,
    );
  }

  late final _MagickGetOrientationTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetOrientationType');
  late final _MagickGetOrientationType = _MagickGetOrientationTypePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetCompressionQuality(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetCompressionQuality(
      arg0,
    );
  }

  late final _MagickGetCompressionQualityPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetCompressionQuality');
  late final _MagickGetCompressionQuality = _MagickGetCompressionQualityPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.UnsignedChar> MagickGetImageProfile(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _MagickGetImageProfile(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('MagickGetImageProfile');
  late final _MagickGetImageProfile = _MagickGetImageProfilePtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<MagickWand>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.UnsignedChar> MagickRemoveImageProfile(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    ffi.Pointer<ffi.Size> arg2,
  ) {
    return _MagickRemoveImageProfile(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickRemoveImageProfilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Size>)>>('MagickRemoveImageProfile');
  late final _MagickRemoveImageProfile =
      _MagickRemoveImageProfilePtr.asFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Size>)>();

  void MagickSetSeed(
    int arg0,
  ) {
    return _MagickSetSeed(
      arg0,
    );
  }

  late final _MagickSetSeedPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          'MagickSetSeed');
  late final _MagickSetSeed =
      _MagickSetSeedPtr.asFunction<void Function(int)>();

  ffi.Pointer<ChannelFeatures> MagickGetImageFeatures(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickGetImageFeatures(
      arg0,
      arg1,
    );
  }

  late final _MagickGetImageFeaturesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ChannelFeatures> Function(
              ffi.Pointer<MagickWand>, ffi.Size)>>('MagickGetImageFeatures');
  late final _MagickGetImageFeatures = _MagickGetImageFeaturesPtr.asFunction<
      ffi.Pointer<ChannelFeatures> Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageChannelMask(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageChannelMask(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageChannelMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickSetImageChannelMask');
  late final _MagickSetImageChannelMask = _MagickSetImageChannelMaskPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<ChannelStatistics> MagickGetImageStatistics(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageStatistics(
      arg0,
    );
  }

  late final _MagickGetImageStatisticsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ChannelStatistics> Function(
              ffi.Pointer<MagickWand>)>>('MagickGetImageStatistics');
  late final _MagickGetImageStatistics =
      _MagickGetImageStatisticsPtr.asFunction<
          ffi.Pointer<ChannelStatistics> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.Char> MagickGetImageFilename(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageFilename(
      arg0,
    );
  }

  late final _MagickGetImageFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagickWand>)>>('MagickGetImageFilename');
  late final _MagickGetImageFilename = _MagickGetImageFilenamePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.Char> MagickGetImageFormat(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageFormat(
      arg0,
    );
  }

  late final _MagickGetImageFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagickWand>)>>('MagickGetImageFormat');
  late final _MagickGetImageFormat = _MagickGetImageFormatPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.Char> MagickGetImageSignature(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageSignature(
      arg0,
    );
  }

  late final _MagickGetImageSignaturePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagickWand>)>>('MagickGetImageSignature');
  late final _MagickGetImageSignature = _MagickGetImageSignaturePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.Char> MagickIdentifyImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickIdentifyImage(
      arg0,
    );
  }

  late final _MagickIdentifyImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<MagickWand>)>>('MagickIdentifyImage');
  late final _MagickIdentifyImage = _MagickIdentifyImagePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageColorspace(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageColorspace(
      arg0,
    );
  }

  late final _MagickGetImageColorspacePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageColorspace');
  late final _MagickGetImageColorspace = _MagickGetImageColorspacePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageCompose(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageCompose(
      arg0,
    );
  }

  late final _MagickGetImageComposePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageCompose');
  late final _MagickGetImageCompose = _MagickGetImageComposePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageCompression(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageCompression(
      arg0,
    );
  }

  late final _MagickGetImageCompressionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageCompression');
  late final _MagickGetImageCompression = _MagickGetImageCompressionPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageDispose(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageDispose(
      arg0,
    );
  }

  late final _MagickGetImageDisposePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageDispose');
  late final _MagickGetImageDispose = _MagickGetImageDisposePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.Double> MagickGetImageDistortions(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
    int arg2,
  ) {
    return _MagickGetImageDistortions(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetImageDistortionsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickGetImageDistortions');
  late final _MagickGetImageDistortions =
      _MagickGetImageDistortionsPtr.asFunction<
          ffi.Pointer<ffi.Double> Function(
              ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>, int)>();

  double MagickGetImageFuzz(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageFuzz(
      arg0,
    );
  }

  late final _MagickGetImageFuzzPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageFuzz');
  late final _MagickGetImageFuzz = _MagickGetImageFuzzPtr.asFunction<
      double Function(ffi.Pointer<MagickWand>)>();

  double MagickGetImageGamma(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageGamma(
      arg0,
    );
  }

  late final _MagickGetImageGammaPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageGamma');
  late final _MagickGetImageGamma = _MagickGetImageGammaPtr.asFunction<
      double Function(ffi.Pointer<MagickWand>)>();

  double MagickGetImageTotalInkDensity(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageTotalInkDensity(
      arg0,
    );
  }

  late final _MagickGetImageTotalInkDensityPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageTotalInkDensity');
  late final _MagickGetImageTotalInkDensity = _MagickGetImageTotalInkDensityPtr
      .asFunction<double Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageEndian(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageEndian(
      arg0,
    );
  }

  late final _MagickGetImageEndianPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageEndian');
  late final _MagickGetImageEndian = _MagickGetImageEndianPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageGravity(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageGravity(
      arg0,
    );
  }

  late final _MagickGetImageGravityPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageGravity');
  late final _MagickGetImageGravity = _MagickGetImageGravityPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<Image> MagickDestroyImage(
    ffi.Pointer<Image> arg0,
  ) {
    return _MagickDestroyImage(
      arg0,
    );
  }

  late final _MagickDestroyImagePtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<Image> Function(ffi.Pointer<Image>)>>(
      'MagickDestroyImage');
  late final _MagickDestroyImage = _MagickDestroyImagePtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<Image>)>();

  ffi.Pointer<Image> GetImageFromMagickWand(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _GetImageFromMagickWand(
      arg0,
    );
  }

  late final _GetImageFromMagickWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<Image> Function(
              ffi.Pointer<MagickWand>)>>('GetImageFromMagickWand');
  late final _GetImageFromMagickWand = _GetImageFromMagickWandPtr.asFunction<
      ffi.Pointer<Image> Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageType(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageType(
      arg0,
    );
  }

  late final _MagickGetImageTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageType');
  late final _MagickGetImageType = _MagickGetImageTypePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickIdentifyImageType(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickIdentifyImageType(
      arg0,
    );
  }

  late final _MagickIdentifyImageTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickIdentifyImageType');
  late final _MagickIdentifyImageType = _MagickIdentifyImageTypePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageInterlaceScheme(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageInterlaceScheme(
      arg0,
    );
  }

  late final _MagickGetImageInterlaceSchemePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageInterlaceScheme');
  late final _MagickGetImageInterlaceScheme = _MagickGetImageInterlaceSchemePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageInterpolateMethod(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageInterpolateMethod(
      arg0,
    );
  }

  late final _MagickGetImageInterpolateMethodPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageInterpolateMethod');
  late final _MagickGetImageInterpolateMethod =
      _MagickGetImageInterpolateMethodPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>)>();

  int MagickAdaptiveBlurImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickAdaptiveBlurImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickAdaptiveBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickAdaptiveBlurImage');
  late final _MagickAdaptiveBlurImage = _MagickAdaptiveBlurImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickAdaptiveResizeImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
  ) {
    return _MagickAdaptiveResizeImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickAdaptiveResizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Size)>>('MagickAdaptiveResizeImage');
  late final _MagickAdaptiveResizeImage = _MagickAdaptiveResizeImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int, int)>();

  int MagickAdaptiveSharpenImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickAdaptiveSharpenImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickAdaptiveSharpenImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickAdaptiveSharpenImage');
  late final _MagickAdaptiveSharpenImage = _MagickAdaptiveSharpenImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickAdaptiveThresholdImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    double arg3,
  ) {
    return _MagickAdaptiveThresholdImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickAdaptiveThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ffi.Double)>>('MagickAdaptiveThresholdImage');
  late final _MagickAdaptiveThresholdImage = _MagickAdaptiveThresholdImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int, int, double)>();

  int MagickAddImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
  ) {
    return _MagickAddImage(
      arg0,
      arg1,
    );
  }

  late final _MagickAddImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<MagickWand>)>>('MagickAddImage');
  late final _MagickAddImage = _MagickAddImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>)>();

  int MagickAddNoiseImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    double arg2,
  ) {
    return _MagickAddNoiseImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickAddNoiseImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32,
              ffi.Double)>>('MagickAddNoiseImage');
  late final _MagickAddNoiseImage = _MagickAddNoiseImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, double)>();

  int MagickAffineTransformImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<DrawingWand> arg1,
  ) {
    return _MagickAffineTransformImage(
      arg0,
      arg1,
    );
  }

  late final _MagickAffineTransformImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<DrawingWand>)>>('MagickAffineTransformImage');
  late final _MagickAffineTransformImage =
      _MagickAffineTransformImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<DrawingWand>)>();

  int MagickAnnotateImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<DrawingWand> arg1,
    double arg2,
    double arg3,
    double arg4,
    ffi.Pointer<ffi.Char> arg5,
  ) {
    return _MagickAnnotateImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _MagickAnnotateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<DrawingWand>,
              ffi.Double,
              ffi.Double,
              ffi.Double,
              ffi.Pointer<ffi.Char>)>>('MagickAnnotateImage');
  late final _MagickAnnotateImage = _MagickAnnotateImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<DrawingWand>, double,
          double, double, ffi.Pointer<ffi.Char>)>();

  int MagickAnimateImages(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickAnimateImages(
      arg0,
      arg1,
    );
  }

  late final _MagickAnimateImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickAnimateImages');
  late final _MagickAnimateImages = _MagickAnimateImagesPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickAutoGammaImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickAutoGammaImage(
      arg0,
    );
  }

  late final _MagickAutoGammaImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickAutoGammaImage');
  late final _MagickAutoGammaImage = _MagickAutoGammaImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickAutoLevelImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickAutoLevelImage(
      arg0,
    );
  }

  late final _MagickAutoLevelImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickAutoLevelImage');
  late final _MagickAutoLevelImage = _MagickAutoLevelImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickAutoOrientImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickAutoOrientImage(
      arg0,
    );
  }

  late final _MagickAutoOrientImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickAutoOrientImage');
  late final _MagickAutoOrientImage = _MagickAutoOrientImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickAutoThresholdImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickAutoThresholdImage(
      arg0,
      arg1,
    );
  }

  late final _MagickAutoThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickAutoThresholdImage');
  late final _MagickAutoThresholdImage = _MagickAutoThresholdImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickBilateralBlurImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _MagickBilateralBlurImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickBilateralBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('MagickBilateralBlurImage');
  late final _MagickBilateralBlurImage =
      _MagickBilateralBlurImagePtr.asFunction<
          int Function(
              ffi.Pointer<MagickWand>, double, double, double, double)>();

  int MagickBlackThresholdImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _MagickBlackThresholdImage(
      arg0,
      arg1,
    );
  }

  late final _MagickBlackThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>)>>('MagickBlackThresholdImage');
  late final _MagickBlackThresholdImage =
      _MagickBlackThresholdImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>)>();

  int MagickBlueShiftImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickBlueShiftImage(
      arg0,
      arg1,
    );
  }

  late final _MagickBlueShiftImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickBlueShiftImage');
  late final _MagickBlueShiftImage = _MagickBlueShiftImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickBlurImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickBlurImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickBlurImage');
  late final _MagickBlurImage = _MagickBlurImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickBorderImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    int arg2,
    int arg3,
    int compose,
  ) {
    return _MagickBorderImage(
      arg0,
      arg1,
      arg2,
      arg3,
      compose,
    );
  }

  late final _MagickBorderImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
              ffi.Size, ffi.Size, ffi.Int32)>>('MagickBorderImage');
  late final _MagickBorderImage = _MagickBorderImagePtr.asFunction<
      int Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>, int, int, int)>();

  int MagickBrightnessContrastImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickBrightnessContrastImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickBrightnessContrastImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickBrightnessContrastImage');
  late final _MagickBrightnessContrastImage = _MagickBrightnessContrastImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickCannyEdgeImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _MagickCannyEdgeImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickCannyEdgeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('MagickCannyEdgeImage');
  late final _MagickCannyEdgeImage = _MagickCannyEdgeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double, double, double)>();

  int MagickCharcoalImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickCharcoalImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickCharcoalImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickCharcoalImage');
  late final _MagickCharcoalImage = _MagickCharcoalImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickChopImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _MagickChopImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickChopImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ssize_t, ssize_t)>>('MagickChopImage');
  late final _MagickChopImage = _MagickChopImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int, int)>();

  int MagickCLAHEImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    double arg3,
    double arg4,
  ) {
    return _MagickCLAHEImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickCLAHEImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ffi.Double, ffi.Double)>>('MagickCLAHEImage');
  late final _MagickCLAHEImage = _MagickCLAHEImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, double, double)>();

  int MagickClampImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickClampImage(
      arg0,
    );
  }

  late final _MagickClampImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickClampImage');
  late final _MagickClampImage =
      _MagickClampImagePtr.asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickClipImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickClipImage(
      arg0,
    );
  }

  late final _MagickClipImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickClipImage');
  late final _MagickClipImage =
      _MagickClipImagePtr.asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickClipImagePath(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _MagickClipImagePath(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickClipImagePathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('MagickClipImagePath');
  late final _MagickClipImagePath = _MagickClipImagePathPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>, int)>();

  int MagickClutImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
    int arg2,
  ) {
    return _MagickClutImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickClutImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickClutImage');
  late final _MagickClutImage = _MagickClutImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>, int)>();

  int MagickColorDecisionListImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickColorDecisionListImage(
      arg0,
      arg1,
    );
  }

  late final _MagickColorDecisionListImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickColorDecisionListImage');
  late final _MagickColorDecisionListImage =
      _MagickColorDecisionListImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickColorizeImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    ffi.Pointer<PixelWand> arg2,
  ) {
    return _MagickColorizeImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickColorizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
              ffi.Pointer<PixelWand>)>>('MagickColorizeImage');
  late final _MagickColorizeImage = _MagickColorizeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
          ffi.Pointer<PixelWand>)>();

  int MagickColorMatrixImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<KernelInfo> arg1,
  ) {
    return _MagickColorMatrixImage(
      arg0,
      arg1,
    );
  }

  late final _MagickColorMatrixImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<KernelInfo>)>>('MagickColorMatrixImage');
  late final _MagickColorMatrixImage = _MagickColorMatrixImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<KernelInfo>)>();

  int MagickColorThresholdImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    ffi.Pointer<PixelWand> arg2,
  ) {
    return _MagickColorThresholdImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickColorThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
              ffi.Pointer<PixelWand>)>>('MagickColorThresholdImage');
  late final _MagickColorThresholdImage =
      _MagickColorThresholdImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
              ffi.Pointer<PixelWand>)>();

  int MagickCommentImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickCommentImage(
      arg0,
      arg1,
    );
  }

  late final _MagickCommentImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickCommentImage');
  late final _MagickCommentImage = _MagickCommentImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickCompositeImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _MagickCompositeImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _MagickCompositeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>,
              ffi.Int32, ffi.Int32, ssize_t, ssize_t)>>('MagickCompositeImage');
  late final _MagickCompositeImage = _MagickCompositeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>, int, int,
          int, int)>();

  int MagickCompositeImageGravity(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
    int arg2,
    int arg3,
  ) {
    return _MagickCompositeImageGravity(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickCompositeImageGravityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>,
              ffi.Int32, ffi.Int32)>>('MagickCompositeImageGravity');
  late final _MagickCompositeImageGravity =
      _MagickCompositeImageGravityPtr.asFunction<
          int Function(
              ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>, int, int)>();

  int MagickCompositeLayers(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _MagickCompositeLayers(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickCompositeLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>,
              ffi.Int32, ssize_t, ssize_t)>>('MagickCompositeLayers');
  late final _MagickCompositeLayers = _MagickCompositeLayersPtr.asFunction<
      int Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>, int, int, int)>();

  int MagickConnectedComponentsImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<CCObjectInfo>> arg2,
  ) {
    return _MagickConnectedComponentsImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickConnectedComponentsImagePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
                  ffi.Pointer<ffi.Pointer<CCObjectInfo>>)>>(
      'MagickConnectedComponentsImage');
  late final _MagickConnectedComponentsImage =
      _MagickConnectedComponentsImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, int,
              ffi.Pointer<ffi.Pointer<CCObjectInfo>>)>();

  int MagickConstituteImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
    ffi.Pointer<ffi.Void> arg5,
  ) {
    return _MagickConstituteImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _MagickConstituteImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('MagickConstituteImage');
  late final _MagickConstituteImage = _MagickConstituteImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, ffi.Pointer<ffi.Char>,
          int, ffi.Pointer<ffi.Void>)>();

  int MagickContrastImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickContrastImage(
      arg0,
      arg1,
    );
  }

  late final _MagickContrastImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickContrastImage');
  late final _MagickContrastImage = _MagickContrastImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickContrastStretchImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickContrastStretchImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickContrastStretchImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickContrastStretchImage');
  late final _MagickContrastStretchImage = _MagickContrastStretchImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickConvolveImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<KernelInfo> arg1,
  ) {
    return _MagickConvolveImage(
      arg0,
      arg1,
    );
  }

  late final _MagickConvolveImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<KernelInfo>)>>('MagickConvolveImage');
  late final _MagickConvolveImage = _MagickConvolveImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<KernelInfo>)>();

  int MagickCropImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _MagickCropImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickCropImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ssize_t, ssize_t)>>('MagickCropImage');
  late final _MagickCropImage = _MagickCropImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int, int)>();

  int MagickCycleColormapImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickCycleColormapImage(
      arg0,
      arg1,
    );
  }

  late final _MagickCycleColormapImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ssize_t)>>('MagickCycleColormapImage');
  late final _MagickCycleColormapImage = _MagickCycleColormapImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickDecipherImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickDecipherImage(
      arg0,
      arg1,
    );
  }

  late final _MagickDecipherImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickDecipherImage');
  late final _MagickDecipherImage = _MagickDecipherImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickDeskewImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickDeskewImage(
      arg0,
      arg1,
    );
  }

  late final _MagickDeskewImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickDeskewImage');
  late final _MagickDeskewImage = _MagickDeskewImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickDespeckleImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickDespeckleImage(
      arg0,
    );
  }

  late final _MagickDespeckleImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickDespeckleImage');
  late final _MagickDespeckleImage = _MagickDespeckleImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickDisplayImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickDisplayImage(
      arg0,
      arg1,
    );
  }

  late final _MagickDisplayImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickDisplayImage');
  late final _MagickDisplayImage = _MagickDisplayImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickDisplayImages(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickDisplayImages(
      arg0,
      arg1,
    );
  }

  late final _MagickDisplayImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickDisplayImages');
  late final _MagickDisplayImages = _MagickDisplayImagesPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickDistortImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Double> arg3,
    int arg4,
  ) {
    return _MagickDistortImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickDistortImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32, ffi.Size,
              ffi.Pointer<ffi.Double>, ffi.Int32)>>('MagickDistortImage');
  late final _MagickDistortImage = _MagickDistortImagePtr.asFunction<
      int Function(
          ffi.Pointer<MagickWand>, int, int, ffi.Pointer<ffi.Double>, int)>();

  int MagickDrawImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<DrawingWand> arg1,
  ) {
    return _MagickDrawImage(
      arg0,
      arg1,
    );
  }

  late final _MagickDrawImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<DrawingWand>)>>('MagickDrawImage');
  late final _MagickDrawImage = _MagickDrawImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<DrawingWand>)>();

  int MagickEdgeImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickEdgeImage(
      arg0,
      arg1,
    );
  }

  late final _MagickEdgeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickEdgeImage');
  late final _MagickEdgeImage = _MagickEdgeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickEmbossImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickEmbossImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickEmbossImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickEmbossImage');
  late final _MagickEmbossImage = _MagickEmbossImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickEncipherImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickEncipherImage(
      arg0,
      arg1,
    );
  }

  late final _MagickEncipherImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickEncipherImage');
  late final _MagickEncipherImage = _MagickEncipherImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickEnhanceImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickEnhanceImage(
      arg0,
    );
  }

  late final _MagickEnhanceImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickEnhanceImage');
  late final _MagickEnhanceImage = _MagickEnhanceImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickEqualizeImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickEqualizeImage(
      arg0,
    );
  }

  late final _MagickEqualizeImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickEqualizeImage');
  late final _MagickEqualizeImage = _MagickEqualizeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickEvaluateImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    double arg2,
  ) {
    return _MagickEvaluateImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickEvaluateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32,
              ffi.Double)>>('MagickEvaluateImage');
  late final _MagickEvaluateImage = _MagickEvaluateImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, double)>();

  int MagickExportImagePixels(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
    int arg6,
    ffi.Pointer<ffi.Void> arg7,
  ) {
    return _MagickExportImagePixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _MagickExportImagePixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ssize_t,
              ssize_t,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('MagickExportImagePixels');
  late final _MagickExportImagePixels = _MagickExportImagePixelsPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int, int,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  int MagickExtentImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _MagickExtentImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickExtentImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ssize_t, ssize_t)>>('MagickExtentImage');
  late final _MagickExtentImage = _MagickExtentImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int, int)>();

  int MagickFlipImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickFlipImage(
      arg0,
    );
  }

  late final _MagickFlipImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickFlipImage');
  late final _MagickFlipImage =
      _MagickFlipImagePtr.asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickFloodfillPaintImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    double arg2,
    ffi.Pointer<PixelWand> arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    return _MagickFloodfillPaintImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _MagickFloodfillPaintImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>,
              ffi.Double,
              ffi.Pointer<PixelWand>,
              ssize_t,
              ssize_t,
              ffi.Int32)>>('MagickFloodfillPaintImage');
  late final _MagickFloodfillPaintImage =
      _MagickFloodfillPaintImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>, double,
              ffi.Pointer<PixelWand>, int, int, int)>();

  int MagickFlopImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickFlopImage(
      arg0,
    );
  }

  late final _MagickFlopImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickFlopImage');
  late final _MagickFlopImage =
      _MagickFlopImagePtr.asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickForwardFourierTransformImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickForwardFourierTransformImage(
      arg0,
      arg1,
    );
  }

  late final _MagickForwardFourierTransformImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickForwardFourierTransformImage');
  late final _MagickForwardFourierTransformImage =
      _MagickForwardFourierTransformImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickFrameImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
    int arg6,
  ) {
    return _MagickFrameImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
    );
  }

  late final _MagickFrameImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>,
              ffi.Size,
              ffi.Size,
              ssize_t,
              ssize_t,
              ffi.Int32)>>('MagickFrameImage');
  late final _MagickFrameImage = _MagickFrameImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>, int, int,
          int, int, int)>();

  int MagickFunctionImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Double> arg3,
  ) {
    return _MagickFunctionImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickFunctionImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32, ffi.Size,
              ffi.Pointer<ffi.Double>)>>('MagickFunctionImage');
  late final _MagickFunctionImage = _MagickFunctionImagePtr.asFunction<
      int Function(
          ffi.Pointer<MagickWand>, int, int, ffi.Pointer<ffi.Double>)>();

  int MagickGammaImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickGammaImage(
      arg0,
      arg1,
    );
  }

  late final _MagickGammaImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickGammaImage');
  late final _MagickGammaImage = _MagickGammaImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickGaussianBlurImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickGaussianBlurImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGaussianBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickGaussianBlurImage');
  late final _MagickGaussianBlurImage = _MagickGaussianBlurImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickGetImageAlphaChannel(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageAlphaChannel(
      arg0,
    );
  }

  late final _MagickGetImageAlphaChannelPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageAlphaChannel');
  late final _MagickGetImageAlphaChannel = _MagickGetImageAlphaChannelPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageBackgroundColor(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _MagickGetImageBackgroundColor(
      arg0,
      arg1,
    );
  }

  late final _MagickGetImageBackgroundColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>)>>('MagickGetImageBackgroundColor');
  late final _MagickGetImageBackgroundColor =
      _MagickGetImageBackgroundColorPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>)>();

  int MagickGetImageBluePrimary(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
    ffi.Pointer<ffi.Double> arg3,
  ) {
    return _MagickGetImageBluePrimary(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickGetImageBluePrimaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('MagickGetImageBluePrimary');
  late final _MagickGetImageBluePrimary =
      _MagickGetImageBluePrimaryPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int MagickGetImageBorderColor(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _MagickGetImageBorderColor(
      arg0,
      arg1,
    );
  }

  late final _MagickGetImageBorderColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>)>>('MagickGetImageBorderColor');
  late final _MagickGetImageBorderColor =
      _MagickGetImageBorderColorPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>)>();

  int MagickGetImageKurtosis(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
  ) {
    return _MagickGetImageKurtosis(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetImageKurtosisPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('MagickGetImageKurtosis');
  late final _MagickGetImageKurtosis = _MagickGetImageKurtosisPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int MagickGetImageMean(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
  ) {
    return _MagickGetImageMean(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetImageMeanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('MagickGetImageMean');
  late final _MagickGetImageMean = _MagickGetImageMeanPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int MagickGetImageRange(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
  ) {
    return _MagickGetImageRange(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetImageRangePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('MagickGetImageRange');
  late final _MagickGetImageRange = _MagickGetImageRangePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
          ffi.Pointer<ffi.Double>)>();

  int MagickGetImageColormapColor(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    ffi.Pointer<PixelWand> arg2,
  ) {
    return _MagickGetImageColormapColor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetImageColormapColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Pointer<PixelWand>)>>('MagickGetImageColormapColor');
  late final _MagickGetImageColormapColor =
      _MagickGetImageColormapColorPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, int, ffi.Pointer<PixelWand>)>();

  int MagickGetImageDistortion(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
    int arg2,
    ffi.Pointer<ffi.Double> arg3,
  ) {
    return _MagickGetImageDistortion(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickGetImageDistortionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>,
              ffi.Int32, ffi.Pointer<ffi.Double>)>>('MagickGetImageDistortion');
  late final _MagickGetImageDistortion =
      _MagickGetImageDistortionPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>, int,
              ffi.Pointer<ffi.Double>)>();

  int MagickGetImageGreenPrimary(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
    ffi.Pointer<ffi.Double> arg3,
  ) {
    return _MagickGetImageGreenPrimary(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickGetImageGreenPrimaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('MagickGetImageGreenPrimary');
  late final _MagickGetImageGreenPrimary =
      _MagickGetImageGreenPrimaryPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int MagickGetImageLength(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickSizeType> arg1,
  ) {
    return _MagickGetImageLength(
      arg0,
      arg1,
    );
  }

  late final _MagickGetImageLengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<MagickSizeType>)>>('MagickGetImageLength');
  late final _MagickGetImageLength = _MagickGetImageLengthPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickSizeType>)>();

  int MagickGetImageMatteColor(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _MagickGetImageMatteColor(
      arg0,
      arg1,
    );
  }

  late final _MagickGetImageMatteColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>)>>('MagickGetImageMatteColor');
  late final _MagickGetImageMatteColor =
      _MagickGetImageMatteColorPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>)>();

  int MagickGetImagePage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Size> arg1,
    ffi.Pointer<ffi.Size> arg2,
    ffi.Pointer<ssize_t> arg3,
    ffi.Pointer<ssize_t> arg4,
  ) {
    return _MagickGetImagePage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickGetImagePagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ssize_t>,
              ffi.Pointer<ssize_t>)>>('MagickGetImagePage');
  late final _MagickGetImagePage = _MagickGetImagePagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Size>, ffi.Pointer<ssize_t>, ffi.Pointer<ssize_t>)>();

  int MagickGetImagePixelColor(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<PixelWand> arg3,
  ) {
    return _MagickGetImagePixelColor(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickGetImagePixelColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ssize_t, ssize_t,
              ffi.Pointer<PixelWand>)>>('MagickGetImagePixelColor');
  late final _MagickGetImagePixelColor =
      _MagickGetImagePixelColorPtr.asFunction<
          int Function(
              ffi.Pointer<MagickWand>, int, int, ffi.Pointer<PixelWand>)>();

  int MagickGetImageRedPrimary(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
    ffi.Pointer<ffi.Double> arg3,
  ) {
    return _MagickGetImageRedPrimary(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickGetImageRedPrimaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('MagickGetImageRedPrimary');
  late final _MagickGetImageRedPrimary =
      _MagickGetImageRedPrimaryPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int MagickGetImageResolution(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
  ) {
    return _MagickGetImageResolution(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickGetImageResolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('MagickGetImageResolution');
  late final _MagickGetImageResolution =
      _MagickGetImageResolutionPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>();

  int MagickGetImageWhitePoint(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Double> arg1,
    ffi.Pointer<ffi.Double> arg2,
    ffi.Pointer<ffi.Double> arg3,
  ) {
    return _MagickGetImageWhitePoint(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickGetImageWhitePointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>)>>('MagickGetImageWhitePoint');
  late final _MagickGetImageWhitePoint =
      _MagickGetImageWhitePointPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Double>,
              ffi.Pointer<ffi.Double>, ffi.Pointer<ffi.Double>)>();

  int MagickHaldClutImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
  ) {
    return _MagickHaldClutImage(
      arg0,
      arg1,
    );
  }

  late final _MagickHaldClutImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<MagickWand>)>>('MagickHaldClutImage');
  late final _MagickHaldClutImage = _MagickHaldClutImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>)>();

  int MagickHasNextImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickHasNextImage(
      arg0,
    );
  }

  late final _MagickHasNextImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickHasNextImage');
  late final _MagickHasNextImage = _MagickHasNextImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickHasPreviousImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickHasPreviousImage(
      arg0,
    );
  }

  late final _MagickHasPreviousImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickHasPreviousImage');
  late final _MagickHasPreviousImage = _MagickHasPreviousImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickHoughLineImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _MagickHoughLineImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickHoughLineImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ffi.Size)>>('MagickHoughLineImage');
  late final _MagickHoughLineImage = _MagickHoughLineImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int)>();

  int MagickImplodeImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    int arg2,
  ) {
    return _MagickImplodeImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickImplodeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Int32)>>('MagickImplodeImage');
  late final _MagickImplodeImage = _MagickImplodeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, int)>();

  int MagickImportImagePixels(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
    int arg6,
    ffi.Pointer<ffi.Void> arg7,
  ) {
    return _MagickImportImagePixels(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
      arg6,
      arg7,
    );
  }

  late final _MagickImportImagePixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ssize_t,
              ssize_t,
              ffi.Size,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Void>)>>('MagickImportImagePixels');
  late final _MagickImportImagePixels = _MagickImportImagePixelsPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int, int,
          ffi.Pointer<ffi.Char>, int, ffi.Pointer<ffi.Void>)>();

  int MagickInterpolativeResizeImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _MagickInterpolativeResizeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickInterpolativeResizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ffi.Int32)>>('MagickInterpolativeResizeImage');
  late final _MagickInterpolativeResizeImage =
      _MagickInterpolativeResizeImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, int, int, int)>();

  int MagickInverseFourierTransformImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
    int arg2,
  ) {
    return _MagickInverseFourierTransformImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickInverseFourierTransformImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickInverseFourierTransformImage');
  late final _MagickInverseFourierTransformImage =
      _MagickInverseFourierTransformImagePtr.asFunction<
          int Function(
              ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>, int)>();

  int MagickKmeansImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    double arg3,
  ) {
    return _MagickKmeansImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickKmeansImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ffi.Double)>>('MagickKmeansImage');
  late final _MagickKmeansImage = _MagickKmeansImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, double)>();

  int MagickKuwaharaImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickKuwaharaImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickKuwaharaImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickKuwaharaImage');
  late final _MagickKuwaharaImage = _MagickKuwaharaImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickLabelImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickLabelImage(
      arg0,
      arg1,
    );
  }

  late final _MagickLabelImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickLabelImage');
  late final _MagickLabelImage = _MagickLabelImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickLevelImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickLevelImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickLevelImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double)>>('MagickLevelImage');
  late final _MagickLevelImage = _MagickLevelImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double, double)>();

  int MagickLevelImageColors(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    ffi.Pointer<PixelWand> arg2,
    int arg3,
  ) {
    return _MagickLevelImageColors(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickLevelImageColorsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
              ffi.Pointer<PixelWand>, ffi.Int32)>>('MagickLevelImageColors');
  late final _MagickLevelImageColors = _MagickLevelImageColorsPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
          ffi.Pointer<PixelWand>, int)>();

  int MagickLevelizeImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickLevelizeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickLevelizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double)>>('MagickLevelizeImage');
  late final _MagickLevelizeImage = _MagickLevelizeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double, double)>();

  int MagickLinearStretchImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickLinearStretchImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickLinearStretchImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickLinearStretchImage');
  late final _MagickLinearStretchImage = _MagickLinearStretchImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickLiquidRescaleImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    double arg3,
    double arg4,
  ) {
    return _MagickLiquidRescaleImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickLiquidRescaleImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ffi.Double, ffi.Double)>>('MagickLiquidRescaleImage');
  late final _MagickLiquidRescaleImage =
      _MagickLiquidRescaleImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, int, int, double, double)>();

  int MagickLocalContrastImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickLocalContrastImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickLocalContrastImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickLocalContrastImage');
  late final _MagickLocalContrastImage = _MagickLocalContrastImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickMagnifyImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickMagnifyImage(
      arg0,
    );
  }

  late final _MagickMagnifyImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickMagnifyImage');
  late final _MagickMagnifyImage = _MagickMagnifyImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickMeanShiftImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    double arg3,
  ) {
    return _MagickMeanShiftImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickMeanShiftImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ffi.Double)>>('MagickMeanShiftImage');
  late final _MagickMeanShiftImage = _MagickMeanShiftImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, double)>();

  int MagickMinifyImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickMinifyImage(
      arg0,
    );
  }

  late final _MagickMinifyImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickMinifyImage');
  late final _MagickMinifyImage =
      _MagickMinifyImagePtr.asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickModeImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickModeImage(
      arg0,
      arg1,
    );
  }

  late final _MagickModeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickModeImage');
  late final _MagickModeImage = _MagickModeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickModulateImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickModulateImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickModulateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double)>>('MagickModulateImage');
  late final _MagickModulateImage = _MagickModulateImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double, double)>();

  int MagickMorphologyImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<KernelInfo> arg3,
  ) {
    return _MagickMorphologyImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickMorphologyImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32, ssize_t,
              ffi.Pointer<KernelInfo>)>>('MagickMorphologyImage');
  late final _MagickMorphologyImage = _MagickMorphologyImagePtr.asFunction<
      int Function(
          ffi.Pointer<MagickWand>, int, int, ffi.Pointer<KernelInfo>)>();

  int MagickMotionBlurImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickMotionBlurImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickMotionBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double)>>('MagickMotionBlurImage');
  late final _MagickMotionBlurImage = _MagickMotionBlurImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double, double)>();

  int MagickNegateImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickNegateImage(
      arg0,
      arg1,
    );
  }

  late final _MagickNegateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickNegateImage');
  late final _MagickNegateImage = _MagickNegateImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickNewImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<PixelWand> arg3,
  ) {
    return _MagickNewImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickNewImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ffi.Pointer<PixelWand>)>>('MagickNewImage');
  late final _MagickNewImage = _MagickNewImagePtr.asFunction<
      int Function(
          ffi.Pointer<MagickWand>, int, int, ffi.Pointer<PixelWand>)>();

  int MagickNextImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickNextImage(
      arg0,
    );
  }

  late final _MagickNextImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickNextImage');
  late final _MagickNextImage =
      _MagickNextImagePtr.asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickNormalizeImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickNormalizeImage(
      arg0,
    );
  }

  late final _MagickNormalizeImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickNormalizeImage');
  late final _MagickNormalizeImage = _MagickNormalizeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickOilPaintImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickOilPaintImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickOilPaintImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickOilPaintImage');
  late final _MagickOilPaintImage = _MagickOilPaintImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickOpaquePaintImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    ffi.Pointer<PixelWand> arg2,
    double arg3,
    int arg4,
  ) {
    return _MagickOpaquePaintImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickOpaquePaintImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>,
              ffi.Pointer<PixelWand>,
              ffi.Double,
              ffi.Int32)>>('MagickOpaquePaintImage');
  late final _MagickOpaquePaintImage = _MagickOpaquePaintImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
          ffi.Pointer<PixelWand>, double, int)>();

  int MagickOptimizeImageTransparency(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickOptimizeImageTransparency(
      arg0,
    );
  }

  late final _MagickOptimizeImageTransparencyPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickOptimizeImageTransparency');
  late final _MagickOptimizeImageTransparency =
      _MagickOptimizeImageTransparencyPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>)>();

  int MagickOrderedDitherImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickOrderedDitherImage(
      arg0,
      arg1,
    );
  }

  late final _MagickOrderedDitherImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickOrderedDitherImage');
  late final _MagickOrderedDitherImage =
      _MagickOrderedDitherImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickPolynomialImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    ffi.Pointer<ffi.Double> arg2,
  ) {
    return _MagickPolynomialImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickPolynomialImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Pointer<ffi.Double>)>>('MagickPolynomialImage');
  late final _MagickPolynomialImage = _MagickPolynomialImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, ffi.Pointer<ffi.Double>)>();

  int MagickTransparentPaintImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    double arg2,
    double arg3,
    int invert,
  ) {
    return _MagickTransparentPaintImage(
      arg0,
      arg1,
      arg2,
      arg3,
      invert,
    );
  }

  late final _MagickTransparentPaintImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>,
              ffi.Double,
              ffi.Double,
              ffi.Int32)>>('MagickTransparentPaintImage');
  late final _MagickTransparentPaintImage =
      _MagickTransparentPaintImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>, double,
              double, int)>();

  int MagickPingImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickPingImage(
      arg0,
      arg1,
    );
  }

  late final _MagickPingImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickPingImage');
  late final _MagickPingImage = _MagickPingImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickPingImageBlob(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _MagickPingImageBlob(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickPingImageBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('MagickPingImageBlob');
  late final _MagickPingImageBlob = _MagickPingImageBlobPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Void>, int)>();

  int MagickPingImageFile(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _MagickPingImageFile(
      arg0,
      arg1,
    );
  }

  late final _MagickPingImageFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<FILE>)>>('MagickPingImageFile');
  late final _MagickPingImageFile = _MagickPingImageFilePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<FILE>)>();

  int MagickPolaroidImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<DrawingWand> arg1,
    ffi.Pointer<ffi.Char> arg2,
    double arg3,
    int arg4,
  ) {
    return _MagickPolaroidImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickPolaroidImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>,
              ffi.Double,
              ffi.Int32)>>('MagickPolaroidImage');
  late final _MagickPolaroidImage = _MagickPolaroidImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<DrawingWand>,
          ffi.Pointer<ffi.Char>, double, int)>();

  int MagickPosterizeImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
  ) {
    return _MagickPosterizeImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickPosterizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Int32)>>('MagickPosterizeImage');
  late final _MagickPosterizeImage = _MagickPosterizeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int)>();

  int MagickPreviousImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickPreviousImage(
      arg0,
    );
  }

  late final _MagickPreviousImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickPreviousImage');
  late final _MagickPreviousImage = _MagickPreviousImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickQuantizeImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _MagickQuantizeImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _MagickQuantizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Int32,
              ffi.Size, ffi.Int32, ffi.Int32)>>('MagickQuantizeImage');
  late final _MagickQuantizeImage = _MagickQuantizeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int, int, int)>();

  int MagickQuantizeImages(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _MagickQuantizeImages(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _MagickQuantizeImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Int32,
              ffi.Size, ffi.Int32, ffi.Int32)>>('MagickQuantizeImages');
  late final _MagickQuantizeImages = _MagickQuantizeImagesPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int, int, int)>();

  int MagickRangeThresholdImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _MagickRangeThresholdImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickRangeThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('MagickRangeThresholdImage');
  late final _MagickRangeThresholdImage =
      _MagickRangeThresholdImagePtr.asFunction<
          int Function(
              ffi.Pointer<MagickWand>, double, double, double, double)>();

  int MagickRotationalBlurImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickRotationalBlurImage(
      arg0,
      arg1,
    );
  }

  late final _MagickRotationalBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Double)>>('MagickRotationalBlurImage');
  late final _MagickRotationalBlurImage = _MagickRotationalBlurImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickRaiseImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
    int arg5,
  ) {
    return _MagickRaiseImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _MagickRaiseImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ssize_t, ssize_t, ffi.Int32)>>('MagickRaiseImage');
  late final _MagickRaiseImage = _MagickRaiseImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int, int, int)>();

  int MagickRandomThresholdImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickRandomThresholdImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickRandomThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickRandomThresholdImage');
  late final _MagickRandomThresholdImage = _MagickRandomThresholdImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickReadImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickReadImage(
      arg0,
      arg1,
    );
  }

  late final _MagickReadImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickReadImage');
  late final _MagickReadImage = _MagickReadImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickReadImageBlob(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Void> arg1,
    int arg2,
  ) {
    return _MagickReadImageBlob(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickReadImageBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Void>,
              ffi.Size)>>('MagickReadImageBlob');
  late final _MagickReadImageBlob = _MagickReadImageBlobPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Void>, int)>();

  int MagickReadImageFile(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _MagickReadImageFile(
      arg0,
      arg1,
    );
  }

  late final _MagickReadImageFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<FILE>)>>('MagickReadImageFile');
  late final _MagickReadImageFile = _MagickReadImageFilePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<FILE>)>();

  int MagickReduceNoiseImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickReduceNoiseImage(
      arg0,
      arg1,
    );
  }

  late final _MagickReduceNoiseImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickReduceNoiseImage');
  late final _MagickReduceNoiseImage = _MagickReduceNoiseImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickRemapImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
    int arg2,
  ) {
    return _MagickRemapImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickRemapImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickRemapImage');
  late final _MagickRemapImage = _MagickRemapImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>, int)>();

  int MagickRemoveImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickRemoveImage(
      arg0,
    );
  }

  late final _MagickRemoveImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickRemoveImage');
  late final _MagickRemoveImage =
      _MagickRemoveImagePtr.asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickResampleImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    int arg3,
  ) {
    return _MagickResampleImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickResampleImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Int32)>>('MagickResampleImage');
  late final _MagickResampleImage = _MagickResampleImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double, int)>();

  int MagickResetImagePage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickResetImagePage(
      arg0,
      arg1,
    );
  }

  late final _MagickResetImagePagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickResetImagePage');
  late final _MagickResetImagePage = _MagickResetImagePagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickResizeImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _MagickResizeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickResizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ffi.Int32)>>('MagickResizeImage');
  late final _MagickResizeImage = _MagickResizeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int)>();

  int MagickRollImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
  ) {
    return _MagickRollImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickRollImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ssize_t, ssize_t)>>('MagickRollImage');
  late final _MagickRollImage = _MagickRollImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int)>();

  int MagickRotateImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    double arg2,
  ) {
    return _MagickRotateImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickRotateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
              ffi.Double)>>('MagickRotateImage');
  late final _MagickRotateImage = _MagickRotateImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>, double)>();

  int MagickSampleImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
  ) {
    return _MagickSampleImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSampleImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Size)>>('MagickSampleImage');
  late final _MagickSampleImage = _MagickSampleImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int)>();

  int MagickScaleImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
  ) {
    return _MagickScaleImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickScaleImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Size)>>('MagickScaleImage');
  late final _MagickScaleImage = _MagickScaleImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int)>();

  int MagickSegmentImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    double arg3,
    double arg4,
  ) {
    return _MagickSegmentImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickSegmentImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32, ffi.Int32,
              ffi.Double, ffi.Double)>>('MagickSegmentImage');
  late final _MagickSegmentImage = _MagickSegmentImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, double, double)>();

  int MagickSelectiveBlurImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickSelectiveBlurImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickSelectiveBlurImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double)>>('MagickSelectiveBlurImage');
  late final _MagickSelectiveBlurImage =
      _MagickSelectiveBlurImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, double, double, double)>();

  int MagickSeparateImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSeparateImage(
      arg0,
      arg1,
    );
  }

  late final _MagickSeparateImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSeparateImage');
  late final _MagickSeparateImage = _MagickSeparateImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSepiaToneImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickSepiaToneImage(
      arg0,
      arg1,
    );
  }

  late final _MagickSepiaToneImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickSepiaToneImage');
  late final _MagickSepiaToneImage = _MagickSepiaToneImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickSetImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
  ) {
    return _MagickSetImage(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<MagickWand>)>>('MagickSetImage');
  late final _MagickSetImage = _MagickSetImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>)>();

  int MagickSetImageAlpha(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickSetImageAlpha(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageAlphaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickSetImageAlpha');
  late final _MagickSetImageAlpha = _MagickSetImageAlphaPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickSetImageAlphaChannel(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageAlphaChannel(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageAlphaChannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickSetImageAlphaChannel');
  late final _MagickSetImageAlphaChannel = _MagickSetImageAlphaChannelPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageBackgroundColor(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _MagickSetImageBackgroundColor(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageBackgroundColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>)>>('MagickSetImageBackgroundColor');
  late final _MagickSetImageBackgroundColor =
      _MagickSetImageBackgroundColorPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>)>();

  int MagickSetImageBluePrimary(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickSetImageBluePrimary(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickSetImageBluePrimaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double)>>('MagickSetImageBluePrimary');
  late final _MagickSetImageBluePrimary =
      _MagickSetImageBluePrimaryPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, double, double, double)>();

  int MagickSetImageBorderColor(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _MagickSetImageBorderColor(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageBorderColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>)>>('MagickSetImageBorderColor');
  late final _MagickSetImageBorderColor =
      _MagickSetImageBorderColorPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>)>();

  int MagickSetImageColor(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _MagickSetImageColor(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>)>>('MagickSetImageColor');
  late final _MagickSetImageColor = _MagickSetImageColorPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>)>();

  int MagickSetImageColormapColor(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    ffi.Pointer<PixelWand> arg2,
  ) {
    return _MagickSetImageColormapColor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetImageColormapColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Pointer<PixelWand>)>>('MagickSetImageColormapColor');
  late final _MagickSetImageColormapColor =
      _MagickSetImageColormapColorPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, int, ffi.Pointer<PixelWand>)>();

  int MagickSetImageColorspace(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageColorspace(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageColorspacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetImageColorspace');
  late final _MagickSetImageColorspace = _MagickSetImageColorspacePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageCompose(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageCompose(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageComposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetImageCompose');
  late final _MagickSetImageCompose = _MagickSetImageComposePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageCompression(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageCompression(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageCompressionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickSetImageCompression');
  late final _MagickSetImageCompression = _MagickSetImageCompressionPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageDelay(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageDelay(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageDelayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Size)>>('MagickSetImageDelay');
  late final _MagickSetImageDelay = _MagickSetImageDelayPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageDepth(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageDepth(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageDepthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Size)>>('MagickSetImageDepth');
  late final _MagickSetImageDepth = _MagickSetImageDepthPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageDispose(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageDispose(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageDisposePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetImageDispose');
  late final _MagickSetImageDispose = _MagickSetImageDisposePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageCompressionQuality(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageCompressionQuality(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageCompressionQualityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Size)>>('MagickSetImageCompressionQuality');
  late final _MagickSetImageCompressionQuality =
      _MagickSetImageCompressionQualityPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageEndian(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageEndian(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageEndianPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetImageEndian');
  late final _MagickSetImageEndian = _MagickSetImageEndianPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageExtent(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
  ) {
    return _MagickSetImageExtent(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetImageExtentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Size)>>('MagickSetImageExtent');
  late final _MagickSetImageExtent = _MagickSetImageExtentPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int)>();

  int MagickSetImageFilename(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickSetImageFilename(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageFilenamePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickSetImageFilename');
  late final _MagickSetImageFilename = _MagickSetImageFilenamePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickSetImageFormat(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickSetImageFormat(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageFormatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickSetImageFormat');
  late final _MagickSetImageFormat = _MagickSetImageFormatPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickSetImageFuzz(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickSetImageFuzz(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageFuzzPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickSetImageFuzz');
  late final _MagickSetImageFuzz = _MagickSetImageFuzzPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickSetImageGamma(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickSetImageGamma(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageGammaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickSetImageGamma');
  late final _MagickSetImageGamma = _MagickSetImageGammaPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickSetImageGravity(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageGravity(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageGravityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetImageGravity');
  late final _MagickSetImageGravity = _MagickSetImageGravityPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageGreenPrimary(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickSetImageGreenPrimary(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickSetImageGreenPrimaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double)>>('MagickSetImageGreenPrimary');
  late final _MagickSetImageGreenPrimary =
      _MagickSetImageGreenPrimaryPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, double, double, double)>();

  int MagickSetImageInterlaceScheme(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageInterlaceScheme(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageInterlaceSchemePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickSetImageInterlaceScheme');
  late final _MagickSetImageInterlaceScheme = _MagickSetImageInterlaceSchemePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageInterpolateMethod(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageInterpolateMethod(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageInterpolateMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickSetImageInterpolateMethod');
  late final _MagickSetImageInterpolateMethod =
      _MagickSetImageInterpolateMethodPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageIterations(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageIterations(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageIterationsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Size)>>('MagickSetImageIterations');
  late final _MagickSetImageIterations = _MagickSetImageIterationsPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageMask(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    ffi.Pointer<MagickWand> arg2,
  ) {
    return _MagickSetImageMask(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetImageMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32,
              ffi.Pointer<MagickWand>)>>('MagickSetImageMask');
  late final _MagickSetImageMask = _MagickSetImageMaskPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, ffi.Pointer<MagickWand>)>();

  int MagickSetImageMatte(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageMatte(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageMattePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetImageMatte');
  late final _MagickSetImageMatte = _MagickSetImageMattePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageMatteColor(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _MagickSetImageMatteColor(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageMatteColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>)>>('MagickSetImageMatteColor');
  late final _MagickSetImageMatteColor =
      _MagickSetImageMatteColorPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>)>();

  int MagickSetImageOrientation(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageOrientation(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageOrientationPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickSetImageOrientation');
  late final _MagickSetImageOrientation = _MagickSetImageOrientationPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImagePage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _MagickSetImagePage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickSetImagePagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ssize_t, ssize_t)>>('MagickSetImagePage');
  late final _MagickSetImagePage = _MagickSetImagePagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int, int)>();

  int MagickSetImagePixelColor(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<PixelWand> arg3,
  ) {
    return _MagickSetImagePixelColor(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickSetImagePixelColorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ssize_t, ssize_t,
              ffi.Pointer<PixelWand>)>>('MagickSetImagePixelColor');
  late final _MagickSetImagePixelColor =
      _MagickSetImagePixelColorPtr.asFunction<
          int Function(
              ffi.Pointer<MagickWand>, int, int, ffi.Pointer<PixelWand>)>();

  int MagickSetImageRedPrimary(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickSetImageRedPrimary(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickSetImageRedPrimaryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double)>>('MagickSetImageRedPrimary');
  late final _MagickSetImageRedPrimary =
      _MagickSetImageRedPrimaryPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, double, double, double)>();

  int MagickSetImageRenderingIntent(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageRenderingIntent(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageRenderingIntentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickSetImageRenderingIntent');
  late final _MagickSetImageRenderingIntent = _MagickSetImageRenderingIntentPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageResolution(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickSetImageResolution(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetImageResolutionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickSetImageResolution');
  late final _MagickSetImageResolution = _MagickSetImageResolutionPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickSetImageScene(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageScene(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageScenePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Size)>>('MagickSetImageScene');
  late final _MagickSetImageScene = _MagickSetImageScenePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageTicksPerSecond(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageTicksPerSecond(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageTicksPerSecondPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ssize_t)>>('MagickSetImageTicksPerSecond');
  late final _MagickSetImageTicksPerSecond = _MagickSetImageTicksPerSecondPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageType(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageType(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageTypePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetImageType');
  late final _MagickSetImageType = _MagickSetImageTypePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageUnits(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageUnits(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageUnitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickSetImageUnits');
  late final _MagickSetImageUnits = _MagickSetImageUnitsPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickSetImageWhitePoint(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickSetImageWhitePoint(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickSetImageWhitePointPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double)>>('MagickSetImageWhitePoint');
  late final _MagickSetImageWhitePoint =
      _MagickSetImageWhitePointPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, double, double, double)>();

  int MagickShadeImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickShadeImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickShadeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32, ffi.Double,
              ffi.Double)>>('MagickShadeImage');
  late final _MagickShadeImage = _MagickShadeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, double, double)>();

  int MagickShadowImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    int arg3,
    int arg4,
  ) {
    return _MagickShadowImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickShadowImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ssize_t, ssize_t)>>('MagickShadowImage');
  late final _MagickShadowImage = _MagickShadowImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double, int, int)>();

  int MagickSharpenImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickSharpenImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSharpenImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickSharpenImage');
  late final _MagickSharpenImage = _MagickSharpenImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickShaveImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
  ) {
    return _MagickShaveImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickShaveImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Size)>>('MagickShaveImage');
  late final _MagickShaveImage = _MagickShaveImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int)>();

  int MagickShearImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickShearImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickShearImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
              ffi.Double, ffi.Double)>>('MagickShearImage');
  late final _MagickShearImage = _MagickShearImagePtr.asFunction<
      int Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>, double, double)>();

  int MagickSigmoidalContrastImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickSigmoidalContrastImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickSigmoidalContrastImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32, ffi.Double,
              ffi.Double)>>('MagickSigmoidalContrastImage');
  late final _MagickSigmoidalContrastImage = _MagickSigmoidalContrastImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int, double, double)>();

  int MagickSketchImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
  ) {
    return _MagickSketchImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickSketchImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double)>>('MagickSketchImage');
  late final _MagickSketchImage = _MagickSketchImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double, double)>();

  int MagickSolarizeImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickSolarizeImage(
      arg0,
      arg1,
    );
  }

  late final _MagickSolarizeImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickSolarizeImage');
  late final _MagickSolarizeImage = _MagickSolarizeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickSparseColorImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Double> arg3,
  ) {
    return _MagickSparseColorImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickSparseColorImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32, ffi.Size,
              ffi.Pointer<ffi.Double>)>>('MagickSparseColorImage');
  late final _MagickSparseColorImage = _MagickSparseColorImagePtr.asFunction<
      int Function(
          ffi.Pointer<MagickWand>, int, int, ffi.Pointer<ffi.Double>)>();

  int MagickSpliceImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _MagickSpliceImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickSpliceImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size, ffi.Size,
              ssize_t, ssize_t)>>('MagickSpliceImage');
  late final _MagickSpliceImage = _MagickSpliceImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int, int)>();

  int MagickSpreadImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    double arg2,
  ) {
    return _MagickSpreadImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSpreadImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32,
              ffi.Double)>>('MagickSpreadImage');
  late final _MagickSpreadImage = _MagickSpreadImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, double)>();

  int MagickStatisticImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
  ) {
    return _MagickStatisticImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickStatisticImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32, ffi.Size,
              ffi.Size)>>('MagickStatisticImage');
  late final _MagickStatisticImage = _MagickStatisticImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int, int)>();

  int MagickStripImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickStripImage(
      arg0,
    );
  }

  late final _MagickStripImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickStripImage');
  late final _MagickStripImage =
      _MagickStripImagePtr.asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickSwirlImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    int arg2,
  ) {
    return _MagickSwirlImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSwirlImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Int32)>>('MagickSwirlImage');
  late final _MagickSwirlImage = _MagickSwirlImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, int)>();

  int MagickTintImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
    ffi.Pointer<PixelWand> arg2,
  ) {
    return _MagickTintImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickTintImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
              ffi.Pointer<PixelWand>)>>('MagickTintImage');
  late final _MagickTintImage = _MagickTintImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>,
          ffi.Pointer<PixelWand>)>();

  int MagickTransformImageColorspace(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickTransformImageColorspace(
      arg0,
      arg1,
    );
  }

  late final _MagickTransformImageColorspacePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickTransformImageColorspace');
  late final _MagickTransformImageColorspace =
      _MagickTransformImageColorspacePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, int)>();

  int MagickTransposeImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickTransposeImage(
      arg0,
    );
  }

  late final _MagickTransposeImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickTransposeImage');
  late final _MagickTransposeImage = _MagickTransposeImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickTransverseImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickTransverseImage(
      arg0,
    );
  }

  late final _MagickTransverseImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickTransverseImage');
  late final _MagickTransverseImage = _MagickTransverseImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickThresholdImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickThresholdImage(
      arg0,
      arg1,
    );
  }

  late final _MagickThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickThresholdImage');
  late final _MagickThresholdImage = _MagickThresholdImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickThresholdImageChannel(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    double arg2,
  ) {
    return _MagickThresholdImageChannel(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickThresholdImageChannelPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Int32,
              ffi.Double)>>('MagickThresholdImageChannel');
  late final _MagickThresholdImageChannel = _MagickThresholdImageChannelPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, int, double)>();

  int MagickThumbnailImage(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
  ) {
    return _MagickThumbnailImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickThumbnailImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Size)>>('MagickThumbnailImage');
  late final _MagickThumbnailImage = _MagickThumbnailImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int, int)>();

  int MagickTrimImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
  ) {
    return _MagickTrimImage(
      arg0,
      arg1,
    );
  }

  late final _MagickTrimImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ffi.Double)>>('MagickTrimImage');
  late final _MagickTrimImage = _MagickTrimImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double)>();

  int MagickUniqueImageColors(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickUniqueImageColors(
      arg0,
    );
  }

  late final _MagickUniqueImageColorsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickUniqueImageColors');
  late final _MagickUniqueImageColors = _MagickUniqueImageColorsPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickUnsharpMaskImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    double arg3,
    double arg4,
  ) {
    return _MagickUnsharpMaskImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickUnsharpMaskImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Double, ffi.Double)>>('MagickUnsharpMaskImage');
  late final _MagickUnsharpMaskImage = _MagickUnsharpMaskImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double, double, double)>();

  int MagickVignetteImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    int arg3,
    int arg4,
  ) {
    return _MagickVignetteImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickVignetteImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ssize_t, ssize_t)>>('MagickVignetteImage');
  late final _MagickVignetteImage = _MagickVignetteImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double, int, int)>();

  int MagickWaveImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
    int arg3,
  ) {
    return _MagickWaveImage(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickWaveImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double, ffi.Double,
              ffi.Int32)>>('MagickWaveImage');
  late final _MagickWaveImage = _MagickWaveImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, double, double, int)>();

  int MagickWaveletDenoiseImage(
    ffi.Pointer<MagickWand> arg0,
    double arg1,
    double arg2,
  ) {
    return _MagickWaveletDenoiseImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickWaveletDenoiseImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Double,
              ffi.Double)>>('MagickWaveletDenoiseImage');
  late final _MagickWaveletDenoiseImage = _MagickWaveletDenoiseImagePtr
      .asFunction<int Function(ffi.Pointer<MagickWand>, double, double)>();

  int MagickWhiteBalanceImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickWhiteBalanceImage(
      arg0,
    );
  }

  late final _MagickWhiteBalanceImagePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickWhiteBalanceImage');
  late final _MagickWhiteBalanceImage = _MagickWhiteBalanceImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickWhiteThresholdImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<PixelWand> arg1,
  ) {
    return _MagickWhiteThresholdImage(
      arg0,
      arg1,
    );
  }

  late final _MagickWhiteThresholdImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<PixelWand>)>>('MagickWhiteThresholdImage');
  late final _MagickWhiteThresholdImage =
      _MagickWhiteThresholdImagePtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, ffi.Pointer<PixelWand>)>();

  int MagickWriteImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickWriteImage(
      arg0,
      arg1,
    );
  }

  late final _MagickWriteImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickWriteImage');
  late final _MagickWriteImage = _MagickWriteImagePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  int MagickWriteImageFile(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _MagickWriteImageFile(
      arg0,
      arg1,
    );
  }

  late final _MagickWriteImageFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<FILE>)>>('MagickWriteImageFile');
  late final _MagickWriteImageFile = _MagickWriteImageFilePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<FILE>)>();

  int MagickWriteImages(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
    int arg2,
  ) {
    return _MagickWriteImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickWriteImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>,
              ffi.Int32)>>('MagickWriteImages');
  late final _MagickWriteImages = _MagickWriteImagesPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>, int)>();

  int MagickWriteImagesFile(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<FILE> arg1,
  ) {
    return _MagickWriteImagesFile(
      arg0,
      arg1,
    );
  }

  late final _MagickWriteImagesFilePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<FILE>)>>('MagickWriteImagesFile');
  late final _MagickWriteImagesFile = _MagickWriteImagesFilePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, ffi.Pointer<FILE>)>();

  MagickProgressMonitor MagickSetImageProgressMonitor(
    ffi.Pointer<MagickWand> arg0,
    MagickProgressMonitor arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _MagickSetImageProgressMonitor(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSetImageProgressMonitorPtr = _lookup<
      ffi.NativeFunction<
          MagickProgressMonitor Function(
              ffi.Pointer<MagickWand>,
              MagickProgressMonitor,
              ffi.Pointer<ffi.Void>)>>('MagickSetImageProgressMonitor');
  late final _MagickSetImageProgressMonitor =
      _MagickSetImageProgressMonitorPtr.asFunction<
          MagickProgressMonitor Function(ffi.Pointer<MagickWand>,
              MagickProgressMonitor, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<MagickWand> MagickAppendImages(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickAppendImages(
      arg0,
      arg1,
    );
  }

  late final _MagickAppendImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickAppendImages');
  late final _MagickAppendImages = _MagickAppendImagesPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<MagickWand> MagickChannelFxImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickChannelFxImage(
      arg0,
      arg1,
    );
  }

  late final _MagickChannelFxImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickChannelFxImage');
  late final _MagickChannelFxImage = _MagickChannelFxImagePtr.asFunction<
      ffi.Pointer<MagickWand> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<MagickWand> MagickCoalesceImages(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickCoalesceImages(
      arg0,
    );
  }

  late final _MagickCoalesceImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>)>>('MagickCoalesceImages');
  late final _MagickCoalesceImages = _MagickCoalesceImagesPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<MagickWand> MagickCombineImages(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickCombineImages(
      arg0,
      arg1,
    );
  }

  late final _MagickCombineImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickCombineImages');
  late final _MagickCombineImages = _MagickCombineImagesPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<MagickWand> MagickCompareImages(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
    int arg2,
    ffi.Pointer<ffi.Double> arg3,
  ) {
    return _MagickCompareImages(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MagickCompareImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<MagickWand>,
              ffi.Int32,
              ffi.Pointer<ffi.Double>)>>('MagickCompareImages');
  late final _MagickCompareImages = _MagickCompareImagesPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>,
          ffi.Pointer<MagickWand>, int, ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<MagickWand> MagickCompareImagesLayers(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickCompareImagesLayers(
      arg0,
      arg1,
    );
  }

  late final _MagickCompareImagesLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickCompareImagesLayers');
  late final _MagickCompareImagesLayers =
      _MagickCompareImagesLayersPtr.asFunction<
          ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<MagickWand> MagickComplexImages(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickComplexImages(
      arg0,
      arg1,
    );
  }

  late final _MagickComplexImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickComplexImages');
  late final _MagickComplexImages = _MagickComplexImagesPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<MagickWand> MagickDeconstructImages(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickDeconstructImages(
      arg0,
    );
  }

  late final _MagickDeconstructImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>)>>('MagickDeconstructImages');
  late final _MagickDeconstructImages = _MagickDeconstructImagesPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<MagickWand> MagickEvaluateImages(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickEvaluateImages(
      arg0,
      arg1,
    );
  }

  late final _MagickEvaluateImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickEvaluateImages');
  late final _MagickEvaluateImages = _MagickEvaluateImagesPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<MagickWand> MagickFxImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _MagickFxImage(
      arg0,
      arg1,
    );
  }

  late final _MagickFxImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Char>)>>('MagickFxImage');
  late final _MagickFxImage = _MagickFxImagePtr.asFunction<
      ffi.Pointer<MagickWand> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<MagickWand> MagickGetImage(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImage(
      arg0,
    );
  }

  late final _MagickGetImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>)>>('MagickGetImage');
  late final _MagickGetImage = _MagickGetImagePtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<MagickWand> MagickGetImageMask(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickGetImageMask(
      arg0,
      arg1,
    );
  }

  late final _MagickGetImageMaskPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickGetImageMask');
  late final _MagickGetImageMask = _MagickGetImageMaskPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<MagickWand> MagickGetImageRegion(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _MagickGetImageRegion(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MagickGetImageRegionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, ffi.Size,
              ffi.Size, ssize_t, ssize_t)>>('MagickGetImageRegion');
  late final _MagickGetImageRegion = _MagickGetImageRegionPtr.asFunction<
      ffi.Pointer<MagickWand> Function(
          ffi.Pointer<MagickWand>, int, int, int, int)>();

  ffi.Pointer<MagickWand> MagickMergeImageLayers(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickMergeImageLayers(
      arg0,
      arg1,
    );
  }

  late final _MagickMergeImageLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickMergeImageLayers');
  late final _MagickMergeImageLayers = _MagickMergeImageLayersPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<MagickWand> MagickMorphImages(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickMorphImages(
      arg0,
      arg1,
    );
  }

  late final _MagickMorphImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>, ffi.Size)>>('MagickMorphImages');
  late final _MagickMorphImages = _MagickMorphImagesPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<MagickWand> MagickMontageImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<DrawingWand> arg1,
    ffi.Pointer<ffi.Char> arg2,
    ffi.Pointer<ffi.Char> arg3,
    int arg4,
    ffi.Pointer<ffi.Char> arg5,
  ) {
    return _MagickMontageImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _MagickMontageImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<DrawingWand>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Int32,
              ffi.Pointer<ffi.Char>)>>('MagickMontageImage');
  late final _MagickMontageImage = _MagickMontageImagePtr.asFunction<
      ffi.Pointer<MagickWand> Function(
          ffi.Pointer<MagickWand>,
          ffi.Pointer<DrawingWand>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<MagickWand> MagickOptimizeImageLayers(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickOptimizeImageLayers(
      arg0,
    );
  }

  late final _MagickOptimizeImageLayersPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>)>>('MagickOptimizeImageLayers');
  late final _MagickOptimizeImageLayers = _MagickOptimizeImageLayersPtr
      .asFunction<ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<MagickWand> MagickPreviewImages(
    ffi.Pointer<MagickWand> wand,
    int arg1,
  ) {
    return _MagickPreviewImages(
      wand,
      arg1,
    );
  }

  late final _MagickPreviewImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>, ffi.Int32)>>('MagickPreviewImages');
  late final _MagickPreviewImages = _MagickPreviewImagesPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<MagickWand> MagickSimilarityImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
    int arg2,
    double arg3,
    ffi.Pointer<RectangleInfo> arg4,
    ffi.Pointer<ffi.Double> arg5,
  ) {
    return _MagickSimilarityImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _MagickSimilarityImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>,
              ffi.Pointer<MagickWand>,
              ffi.Int32,
              ffi.Double,
              ffi.Pointer<RectangleInfo>,
              ffi.Pointer<ffi.Double>)>>('MagickSimilarityImage');
  late final _MagickSimilarityImage = _MagickSimilarityImagePtr.asFunction<
      ffi.Pointer<MagickWand> Function(
          ffi.Pointer<MagickWand>,
          ffi.Pointer<MagickWand>,
          int,
          double,
          ffi.Pointer<RectangleInfo>,
          ffi.Pointer<ffi.Double>)>();

  ffi.Pointer<MagickWand> MagickSmushImages(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
  ) {
    return _MagickSmushImages(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSmushImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, ffi.Int32,
              ssize_t)>>('MagickSmushImages');
  late final _MagickSmushImages = _MagickSmushImagesPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>, int, int)>();

  ffi.Pointer<MagickWand> MagickSteganoImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
    int arg2,
  ) {
    return _MagickSteganoImage(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _MagickSteganoImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<MagickWand>, ssize_t)>>('MagickSteganoImage');
  late final _MagickSteganoImage = _MagickSteganoImagePtr.asFunction<
      ffi.Pointer<MagickWand> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<MagickWand> MagickStereoImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
  ) {
    return _MagickStereoImage(
      arg0,
      arg1,
    );
  }

  late final _MagickStereoImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<MagickWand>)>>('MagickStereoImage');
  late final _MagickStereoImage = _MagickStereoImagePtr.asFunction<
      ffi.Pointer<MagickWand> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>)>();

  ffi.Pointer<MagickWand> MagickTextureImage(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<MagickWand> arg1,
  ) {
    return _MagickTextureImage(
      arg0,
      arg1,
    );
  }

  late final _MagickTextureImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<MagickWand>)>>('MagickTextureImage');
  late final _MagickTextureImage = _MagickTextureImagePtr.asFunction<
      ffi.Pointer<MagickWand> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<MagickWand>)>();

  int MagickGetImageOrientation(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageOrientation(
      arg0,
    );
  }

  late final _MagickGetImageOrientationPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageOrientation');
  late final _MagickGetImageOrientation = _MagickGetImageOrientationPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.Pointer<PixelWand>> MagickGetImageHistogram(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _MagickGetImageHistogram(
      arg0,
      arg1,
    );
  }

  late final _MagickGetImageHistogramPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<PixelWand>> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Size>)>>('MagickGetImageHistogram');
  late final _MagickGetImageHistogram = _MagickGetImageHistogramPtr.asFunction<
      ffi.Pointer<ffi.Pointer<PixelWand>> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Size>)>();

  int MagickGetImageRenderingIntent(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageRenderingIntent(
      arg0,
    );
  }

  late final _MagickGetImageRenderingIntentPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageRenderingIntent');
  late final _MagickGetImageRenderingIntent = _MagickGetImageRenderingIntentPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageUnits(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageUnits(
      arg0,
    );
  }

  late final _MagickGetImageUnitsPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageUnits');
  late final _MagickGetImageUnits = _MagickGetImageUnitsPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageColors(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageColors(
      arg0,
    );
  }

  late final _MagickGetImageColorsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageColors');
  late final _MagickGetImageColors = _MagickGetImageColorsPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageCompressionQuality(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageCompressionQuality(
      arg0,
    );
  }

  late final _MagickGetImageCompressionQualityPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageCompressionQuality');
  late final _MagickGetImageCompressionQuality =
      _MagickGetImageCompressionQualityPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageDelay(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageDelay(
      arg0,
    );
  }

  late final _MagickGetImageDelayPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageDelay');
  late final _MagickGetImageDelay = _MagickGetImageDelayPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageDepth(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageDepth(
      arg0,
    );
  }

  late final _MagickGetImageDepthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageDepth');
  late final _MagickGetImageDepth = _MagickGetImageDepthPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageHeight(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageHeight(
      arg0,
    );
  }

  late final _MagickGetImageHeightPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageHeight');
  late final _MagickGetImageHeight = _MagickGetImageHeightPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageIterations(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageIterations(
      arg0,
    );
  }

  late final _MagickGetImageIterationsPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageIterations');
  late final _MagickGetImageIterations = _MagickGetImageIterationsPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageScene(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageScene(
      arg0,
    );
  }

  late final _MagickGetImageScenePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageScene');
  late final _MagickGetImageScene = _MagickGetImageScenePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageTicksPerSecond(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageTicksPerSecond(
      arg0,
    );
  }

  late final _MagickGetImageTicksPerSecondPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageTicksPerSecond');
  late final _MagickGetImageTicksPerSecond = _MagickGetImageTicksPerSecondPtr
      .asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetImageWidth(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageWidth(
      arg0,
    );
  }

  late final _MagickGetImageWidthPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageWidth');
  late final _MagickGetImageWidth = _MagickGetImageWidthPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickGetNumberImages(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetNumberImages(
      arg0,
    );
  }

  late final _MagickGetNumberImagesPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetNumberImages');
  late final _MagickGetNumberImages = _MagickGetNumberImagesPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<ffi.UnsignedChar> MagickGetImageBlob(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _MagickGetImageBlob(
      arg0,
      arg1,
    );
  }

  late final _MagickGetImageBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Size>)>>('MagickGetImageBlob');
  late final _MagickGetImageBlob = _MagickGetImageBlobPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.UnsignedChar> MagickGetImagesBlob(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _MagickGetImagesBlob(
      arg0,
      arg1,
    );
  }

  late final _MagickGetImagesBlobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.UnsignedChar> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Size>)>>('MagickGetImagesBlob');
  late final _MagickGetImagesBlob = _MagickGetImagesBlobPtr.asFunction<
      ffi.Pointer<ffi.UnsignedChar> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Size>)>();

  int MagickGetImageVirtualPixelMethod(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetImageVirtualPixelMethod(
      arg0,
    );
  }

  late final _MagickGetImageVirtualPixelMethodPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetImageVirtualPixelMethod');
  late final _MagickGetImageVirtualPixelMethod =
      _MagickGetImageVirtualPixelMethodPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>)>();

  int MagickSetImageVirtualPixelMethod(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetImageVirtualPixelMethod(
      arg0,
      arg1,
    );
  }

  late final _MagickSetImageVirtualPixelMethodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<MagickWand>,
              ffi.Int32)>>('MagickSetImageVirtualPixelMethod');
  late final _MagickSetImageVirtualPixelMethod =
      _MagickSetImageVirtualPixelMethodPtr.asFunction<
          int Function(ffi.Pointer<MagickWand>, int)>();

  int MogrifyImage(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<Image>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _MogrifyImage(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MogrifyImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<ExceptionInfo>)>>('MogrifyImage');
  late final _MogrifyImage = _MogrifyImagePtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<Image>>,
          ffi.Pointer<ExceptionInfo>)>();

  int MogrifyImageCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _MogrifyImageCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MogrifyImageCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('MogrifyImageCommand');
  late final _MogrifyImageCommand = _MogrifyImageCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  int MogrifyImageInfo(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ExceptionInfo> arg3,
  ) {
    return _MogrifyImageInfo(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _MogrifyImageInfoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('MogrifyImageInfo');
  late final _MogrifyImageInfo = _MogrifyImageInfoPtr.asFunction<
      int Function(ffi.Pointer<ImageInfo>, int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ExceptionInfo>)>();

  int MogrifyImageList(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<Image>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _MogrifyImageList(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MogrifyImageListPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<ExceptionInfo>)>>('MogrifyImageList');
  late final _MogrifyImageList = _MogrifyImageListPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<Image>>,
          ffi.Pointer<ExceptionInfo>)>();

  int MogrifyImages(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    int arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ffi.Pointer<Image>> arg4,
    ffi.Pointer<ExceptionInfo> arg5,
  ) {
    return _MogrifyImages(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
      arg5,
    );
  }

  late final _MogrifyImagesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int32,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<Image>>,
              ffi.Pointer<ExceptionInfo>)>>('MogrifyImages');
  late final _MogrifyImages = _MogrifyImagesPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<Image>>,
          ffi.Pointer<ExceptionInfo>)>();

  int MontageImageCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _MontageImageCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _MontageImageCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('MontageImageCommand');
  late final _MontageImageCommand = _MontageImageCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> PixelGetIteratorException(
    ffi.Pointer<PixelIterator> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    return _PixelGetIteratorException(
      arg0,
      arg1,
    );
  }

  late final _PixelGetIteratorExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<PixelIterator>,
              ffi.Pointer<ffi.Int32>)>>('PixelGetIteratorException');
  late final _PixelGetIteratorException =
      _PixelGetIteratorExceptionPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<PixelIterator>, ffi.Pointer<ffi.Int32>)>();

  int PixelGetIteratorExceptionType(
    ffi.Pointer<PixelIterator> arg0,
  ) {
    return _PixelGetIteratorExceptionType(
      arg0,
    );
  }

  late final _PixelGetIteratorExceptionTypePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PixelIterator>)>>(
      'PixelGetIteratorExceptionType');
  late final _PixelGetIteratorExceptionType = _PixelGetIteratorExceptionTypePtr
      .asFunction<int Function(ffi.Pointer<PixelIterator>)>();

  int IsPixelIterator(
    ffi.Pointer<PixelIterator> arg0,
  ) {
    return _IsPixelIterator(
      arg0,
    );
  }

  late final _IsPixelIteratorPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PixelIterator>)>>(
      'IsPixelIterator');
  late final _IsPixelIterator = _IsPixelIteratorPtr.asFunction<
      int Function(ffi.Pointer<PixelIterator>)>();

  int PixelClearIteratorException(
    ffi.Pointer<PixelIterator> arg0,
  ) {
    return _PixelClearIteratorException(
      arg0,
    );
  }

  late final _PixelClearIteratorExceptionPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PixelIterator>)>>(
      'PixelClearIteratorException');
  late final _PixelClearIteratorException = _PixelClearIteratorExceptionPtr
      .asFunction<int Function(ffi.Pointer<PixelIterator>)>();

  int PixelSetIteratorRow(
    ffi.Pointer<PixelIterator> arg0,
    int arg1,
  ) {
    return _PixelSetIteratorRow(
      arg0,
      arg1,
    );
  }

  late final _PixelSetIteratorRowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<PixelIterator>, ssize_t)>>('PixelSetIteratorRow');
  late final _PixelSetIteratorRow = _PixelSetIteratorRowPtr.asFunction<
      int Function(ffi.Pointer<PixelIterator>, int)>();

  int PixelSyncIterator(
    ffi.Pointer<PixelIterator> arg0,
  ) {
    return _PixelSyncIterator(
      arg0,
    );
  }

  late final _PixelSyncIteratorPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<PixelIterator>)>>(
      'PixelSyncIterator');
  late final _PixelSyncIterator = _PixelSyncIteratorPtr.asFunction<
      int Function(ffi.Pointer<PixelIterator>)>();

  ffi.Pointer<PixelIterator> ClonePixelIterator(
    ffi.Pointer<PixelIterator> arg0,
  ) {
    return _ClonePixelIterator(
      arg0,
    );
  }

  late final _ClonePixelIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PixelIterator> Function(
              ffi.Pointer<PixelIterator>)>>('ClonePixelIterator');
  late final _ClonePixelIterator = _ClonePixelIteratorPtr.asFunction<
      ffi.Pointer<PixelIterator> Function(ffi.Pointer<PixelIterator>)>();

  ffi.Pointer<PixelIterator> DestroyPixelIterator(
    ffi.Pointer<PixelIterator> arg0,
  ) {
    return _DestroyPixelIterator(
      arg0,
    );
  }

  late final _DestroyPixelIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PixelIterator> Function(
              ffi.Pointer<PixelIterator>)>>('DestroyPixelIterator');
  late final _DestroyPixelIterator = _DestroyPixelIteratorPtr.asFunction<
      ffi.Pointer<PixelIterator> Function(ffi.Pointer<PixelIterator>)>();

  ffi.Pointer<PixelIterator> NewPixelIterator(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _NewPixelIterator(
      arg0,
    );
  }

  late final _NewPixelIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PixelIterator> Function(
              ffi.Pointer<MagickWand>)>>('NewPixelIterator');
  late final _NewPixelIterator = _NewPixelIteratorPtr.asFunction<
      ffi.Pointer<PixelIterator> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<PixelIterator> NewPixelRegionIterator(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _NewPixelRegionIterator(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _NewPixelRegionIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<PixelIterator> Function(ffi.Pointer<MagickWand>, ssize_t,
              ssize_t, ffi.Size, ffi.Size)>>('NewPixelRegionIterator');
  late final _NewPixelRegionIterator = _NewPixelRegionIteratorPtr.asFunction<
      ffi.Pointer<PixelIterator> Function(
          ffi.Pointer<MagickWand>, int, int, int, int)>();

  ffi.Pointer<ffi.Pointer<PixelWand>> PixelGetCurrentIteratorRow(
    ffi.Pointer<PixelIterator> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _PixelGetCurrentIteratorRow(
      arg0,
      arg1,
    );
  }

  late final _PixelGetCurrentIteratorRowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<PixelWand>> Function(
              ffi.Pointer<PixelIterator>,
              ffi.Pointer<ffi.Size>)>>('PixelGetCurrentIteratorRow');
  late final _PixelGetCurrentIteratorRow =
      _PixelGetCurrentIteratorRowPtr.asFunction<
          ffi.Pointer<ffi.Pointer<PixelWand>> Function(
              ffi.Pointer<PixelIterator>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Pointer<PixelWand>> PixelGetNextIteratorRow(
    ffi.Pointer<PixelIterator> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _PixelGetNextIteratorRow(
      arg0,
      arg1,
    );
  }

  late final _PixelGetNextIteratorRowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<PixelWand>> Function(
              ffi.Pointer<PixelIterator>,
              ffi.Pointer<ffi.Size>)>>('PixelGetNextIteratorRow');
  late final _PixelGetNextIteratorRow = _PixelGetNextIteratorRowPtr.asFunction<
      ffi.Pointer<ffi.Pointer<PixelWand>> Function(
          ffi.Pointer<PixelIterator>, ffi.Pointer<ffi.Size>)>();

  ffi.Pointer<ffi.Pointer<PixelWand>> PixelGetPreviousIteratorRow(
    ffi.Pointer<PixelIterator> arg0,
    ffi.Pointer<ffi.Size> arg1,
  ) {
    return _PixelGetPreviousIteratorRow(
      arg0,
      arg1,
    );
  }

  late final _PixelGetPreviousIteratorRowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<PixelWand>> Function(
              ffi.Pointer<PixelIterator>,
              ffi.Pointer<ffi.Size>)>>('PixelGetPreviousIteratorRow');
  late final _PixelGetPreviousIteratorRow =
      _PixelGetPreviousIteratorRowPtr.asFunction<
          ffi.Pointer<ffi.Pointer<PixelWand>> Function(
              ffi.Pointer<PixelIterator>, ffi.Pointer<ffi.Size>)>();

  int PixelGetIteratorRow(
    ffi.Pointer<PixelIterator> arg0,
  ) {
    return _PixelGetIteratorRow(
      arg0,
    );
  }

  late final _PixelGetIteratorRowPtr =
      _lookup<ffi.NativeFunction<ssize_t Function(ffi.Pointer<PixelIterator>)>>(
          'PixelGetIteratorRow');
  late final _PixelGetIteratorRow = _PixelGetIteratorRowPtr.asFunction<
      int Function(ffi.Pointer<PixelIterator>)>();

  void ClearPixelIterator(
    ffi.Pointer<PixelIterator> arg0,
  ) {
    return _ClearPixelIterator(
      arg0,
    );
  }

  late final _ClearPixelIteratorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PixelIterator>)>>(
      'ClearPixelIterator');
  late final _ClearPixelIterator = _ClearPixelIteratorPtr.asFunction<
      void Function(ffi.Pointer<PixelIterator>)>();

  void PixelResetIterator(
    ffi.Pointer<PixelIterator> arg0,
  ) {
    return _PixelResetIterator(
      arg0,
    );
  }

  late final _PixelResetIteratorPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PixelIterator>)>>(
      'PixelResetIterator');
  late final _PixelResetIterator = _PixelResetIteratorPtr.asFunction<
      void Function(ffi.Pointer<PixelIterator>)>();

  void PixelSetFirstIteratorRow(
    ffi.Pointer<PixelIterator> arg0,
  ) {
    return _PixelSetFirstIteratorRow(
      arg0,
    );
  }

  late final _PixelSetFirstIteratorRowPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PixelIterator>)>>(
      'PixelSetFirstIteratorRow');
  late final _PixelSetFirstIteratorRow = _PixelSetFirstIteratorRowPtr
      .asFunction<void Function(ffi.Pointer<PixelIterator>)>();

  void PixelSetLastIteratorRow(
    ffi.Pointer<PixelIterator> arg0,
  ) {
    return _PixelSetLastIteratorRow(
      arg0,
    );
  }

  late final _PixelSetLastIteratorRowPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<PixelIterator>)>>(
      'PixelSetLastIteratorRow');
  late final _PixelSetLastIteratorRow = _PixelSetLastIteratorRowPtr.asFunction<
      void Function(ffi.Pointer<PixelIterator>)>();

  int StreamImageCommand(
    ffi.Pointer<ImageInfo> arg0,
    int arg1,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg2,
    ffi.Pointer<ffi.Pointer<ffi.Char>> arg3,
    ffi.Pointer<ExceptionInfo> arg4,
  ) {
    return _StreamImageCommand(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _StreamImageCommandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ImageInfo>,
              ffi.Int,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ExceptionInfo>)>>('StreamImageCommand');
  late final _StreamImageCommand = _StreamImageCommandPtr.asFunction<
      int Function(
          ffi.Pointer<ImageInfo>,
          int,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ExceptionInfo>)>();

  ffi.Pointer<ffi.Char> GetWandViewException(
    ffi.Pointer<WandView> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    return _GetWandViewException(
      arg0,
      arg1,
    );
  }

  late final _GetWandViewExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<WandView>,
              ffi.Pointer<ffi.Int32>)>>('GetWandViewException');
  late final _GetWandViewException = _GetWandViewExceptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<WandView>, ffi.Pointer<ffi.Int32>)>();

  int DuplexTransferWandViewIterator(
    ffi.Pointer<WandView> arg0,
    ffi.Pointer<WandView> arg1,
    ffi.Pointer<WandView> arg2,
    DuplexTransferWandViewMethod arg3,
    ffi.Pointer<ffi.Void> arg4,
  ) {
    return _DuplexTransferWandViewIterator(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _DuplexTransferWandViewIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<WandView>,
              ffi.Pointer<WandView>,
              ffi.Pointer<WandView>,
              DuplexTransferWandViewMethod,
              ffi.Pointer<ffi.Void>)>>('DuplexTransferWandViewIterator');
  late final _DuplexTransferWandViewIterator =
      _DuplexTransferWandViewIteratorPtr.asFunction<
          int Function(
              ffi.Pointer<WandView>,
              ffi.Pointer<WandView>,
              ffi.Pointer<WandView>,
              DuplexTransferWandViewMethod,
              ffi.Pointer<ffi.Void>)>();

  int GetWandViewIterator(
    ffi.Pointer<WandView> arg0,
    GetWandViewMethod arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _GetWandViewIterator(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _GetWandViewIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<WandView>, GetWandViewMethod,
              ffi.Pointer<ffi.Void>)>>('GetWandViewIterator');
  late final _GetWandViewIterator = _GetWandViewIteratorPtr.asFunction<
      int Function(
          ffi.Pointer<WandView>, GetWandViewMethod, ffi.Pointer<ffi.Void>)>();

  int IsWandView(
    ffi.Pointer<WandView> arg0,
  ) {
    return _IsWandView(
      arg0,
    );
  }

  late final _IsWandViewPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<WandView>)>>(
          'IsWandView');
  late final _IsWandView =
      _IsWandViewPtr.asFunction<int Function(ffi.Pointer<WandView>)>();

  int SetWandViewIterator(
    ffi.Pointer<WandView> arg0,
    SetWandViewMethod arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _SetWandViewIterator(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _SetWandViewIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<WandView>, SetWandViewMethod,
              ffi.Pointer<ffi.Void>)>>('SetWandViewIterator');
  late final _SetWandViewIterator = _SetWandViewIteratorPtr.asFunction<
      int Function(
          ffi.Pointer<WandView>, SetWandViewMethod, ffi.Pointer<ffi.Void>)>();

  int TransferWandViewIterator(
    ffi.Pointer<WandView> arg0,
    ffi.Pointer<WandView> arg1,
    TransferWandViewMethod arg2,
    ffi.Pointer<ffi.Void> arg3,
  ) {
    return _TransferWandViewIterator(
      arg0,
      arg1,
      arg2,
      arg3,
    );
  }

  late final _TransferWandViewIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<WandView>,
              ffi.Pointer<WandView>,
              TransferWandViewMethod,
              ffi.Pointer<ffi.Void>)>>('TransferWandViewIterator');
  late final _TransferWandViewIterator =
      _TransferWandViewIteratorPtr.asFunction<
          int Function(ffi.Pointer<WandView>, ffi.Pointer<WandView>,
              TransferWandViewMethod, ffi.Pointer<ffi.Void>)>();

  int UpdateWandViewIterator(
    ffi.Pointer<WandView> arg0,
    UpdateWandViewMethod arg1,
    ffi.Pointer<ffi.Void> arg2,
  ) {
    return _UpdateWandViewIterator(
      arg0,
      arg1,
      arg2,
    );
  }

  late final _UpdateWandViewIteratorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<WandView>, UpdateWandViewMethod,
              ffi.Pointer<ffi.Void>)>>('UpdateWandViewIterator');
  late final _UpdateWandViewIterator = _UpdateWandViewIteratorPtr.asFunction<
      int Function(ffi.Pointer<WandView>, UpdateWandViewMethod,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<MagickWand> GetWandViewWand(
    ffi.Pointer<WandView> arg0,
  ) {
    return _GetWandViewWand(
      arg0,
    );
  }

  late final _GetWandViewWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<WandView>)>>('GetWandViewWand');
  late final _GetWandViewWand = _GetWandViewWandPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<WandView>)>();

  ffi.Pointer<ffi.Pointer<PixelWand>> GetWandViewPixels(
    ffi.Pointer<WandView> arg0,
  ) {
    return _GetWandViewPixels(
      arg0,
    );
  }

  late final _GetWandViewPixelsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<PixelWand>> Function(
              ffi.Pointer<WandView>)>>('GetWandViewPixels');
  late final _GetWandViewPixels = _GetWandViewPixelsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<PixelWand>> Function(ffi.Pointer<WandView>)>();

  RectangleInfo GetWandViewExtent(
    ffi.Pointer<WandView> arg0,
  ) {
    return _GetWandViewExtent(
      arg0,
    );
  }

  late final _GetWandViewExtentPtr = _lookup<
          ffi.NativeFunction<RectangleInfo Function(ffi.Pointer<WandView>)>>(
      'GetWandViewExtent');
  late final _GetWandViewExtent = _GetWandViewExtentPtr.asFunction<
      RectangleInfo Function(ffi.Pointer<WandView>)>();

  void SetWandViewDescription(
    ffi.Pointer<WandView> arg0,
    ffi.Pointer<ffi.Char> arg1,
  ) {
    return _SetWandViewDescription(
      arg0,
      arg1,
    );
  }

  late final _SetWandViewDescriptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<WandView>,
              ffi.Pointer<ffi.Char>)>>('SetWandViewDescription');
  late final _SetWandViewDescription = _SetWandViewDescriptionPtr.asFunction<
      void Function(ffi.Pointer<WandView>, ffi.Pointer<ffi.Char>)>();

  void SetWandViewThreads(
    ffi.Pointer<WandView> arg0,
    int arg1,
  ) {
    return _SetWandViewThreads(
      arg0,
      arg1,
    );
  }

  late final _SetWandViewThreadsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<WandView>, ffi.Size)>>('SetWandViewThreads');
  late final _SetWandViewThreads = _SetWandViewThreadsPtr.asFunction<
      void Function(ffi.Pointer<WandView>, int)>();

  ffi.Pointer<WandView> CloneWandView(
    ffi.Pointer<WandView> arg0,
  ) {
    return _CloneWandView(
      arg0,
    );
  }

  late final _CloneWandViewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WandView> Function(
              ffi.Pointer<WandView>)>>('CloneWandView');
  late final _CloneWandView = _CloneWandViewPtr.asFunction<
      ffi.Pointer<WandView> Function(ffi.Pointer<WandView>)>();

  ffi.Pointer<WandView> DestroyWandView(
    ffi.Pointer<WandView> arg0,
  ) {
    return _DestroyWandView(
      arg0,
    );
  }

  late final _DestroyWandViewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WandView> Function(
              ffi.Pointer<WandView>)>>('DestroyWandView');
  late final _DestroyWandView = _DestroyWandViewPtr.asFunction<
      ffi.Pointer<WandView> Function(ffi.Pointer<WandView>)>();

  ffi.Pointer<WandView> NewWandView(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _NewWandView(
      arg0,
    );
  }

  late final _NewWandViewPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WandView> Function(
              ffi.Pointer<MagickWand>)>>('NewWandView');
  late final _NewWandView = _NewWandViewPtr.asFunction<
      ffi.Pointer<WandView> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<WandView> NewWandViewExtent(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
    int arg2,
    int arg3,
    int arg4,
  ) {
    return _NewWandViewExtent(
      arg0,
      arg1,
      arg2,
      arg3,
      arg4,
    );
  }

  late final _NewWandViewExtentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<WandView> Function(ffi.Pointer<MagickWand>, ssize_t,
              ssize_t, ffi.Size, ffi.Size)>>('NewWandViewExtent');
  late final _NewWandViewExtent = _NewWandViewExtentPtr.asFunction<
      ffi.Pointer<WandView> Function(
          ffi.Pointer<MagickWand>, int, int, int, int)>();

  ffi.Pointer<ffi.Char> MagickGetException(
    ffi.Pointer<MagickWand> arg0,
    ffi.Pointer<ffi.Int32> arg1,
  ) {
    return _MagickGetException(
      arg0,
      arg1,
    );
  }

  late final _MagickGetExceptionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<MagickWand>,
              ffi.Pointer<ffi.Int32>)>>('MagickGetException');
  late final _MagickGetException = _MagickGetExceptionPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<MagickWand>, ffi.Pointer<ffi.Int32>)>();

  int MagickGetExceptionType(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetExceptionType(
      arg0,
    );
  }

  late final _MagickGetExceptionTypePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetExceptionType');
  late final _MagickGetExceptionType = _MagickGetExceptionTypePtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int IsMagickWand(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _IsMagickWand(
      arg0,
    );
  }

  late final _IsMagickWandPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'IsMagickWand');
  late final _IsMagickWand =
      _IsMagickWandPtr.asFunction<int Function(ffi.Pointer<MagickWand>)>();

  int IsMagickWandInstantiated() {
    return _IsMagickWandInstantiated();
  }

  late final _IsMagickWandInstantiatedPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function()>>(
          'IsMagickWandInstantiated');
  late final _IsMagickWandInstantiated =
      _IsMagickWandInstantiatedPtr.asFunction<int Function()>();

  int MagickClearException(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickClearException(
      arg0,
    );
  }

  late final _MagickClearExceptionPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<MagickWand>)>>(
          'MagickClearException');
  late final _MagickClearException = _MagickClearExceptionPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  int MagickSetIteratorIndex(
    ffi.Pointer<MagickWand> arg0,
    int arg1,
  ) {
    return _MagickSetIteratorIndex(
      arg0,
      arg1,
    );
  }

  late final _MagickSetIteratorIndexPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<MagickWand>, ssize_t)>>('MagickSetIteratorIndex');
  late final _MagickSetIteratorIndex = _MagickSetIteratorIndexPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>, int)>();

  ffi.Pointer<MagickWand> CloneMagickWand(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _CloneMagickWand(
      arg0,
    );
  }

  late final _CloneMagickWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>)>>('CloneMagickWand');
  late final _CloneMagickWand = _CloneMagickWandPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<MagickWand> DestroyMagickWand(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _DestroyMagickWand(
      arg0,
    );
  }

  late final _DestroyMagickWandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<MagickWand>)>>('DestroyMagickWand');
  late final _DestroyMagickWand = _DestroyMagickWandPtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<MagickWand>)>();

  ffi.Pointer<MagickWand> NewMagickWand() {
    return _NewMagickWand();
  }

  late final _NewMagickWandPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<MagickWand> Function()>>(
          'NewMagickWand');
  late final _NewMagickWand =
      _NewMagickWandPtr.asFunction<ffi.Pointer<MagickWand> Function()>();

  ffi.Pointer<MagickWand> NewMagickWandFromImage(
    ffi.Pointer<Image> arg0,
  ) {
    return _NewMagickWandFromImage(
      arg0,
    );
  }

  late final _NewMagickWandFromImagePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<MagickWand> Function(
              ffi.Pointer<Image>)>>('NewMagickWandFromImage');
  late final _NewMagickWandFromImage = _NewMagickWandFromImagePtr.asFunction<
      ffi.Pointer<MagickWand> Function(ffi.Pointer<Image>)>();

  int MagickGetIteratorIndex(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickGetIteratorIndex(
      arg0,
    );
  }

  late final _MagickGetIteratorIndexPtr =
      _lookup<ffi.NativeFunction<ssize_t Function(ffi.Pointer<MagickWand>)>>(
          'MagickGetIteratorIndex');
  late final _MagickGetIteratorIndex = _MagickGetIteratorIndexPtr.asFunction<
      int Function(ffi.Pointer<MagickWand>)>();

  void ClearMagickWand(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _ClearMagickWand(
      arg0,
    );
  }

  late final _ClearMagickWandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MagickWand>)>>(
          'ClearMagickWand');
  late final _ClearMagickWand =
      _ClearMagickWandPtr.asFunction<void Function(ffi.Pointer<MagickWand>)>();

  void MagickWandGenesis() {
    return _MagickWandGenesis();
  }

  late final _MagickWandGenesisPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('MagickWandGenesis');
  late final _MagickWandGenesis =
      _MagickWandGenesisPtr.asFunction<void Function()>();

  void MagickWandTerminus() {
    return _MagickWandTerminus();
  }

  late final _MagickWandTerminusPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('MagickWandTerminus');
  late final _MagickWandTerminus =
      _MagickWandTerminusPtr.asFunction<void Function()>();

  ffi.Pointer<ffi.Void> MagickRelinquishMemory(
    ffi.Pointer<ffi.Void> arg0,
  ) {
    return _MagickRelinquishMemory(
      arg0,
    );
  }

  late final _MagickRelinquishMemoryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>)>>('MagickRelinquishMemory');
  late final _MagickRelinquishMemory = _MagickRelinquishMemoryPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>)>();

  void MagickResetIterator(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickResetIterator(
      arg0,
    );
  }

  late final _MagickResetIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MagickWand>)>>(
          'MagickResetIterator');
  late final _MagickResetIterator = _MagickResetIteratorPtr.asFunction<
      void Function(ffi.Pointer<MagickWand>)>();

  void MagickSetFirstIterator(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickSetFirstIterator(
      arg0,
    );
  }

  late final _MagickSetFirstIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MagickWand>)>>(
          'MagickSetFirstIterator');
  late final _MagickSetFirstIterator = _MagickSetFirstIteratorPtr.asFunction<
      void Function(ffi.Pointer<MagickWand>)>();

  void MagickSetLastIterator(
    ffi.Pointer<MagickWand> arg0,
  ) {
    return _MagickSetLastIterator(
      arg0,
    );
  }

  late final _MagickSetLastIteratorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<MagickWand>)>>(
          'MagickSetLastIterator');
  late final _MagickSetLastIterator = _MagickSetLastIteratorPtr.asFunction<
      void Function(ffi.Pointer<MagickWand>)>();
}

typedef va_list = ffi.Pointer<ffi.Char>;
typedef uintptr_t = ffi.UnsignedLongLong;

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

class _iobuf extends ffi.Struct {
  external ffi.Pointer<ffi.Void> _Placeholder;
}

typedef FILE = _iobuf;
typedef wint_t = ffi.UnsignedShort;
typedef errno_t = ffi.Int;
typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;
typedef rsize_t = ffi.Size;
typedef fpos_t = ffi.LongLong;
typedef _CoreCrtSecureSearchSortCompareFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;
typedef _CoreCrtNonSecureSearchSortCompareFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef _onexit_t = ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>;
typedef _purecall_handler
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef _invalid_parameter_handler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
            ffi.Pointer<ffi.WChar>, ffi.UnsignedInt, uintptr_t)>>;

class _div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

class _ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

class _lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef div_t = _div_t;
typedef ldiv_t = _ldiv_t;
typedef lldiv_t = _lldiv_t;

class _LDOUBLE extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<ffi.UnsignedChar> ld;
}

class _CRT_DOUBLE extends ffi.Struct {
  @ffi.Double()
  external double x;
}

class _CRT_FLOAT extends ffi.Struct {
  @ffi.Float()
  external double f;
}

class _LONGDOUBLE extends ffi.Opaque {}

class _LDBL12 extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.UnsignedChar> ld12;
}

class _exception extends ffi.Struct {
  @ffi.Int()
  external int type;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Double()
  external double arg1;

  @ffi.Double()
  external double arg2;

  @ffi.Double()
  external double retval;
}

class _complex extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

class _double_val extends ffi.Union {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.UnsignedShort> _Sh;

  @ffi.Double()
  external double _Val;
}

class _float_val extends ffi.Union {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.UnsignedShort> _Sh;

  @ffi.Float()
  external double _Val;
}

class _ldouble_val extends ffi.Opaque {}

class _float_const extends ffi.Opaque {}

class tm extends ffi.Struct {
  @ffi.Int()
  external int tm_sec;

  @ffi.Int()
  external int tm_min;

  @ffi.Int()
  external int tm_hour;

  @ffi.Int()
  external int tm_mday;

  @ffi.Int()
  external int tm_mon;

  @ffi.Int()
  external int tm_year;

  @ffi.Int()
  external int tm_wday;

  @ffi.Int()
  external int tm_yday;

  @ffi.Int()
  external int tm_isdst;
}

typedef __time32_t = ffi.Long;
typedef __time64_t = ffi.LongLong;

class _timespec32 extends ffi.Struct {
  @__time32_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

class _timespec64 extends ffi.Struct {
  @__time64_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

class timespec extends ffi.Struct {
  @time_t()
  external int tv_sec;

  @ffi.Long()
  external int tv_nsec;
}

typedef time_t = __time64_t;
typedef clock_t = ffi.Long;

class _MagickWand extends ffi.Opaque {}

abstract class ClassType {
  static const int UndefinedClass = 0;
  static const int DirectClass = 1;
  static const int PseudoClass = 2;
}

abstract class MagickBooleanType {
  static const int MagickFalse = 0;
  static const int MagickTrue = 1;
}

class _BlobInfo extends ffi.Opaque {}

class _ExceptionInfo extends ffi.Struct {
  @ffi.Int32()
  external int severity;

  @ffi.Int()
  external int error_number;

  external ffi.Pointer<ffi.Char> reason;

  external ffi.Pointer<ffi.Char> description;

  external ffi.Pointer<ffi.Void> exceptions;

  @ffi.Int32()
  external int relinquish;

  external ffi.Pointer<SemaphoreInfo> semaphore;

  @ffi.Size()
  external int signature;
}

abstract class ExceptionType {
  static const int UndefinedException = 0;
  static const int WarningException = 300;
  static const int ResourceLimitWarning = 300;
  static const int TypeWarning = 305;
  static const int OptionWarning = 310;
  static const int DelegateWarning = 315;
  static const int MissingDelegateWarning = 320;
  static const int CorruptImageWarning = 325;
  static const int FileOpenWarning = 330;
  static const int BlobWarning = 335;
  static const int StreamWarning = 340;
  static const int CacheWarning = 345;
  static const int CoderWarning = 350;
  static const int FilterWarning = 352;
  static const int ModuleWarning = 355;
  static const int DrawWarning = 360;
  static const int ImageWarning = 365;
  static const int WandWarning = 370;
  static const int RandomWarning = 375;
  static const int XServerWarning = 380;
  static const int MonitorWarning = 385;
  static const int RegistryWarning = 390;
  static const int ConfigureWarning = 395;
  static const int PolicyWarning = 399;
  static const int ErrorException = 400;
  static const int ResourceLimitError = 400;
  static const int TypeError = 405;
  static const int OptionError = 410;
  static const int DelegateError = 415;
  static const int MissingDelegateError = 420;
  static const int CorruptImageError = 425;
  static const int FileOpenError = 430;
  static const int BlobError = 435;
  static const int StreamError = 440;
  static const int CacheError = 445;
  static const int CoderError = 450;
  static const int FilterError = 452;
  static const int ModuleError = 455;
  static const int DrawError = 460;
  static const int ImageError = 465;
  static const int WandError = 470;
  static const int RandomError = 475;
  static const int XServerError = 480;
  static const int MonitorError = 485;
  static const int RegistryError = 490;
  static const int ConfigureError = 495;
  static const int PolicyError = 499;
  static const int FatalErrorException = 700;
  static const int ResourceLimitFatalError = 700;
  static const int TypeFatalError = 705;
  static const int OptionFatalError = 710;
  static const int DelegateFatalError = 715;
  static const int MissingDelegateFatalError = 720;
  static const int CorruptImageFatalError = 725;
  static const int FileOpenFatalError = 730;
  static const int BlobFatalError = 735;
  static const int StreamFatalError = 740;
  static const int CacheFatalError = 745;
  static const int CoderFatalError = 750;
  static const int FilterFatalError = 752;
  static const int ModuleFatalError = 755;
  static const int DrawFatalError = 760;
  static const int ImageFatalError = 765;
  static const int WandFatalError = 770;
  static const int RandomFatalError = 775;
  static const int XServerFatalError = 780;
  static const int MonitorFatalError = 785;
  static const int RegistryFatalError = 790;
  static const int ConfigureFatalError = 795;
  static const int PolicyFatalError = 799;
}

class SemaphoreInfo extends ffi.Opaque {}

class _Image extends ffi.Struct {
  @ffi.Int32()
  external int storage_class;

  /// colorspace of image data
  @ffi.Int32()
  external int colorspace;

  /// compression of image when read/write
  @ffi.Int32()
  external int compression;

  /// compression quality setting, meaning varies
  @ffi.Size()
  external int quality;

  /// photo orientation of image
  @ffi.Int32()
  external int orientation;

  /// has image been modified since reading
  @ffi.Int32()
  external int taint;

  /// physical size of image
  @ffi.Size()
  external int columns;

  @ffi.Size()
  external int rows;

  /// depth of image on read/write
  @ffi.Size()
  external int depth;

  /// Size of color table, or actual color count */
  /// /* Only valid if image is not DirectClass
  @ffi.Size()
  external int colors;

  external ffi.Pointer<PixelInfo> colormap;

  /// deprecated
  external PixelInfo alpha_color;

  /// current background color attribute
  external PixelInfo background_color;

  /// current bordercolor attribute
  external PixelInfo border_color;

  /// color for 'transparent' color index in GIF
  external PixelInfo transparent_color;

  @ffi.Double()
  external double gamma;

  external ChromaticityInfo chromaticity;

  @ffi.Int32()
  external int rendering_intent;

  external ffi.Pointer<ffi.Void> profiles;

  /// resolution/density  ppi or ppc
  @ffi.Int32()
  external int units;

  external ffi.Pointer<ffi.Char> montage;

  external ffi.Pointer<ffi.Char> directory;

  external ffi.Pointer<ffi.Char> geometry;

  /// ???
  @ssize_t()
  external int offset;

  /// image resolution/density
  external PointInfo resolution;

  /// virtual canvas size and offset of image
  external RectangleInfo page;

  external RectangleInfo extract_info;

  /// current color fuzz attribute - move to image_info
  @ffi.Double()
  external double fuzz;

  /// resize/distort filter to apply
  @ffi.Int32()
  external int filter;

  /// method to generate an intensity value from a pixel
  @ffi.Int32()
  external int intensity;

  @ffi.Int32()
  external int interlace;

  /// raw data integer ordering on read/write
  @ffi.Int32()
  external int endian;

  /// Gravity attribute for positioning in image
  @ffi.Int32()
  external int gravity;

  /// alpha composition method for layered images
  @ffi.Int32()
  external int compose;

  /// GIF animation disposal method
  @ffi.Int32()
  external int dispose;

  /// index of image in multi-image file
  @ffi.Size()
  external int scene;

  /// Animation delay time
  @ffi.Size()
  external int delay;

  /// Total animation duration sum(delay*iterations)
  @ffi.Size()
  external int duration;

  /// units for delay time, default 100 for GIF
  @ssize_t()
  external int ticks_per_second;

  /// number of interations for GIF animations
  @ffi.Size()
  external int iterations;

  @ffi.Size()
  external int total_colors;

  /// ???
  @ssize_t()
  external int start_loop;

  /// Interpolation of color for between pixel lookups
  @ffi.Int32()
  external int interpolate;

  @ffi.Int32()
  external int black_point_compensation;

  external RectangleInfo tile_offset;

  @ffi.Int32()
  external int type;

  /// dithering on/off
  @ffi.Int32()
  external int dither;

  /// Size of image read from disk
  @MagickSizeType()
  external int extent;

  /// no image data read, just attributes
  @ffi.Int32()
  external int ping;

  @ffi.Int32()
  external int read_mask;

  @ffi.Int32()
  external int write_mask;

  /// is transparency channel defined and active
  @ffi.Int32()
  external int alpha_trait;

  @ffi.Size()
  external int number_channels;

  @ffi.Size()
  external int number_meta_channels;

  @ffi.Size()
  external int metacontent_extent;

  @ffi.Int32()
  external int channel_mask;

  external ffi.Pointer<PixelChannelMap> channel_map;

  external ffi.Pointer<ffi.Void> cache;

  external ErrorInfo error;

  external TimerInfo timer;

  external MagickProgressMonitor progress_monitor;

  external ffi.Pointer<ffi.Void> client_data;

  external ffi.Pointer<Ascii85Info> ascii85;

  external ffi.Pointer<ProfileInfo> generic_profile;

  /// general settings, to save with image
  external ffi.Pointer<ffi.Void> properties;

  /// general operational/coder settings, not saved
  external ffi.Pointer<ffi.Void> artifacts;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Char> filename;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Char> magick_filename;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Char> magick;

  /// size of image when read/created
  @ffi.Size()
  external int magick_columns;

  @ffi.Size()
  external int magick_rows;

  /// image file as in-memory string of 'extent'
  external ffi.Pointer<BlobInfo> blob;

  @time_t()
  external int timestamp;

  /// debug output attribute
  @ffi.Int32()
  external int debug;

  /// image data sharing memory management
  @ssize_t()
  external int reference_count;

  external ffi.Pointer<SemaphoreInfo> semaphore;

  /// (Optional) Image belongs to this ImageInfo 'list'
  /// For access to 'global options' when no per-image
  /// attribute, properity, or artifact has been set.
  external ffi.Pointer<_ImageInfo> image_info;

  /// Undo/Redo image processing list (for display)
  external ffi.Pointer<_Image> list;

  /// Image list links
  external ffi.Pointer<_Image> previous;

  external ffi.Pointer<_Image> next;

  @ffi.Size()
  external int signature;

  /// current mattecolor attribute
  external PixelInfo matte_color;

  @ffi.Int32()
  external int composite_mask;

  /// apply the clip or composite mask
  @ffi.Int32()
  external int mask_trait;

  @ffi.Int32()
  external int channels;
}

abstract class ColorspaceType {
  static const int UndefinedColorspace = 0;

  /// negated linear RGB colorspace
  static const int CMYColorspace = 1;

  /// CMY with Black separation
  static const int CMYKColorspace = 2;

  /// Single Channel greyscale (non-linear) image
  static const int GRAYColorspace = 3;
  static const int HCLColorspace = 4;
  static const int HCLpColorspace = 5;
  static const int HSBColorspace = 6;
  static const int HSIColorspace = 7;
  static const int HSLColorspace = 8;

  /// alias for HSB
  static const int HSVColorspace = 9;
  static const int HWBColorspace = 10;
  static const int LabColorspace = 11;

  /// alias for LCHuv
  static const int LCHColorspace = 12;

  /// Cylindrical (Polar) Lab
  static const int LCHabColorspace = 13;

  /// Cylindrical (Polar) Luv
  static const int LCHuvColorspace = 14;
  static const int LogColorspace = 15;
  static const int LMSColorspace = 16;
  static const int LuvColorspace = 17;
  static const int OHTAColorspace = 18;
  static const int Rec601YCbCrColorspace = 19;
  static const int Rec709YCbCrColorspace = 20;

  /// Linear RGB colorspace
  static const int RGBColorspace = 21;

  /// ???
  static const int scRGBColorspace = 22;

  /// Default: non-linear sRGB colorspace
  static const int sRGBColorspace = 23;
  static const int TransparentColorspace = 24;
  static const int xyYColorspace = 25;

  /// IEEE Color Reference colorspace
  static const int XYZColorspace = 26;
  static const int YCbCrColorspace = 27;
  static const int YCCColorspace = 28;
  static const int YDbDrColorspace = 29;
  static const int YIQColorspace = 30;
  static const int YPbPrColorspace = 31;
  static const int YUVColorspace = 32;

  /// Single Channel greyscale (linear) image
  static const int LinearGRAYColorspace = 33;
  static const int JzazbzColorspace = 34;
  static const int DisplayP3Colorspace = 35;
  static const int Adobe98Colorspace = 36;
  static const int ProPhotoColorspace = 37;
}

abstract class CompressionType {
  static const int UndefinedCompression = 0;
  static const int B44ACompression = 1;
  static const int B44Compression = 2;
  static const int BZipCompression = 3;
  static const int DXT1Compression = 4;
  static const int DXT3Compression = 5;
  static const int DXT5Compression = 6;
  static const int FaxCompression = 7;
  static const int Group4Compression = 8;

  /// ISO/IEC std 11544 / ITU-T rec T.82
  static const int JBIG1Compression = 9;

  /// ISO/IEC std 14492 / ITU-T rec T.88
  static const int JBIG2Compression = 10;

  /// ISO/IEC std 15444-1
  static const int JPEG2000Compression = 11;
  static const int JPEGCompression = 12;
  static const int LosslessJPEGCompression = 13;

  /// Lempel-Ziv-Markov chain algorithm
  static const int LZMACompression = 14;
  static const int LZWCompression = 15;
  static const int NoCompression = 16;
  static const int PizCompression = 17;
  static const int Pxr24Compression = 18;
  static const int RLECompression = 19;
  static const int ZipCompression = 20;
  static const int ZipSCompression = 21;
  static const int ZstdCompression = 22;
  static const int WebPCompression = 23;
  static const int DWAACompression = 24;
  static const int DWABCompression = 25;
  static const int BC7Compression = 26;
}

abstract class OrientationType {
  static const int UndefinedOrientation = 0;
  static const int TopLeftOrientation = 1;
  static const int TopRightOrientation = 2;
  static const int BottomRightOrientation = 3;
  static const int BottomLeftOrientation = 4;
  static const int LeftTopOrientation = 5;
  static const int RightTopOrientation = 6;
  static const int RightBottomOrientation = 7;
  static const int LeftBottomOrientation = 8;
}

typedef PixelInfo = _PixelInfo;

class _PixelInfo extends ffi.Struct {
  @ffi.Int32()
  external int storage_class;

  @ffi.Int32()
  external int colorspace;

  @ffi.Int32()
  external int alpha_trait;

  @ffi.Double()
  external double fuzz;

  @ffi.Size()
  external int depth;

  @MagickSizeType()
  external int count;

  @MagickRealType()
  external double red;

  @MagickRealType()
  external double green;

  @MagickRealType()
  external double blue;

  @MagickRealType()
  external double black;

  @MagickRealType()
  external double alpha;

  @MagickRealType()
  external double index;
}

abstract class PixelTrait {
  static const int UndefinedPixelTrait = 0;
  static const int CopyPixelTrait = 1;
  static const int UpdatePixelTrait = 2;
  static const int BlendPixelTrait = 4;
}

typedef MagickSizeType = ffi.Size;

/// Typedef declarations.
typedef MagickRealType = MagickDoubleType;
typedef MagickDoubleType = ffi.Double;
typedef ChromaticityInfo = _ChromaticityInfo;

class _ChromaticityInfo extends ffi.Struct {
  external PrimaryInfo red_primary;

  external PrimaryInfo green_primary;

  external PrimaryInfo blue_primary;

  external PrimaryInfo white_point;
}

typedef PrimaryInfo = _PrimaryInfo;

class _PrimaryInfo extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;

  @ffi.Double()
  external double z;
}

abstract class RenderingIntent {
  static const int UndefinedIntent = 0;
  static const int SaturationIntent = 1;
  static const int PerceptualIntent = 2;
  static const int AbsoluteIntent = 3;
  static const int RelativeIntent = 4;
}

abstract class ResolutionType {
  static const int UndefinedResolution = 0;
  static const int PixelsPerInchResolution = 1;
  static const int PixelsPerCentimeterResolution = 2;
}

typedef ssize_t = ffi.LongLong;
typedef PointInfo = _PointInfo;

class _PointInfo extends ffi.Struct {
  @ffi.Double()
  external double x;

  @ffi.Double()
  external double y;
}

typedef RectangleInfo = _RectangleInfo;

class _RectangleInfo extends ffi.Struct {
  @ffi.Size()
  external int width;

  @ffi.Size()
  external int height;

  @ssize_t()
  external int x;

  @ssize_t()
  external int y;
}

/// WARNING:  The order of this table must also match the order of a table
/// located in AcquireResizeFilter() in "resize.c" otherwise the users filter
/// will not match the actual filter that is setup.
abstract class FilterType {
  static const int UndefinedFilter = 0;
  static const int PointFilter = 1;
  static const int BoxFilter = 2;
  static const int TriangleFilter = 3;
  static const int HermiteFilter = 4;
  static const int HannFilter = 5;
  static const int HammingFilter = 6;
  static const int BlackmanFilter = 7;
  static const int GaussianFilter = 8;
  static const int QuadraticFilter = 9;
  static const int CubicFilter = 10;
  static const int CatromFilter = 11;
  static const int MitchellFilter = 12;
  static const int JincFilter = 13;
  static const int SincFilter = 14;
  static const int SincFastFilter = 15;
  static const int KaiserFilter = 16;
  static const int WelchFilter = 17;
  static const int ParzenFilter = 18;
  static const int BohmanFilter = 19;
  static const int BartlettFilter = 20;
  static const int LagrangeFilter = 21;
  static const int LanczosFilter = 22;
  static const int LanczosSharpFilter = 23;
  static const int Lanczos2Filter = 24;
  static const int Lanczos2SharpFilter = 25;
  static const int RobidouxFilter = 26;
  static const int RobidouxSharpFilter = 27;
  static const int CosineFilter = 28;
  static const int SplineFilter = 29;
  static const int LanczosRadiusFilter = 30;
  static const int CubicSplineFilter = 31;

  /// a count of all the filters, not a real filter
  static const int SentinelFilter = 32;
}

abstract class PixelIntensityMethod {
  static const int UndefinedPixelIntensityMethod = 0;
  static const int AveragePixelIntensityMethod = 1;
  static const int BrightnessPixelIntensityMethod = 2;
  static const int LightnessPixelIntensityMethod = 3;
  static const int MSPixelIntensityMethod = 4;
  static const int Rec601LumaPixelIntensityMethod = 5;
  static const int Rec601LuminancePixelIntensityMethod = 6;
  static const int Rec709LumaPixelIntensityMethod = 7;
  static const int Rec709LuminancePixelIntensityMethod = 8;
  static const int RMSPixelIntensityMethod = 9;
}

abstract class InterlaceType {
  static const int UndefinedInterlace = 0;
  static const int NoInterlace = 1;
  static const int LineInterlace = 2;
  static const int PlaneInterlace = 3;
  static const int PartitionInterlace = 4;
  static const int GIFInterlace = 5;
  static const int JPEGInterlace = 6;
  static const int PNGInterlace = 7;
}

abstract class EndianType {
  static const int UndefinedEndian = 0;
  static const int LSBEndian = 1;
  static const int MSBEndian = 2;
}

abstract class GravityType {
  static const int UndefinedGravity = 0;
  static const int ForgetGravity = 0;
  static const int NorthWestGravity = 1;
  static const int NorthGravity = 2;
  static const int NorthEastGravity = 3;
  static const int WestGravity = 4;
  static const int CenterGravity = 5;
  static const int EastGravity = 6;
  static const int SouthWestGravity = 7;
  static const int SouthGravity = 8;
  static const int SouthEastGravity = 9;
}

abstract class CompositeOperator {
  static const int UndefinedCompositeOp = 0;
  static const int AlphaCompositeOp = 1;
  static const int AtopCompositeOp = 2;
  static const int BlendCompositeOp = 3;
  static const int BlurCompositeOp = 4;
  static const int BumpmapCompositeOp = 5;
  static const int ChangeMaskCompositeOp = 6;
  static const int ClearCompositeOp = 7;
  static const int ColorBurnCompositeOp = 8;
  static const int ColorDodgeCompositeOp = 9;
  static const int ColorizeCompositeOp = 10;
  static const int CopyBlackCompositeOp = 11;
  static const int CopyBlueCompositeOp = 12;
  static const int CopyCompositeOp = 13;
  static const int CopyCyanCompositeOp = 14;
  static const int CopyGreenCompositeOp = 15;
  static const int CopyMagentaCompositeOp = 16;
  static const int CopyAlphaCompositeOp = 17;
  static const int CopyRedCompositeOp = 18;
  static const int CopyYellowCompositeOp = 19;
  static const int DarkenCompositeOp = 20;
  static const int DarkenIntensityCompositeOp = 21;
  static const int DifferenceCompositeOp = 22;
  static const int DisplaceCompositeOp = 23;
  static const int DissolveCompositeOp = 24;
  static const int DistortCompositeOp = 25;
  static const int DivideDstCompositeOp = 26;
  static const int DivideSrcCompositeOp = 27;
  static const int DstAtopCompositeOp = 28;
  static const int DstCompositeOp = 29;
  static const int DstInCompositeOp = 30;
  static const int DstOutCompositeOp = 31;
  static const int DstOverCompositeOp = 32;
  static const int ExclusionCompositeOp = 33;
  static const int HardLightCompositeOp = 34;
  static const int HardMixCompositeOp = 35;
  static const int HueCompositeOp = 36;
  static const int InCompositeOp = 37;
  static const int IntensityCompositeOp = 38;
  static const int LightenCompositeOp = 39;
  static const int LightenIntensityCompositeOp = 40;
  static const int LinearBurnCompositeOp = 41;
  static const int LinearDodgeCompositeOp = 42;
  static const int LinearLightCompositeOp = 43;
  static const int LuminizeCompositeOp = 44;
  static const int MathematicsCompositeOp = 45;
  static const int MinusDstCompositeOp = 46;
  static const int MinusSrcCompositeOp = 47;
  static const int ModulateCompositeOp = 48;
  static const int ModulusAddCompositeOp = 49;
  static const int ModulusSubtractCompositeOp = 50;
  static const int MultiplyCompositeOp = 51;
  static const int NoCompositeOp = 52;
  static const int OutCompositeOp = 53;
  static const int OverCompositeOp = 54;
  static const int OverlayCompositeOp = 55;
  static const int PegtopLightCompositeOp = 56;
  static const int PinLightCompositeOp = 57;
  static const int PlusCompositeOp = 58;
  static const int ReplaceCompositeOp = 59;
  static const int SaturateCompositeOp = 60;
  static const int ScreenCompositeOp = 61;
  static const int SoftLightCompositeOp = 62;
  static const int SrcAtopCompositeOp = 63;
  static const int SrcCompositeOp = 64;
  static const int SrcInCompositeOp = 65;
  static const int SrcOutCompositeOp = 66;
  static const int SrcOverCompositeOp = 67;
  static const int ThresholdCompositeOp = 68;
  static const int VividLightCompositeOp = 69;
  static const int XorCompositeOp = 70;
  static const int StereoCompositeOp = 71;
  static const int FreezeCompositeOp = 72;
  static const int InterpolateCompositeOp = 73;
  static const int NegateCompositeOp = 74;
  static const int ReflectCompositeOp = 75;
  static const int SoftBurnCompositeOp = 76;
  static const int SoftDodgeCompositeOp = 77;
  static const int StampCompositeOp = 78;
  static const int RMSECompositeOp = 79;
  static const int SaliencyBlendCompositeOp = 80;
  static const int SeamlessBlendCompositeOp = 81;
}

abstract class DisposeType {
  static const int UnrecognizedDispose = 0;
  static const int UndefinedDispose = 0;
  static const int NoneDispose = 1;
  static const int BackgroundDispose = 2;
  static const int PreviousDispose = 3;
}

abstract class PixelInterpolateMethod {
  static const int UndefinedInterpolatePixel = 0;

  /// Average 4 nearest neighbours
  static const int AverageInterpolatePixel = 1;

  /// Average 9 nearest neighbours
  static const int Average9InterpolatePixel = 2;

  /// Average 16 nearest neighbours
  static const int Average16InterpolatePixel = 3;

  /// Just return background color
  static const int BackgroundInterpolatePixel = 4;

  /// Triangular filter interpolation
  static const int BilinearInterpolatePixel = 5;

  /// blend of nearest 1, 2 or 4 pixels
  static const int BlendInterpolatePixel = 6;

  /// Catmull-Rom interpolation
  static const int CatromInterpolatePixel = 7;

  /// Integer (floor) interpolation
  static const int IntegerInterpolatePixel = 8;

  /// Triangular Mesh interpolation
  static const int MeshInterpolatePixel = 9;

  /// Nearest Neighbour Only
  static const int NearestInterpolatePixel = 10;

  /// Cubic Spline (blurred) interpolation
  static const int SplineInterpolatePixel = 11;
}

abstract class ImageType {
  static const int UndefinedType = 0;
  static const int BilevelType = 1;
  static const int GrayscaleType = 2;
  static const int GrayscaleAlphaType = 3;
  static const int PaletteType = 4;
  static const int PaletteAlphaType = 5;
  static const int TrueColorType = 6;
  static const int TrueColorAlphaType = 7;
  static const int ColorSeparationType = 8;
  static const int ColorSeparationAlphaType = 9;
  static const int OptimizeType = 10;
  static const int PaletteBilevelAlphaType = 11;
}

/// Pixel enum declarations.
abstract class ChannelType {
  static const int UndefinedChannel = 0;
  static const int RedChannel = 1;
  static const int GrayChannel = 1;
  static const int CyanChannel = 1;
  static const int LChannel = 1;
  static const int GreenChannel = 2;
  static const int MagentaChannel = 2;
  static const int aChannel = 2;
  static const int BlueChannel = 4;
  static const int bChannel = 2;
  static const int YellowChannel = 4;
  static const int BlackChannel = 8;
  static const int AlphaChannel = 16;
  static const int OpacityChannel = 16;

  /// Color Index Table?
  static const int IndexChannel = 32;

  /// Pixel is Not Readable?
  static const int ReadMaskChannel = 64;

  /// Pixel is Write Protected?
  static const int WriteMaskChannel = 128;

  /// not used
  static const int MetaChannel = 256;

  /// SVG mask
  static const int CompositeMaskChannel = 512;
  static const int CompositeChannels = 31;
  static const int AllChannels = 134217727;

  /// extract actual alpha channel from opacity
  static const int TrueAlphaChannel = 256;

  /// set alpha from grayscale mask in RGB
  static const int RGBChannels = 512;
  static const int GrayChannels = 1024;

  /// channels modified as a single unit
  static const int SyncChannels = 131072;
  static const int DefaultChannels = 134217727;
}

/// Pixel typedef declarations.
typedef PixelChannelMap = _PixelChannelMap;

/// Pixel typedef declarations.
class _PixelChannelMap extends ffi.Struct {
  @ffi.Int32()
  external int channel;

  @ffi.Int32()
  external int traits;

  @ssize_t()
  external int offset;
}

abstract class PixelChannel {
  static const int UndefinedPixelChannel = 0;
  static const int RedPixelChannel = 0;
  static const int CyanPixelChannel = 0;
  static const int GrayPixelChannel = 0;
  static const int LPixelChannel = 0;
  static const int LabelPixelChannel = 0;
  static const int YPixelChannel = 0;
  static const int aPixelChannel = 1;
  static const int GreenPixelChannel = 1;
  static const int MagentaPixelChannel = 1;
  static const int CbPixelChannel = 1;
  static const int bPixelChannel = 2;
  static const int BluePixelChannel = 2;
  static const int YellowPixelChannel = 2;
  static const int CrPixelChannel = 2;
  static const int BlackPixelChannel = 3;
  static const int AlphaPixelChannel = 4;
  static const int IndexPixelChannel = 5;
  static const int ReadMaskPixelChannel = 6;
  static const int WriteMaskPixelChannel = 7;
  static const int MetaPixelChannel = 8;
  static const int CompositeMaskPixelChannel = 9;
  static const int MetaPixelChannels = 10;

  /// ????
  static const int IntensityPixelChannel = 64;

  /// ????
  static const int CompositePixelChannel = 64;

  /// not a real channel
  static const int SyncPixelChannel = 65;
}

typedef ErrorInfo = _ErrorInfo;

class _ErrorInfo extends ffi.Struct {
  @ffi.Double()
  external double mean_error_per_pixel;

  @ffi.Double()
  external double normalized_mean_error;

  @ffi.Double()
  external double normalized_maximum_error;
}

typedef TimerInfo = _TimerInfo;

class _TimerInfo extends ffi.Struct {
  external Timer user;

  external Timer elapsed;

  @ffi.Int32()
  external int state;

  @ffi.Size()
  external int signature;
}

typedef Timer = _Timer;

class _Timer extends ffi.Struct {
  @ffi.Double()
  external double start;

  @ffi.Double()
  external double stop;

  @ffi.Double()
  external double total;
}

abstract class TimerState {
  static const int UndefinedTimerState = 0;
  static const int StoppedTimerState = 1;
  static const int RunningTimerState = 2;
}

typedef MagickProgressMonitor = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ffi.Char>, MagickOffsetType,
            MagickSizeType, ffi.Pointer<ffi.Void>)>>;
typedef MagickOffsetType = ssize_t;
typedef Ascii85Info = _Ascii85Info;

class _Ascii85Info extends ffi.Opaque {}

typedef ProfileInfo = _ProfileInfo;

class _ProfileInfo extends ffi.Opaque {}

typedef BlobInfo = _BlobInfo;

/// ImageInfo structure:
/// Stores an image list, as well as all global settings used by all images
/// held, -- unless overridden for that specific image.  See SyncImagesettings()
/// which maps any global setting that always overrides specific image settings.
class _ImageInfo extends ffi.Struct {
  /// compression method when reading/saving image
  @ffi.Int32()
  external int compression;

  /// orientation setting
  @ffi.Int32()
  external int orientation;

  /// image file to be deleted after read "empemeral:"
  @ffi.Int32()
  external int temporary;

  /// save images to separate scene files
  @ffi.Int32()
  external int adjoin;

  @ffi.Int32()
  external int affirm;

  @ffi.Int32()
  external int antialias;

  /// image generation size
  external ffi.Pointer<ffi.Char> size;

  /// crop/resize string on image read
  external ffi.Pointer<ffi.Char> extract;

  external ffi.Pointer<ffi.Char> page;

  /// scene numbers that is to be read in
  external ffi.Pointer<ffi.Char> scenes;

  /// starting value for image save numbering
  @ffi.Size()
  external int scene;

  /// total number of images in list - for escapes
  @ffi.Size()
  external int number_scenes;

  /// current read/save depth of images
  @ffi.Size()
  external int depth;

  /// interlace for image write
  @ffi.Int32()
  external int interlace;

  /// integer endian order for raw image data
  @ffi.Int32()
  external int endian;

  /// denisty pixels/inch or pixel/cm
  @ffi.Int32()
  external int units;

  /// compression quality
  @ffi.Size()
  external int quality;

  /// Chroma subsampling ratio string
  external ffi.Pointer<ffi.Char> sampling_factor;

  /// X windows server name - display/animate
  external ffi.Pointer<ffi.Char> server_name;

  /// DUP for draw_info
  external ffi.Pointer<ffi.Char> font;

  /// montage/display background tile
  external ffi.Pointer<ffi.Char> texture;

  /// DUP for image and draw_info
  external ffi.Pointer<ffi.Char> density;

  @ffi.Double()
  external double pointsize;

  /// current color fuzz attribute
  @ffi.Double()
  external double fuzz;

  /// deprecated
  external PixelInfo alpha_color;

  /// user set background color
  external PixelInfo background_color;

  /// user set border color
  external PixelInfo border_color;

  /// color for transparent index in color tables */
  /// /* NB: fill color is only needed in draw_info! */
  /// /* the same for undercolor (for font drawing)
  external PixelInfo transparent_color;

  /// dither enable-disable
  @ffi.Int32()
  external int dither;

  /// read/write pcl,pdf,ps,xps as monocrome image
  @ffi.Int32()
  external int monochrome;

  @ffi.Int32()
  external int colorspace;

  @ffi.Int32()
  external int compose;

  @ffi.Int32()
  external int type;

  /// fast read image attributes, not image data
  @ffi.Int32()
  external int ping;

  /// verbose output enable/disable
  @ffi.Int32()
  external int verbose;

  @ffi.Int32()
  external int channel;

  /// splay tree of global options
  external ffi.Pointer<ffi.Void> options;

  external ffi.Pointer<ffi.Void> profile;

  @ffi.Int32()
  external int synchronize;

  external MagickProgressMonitor progress_monitor;

  external ffi.Pointer<ffi.Void> client_data;

  external ffi.Pointer<ffi.Void> cache;

  external StreamHandler stream;

  external ffi.Pointer<FILE> file;

  external ffi.Pointer<ffi.Void> blob;

  @ffi.Size()
  external int length;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Char> magick;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Char> unique;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Char> filename;

  @ffi.Int32()
  external int debug;

  @ffi.Size()
  external int signature;

  external ffi.Pointer<CustomStreamInfo> custom_stream;

  /// matte (frame) color
  external PixelInfo matte_color;
}

typedef StreamHandler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Size Function(
            ffi.Pointer<Image>, ffi.Pointer<ffi.Void>, ffi.Size)>>;
typedef Image = _Image;
typedef CustomStreamInfo = _CustomStreamInfo;

class _CustomStreamInfo extends ffi.Opaque {}

typedef ImageInfo = _ImageInfo;
typedef ExceptionInfo = _ExceptionInfo;

abstract class GeometryFlags {
  static const int NoValue = 0;
  static const int XValue = 1;
  static const int XiValue = 1;
  static const int YValue = 2;
  static const int PsiValue = 2;
  static const int WidthValue = 4;
  static const int RhoValue = 4;
  static const int HeightValue = 8;
  static const int SigmaValue = 8;
  static const int ChiValue = 16;
  static const int XiNegative = 32;
  static const int XNegative = 32;
  static const int PsiNegative = 64;
  static const int YNegative = 64;
  static const int ChiNegative = 128;

  /// '%'  percentage of something
  static const int PercentValue = 4096;

  /// '!'  resize no-aspect - special use flag
  static const int AspectValue = 8192;

  /// '!'  ScaleKernelValue() in morphology.c
  static const int NormalizeValue = 8192;

  /// '<'  resize smaller - special use flag
  static const int LessValue = 16384;

  /// '>'  resize larger - spacial use flag
  static const int GreaterValue = 32768;

  /// '^'  special handling needed
  static const int MinimumValue = 65536;

  /// '^' see ScaleKernelValue()
  static const int CorrelateNormalizeValue = 65536;

  /// '@'  resize to area - special use flag
  static const int AreaValue = 131072;

  /// '.'  floating point numbers found
  static const int DecimalValue = 262144;

  /// 'x'  separator found
  static const int SeparatorValue = 524288;

  /// '~'  special handling needed
  static const int AspectRatioValue = 1048576;

  /// '/'  alpha
  static const int AlphaValue = 2097152;

  /// '#'  special handling needed
  static const int MaximumValue = 4194304;
  static const int AllValues = 2147483647;
}

class _AffineMatrix extends ffi.Struct {
  @ffi.Double()
  external double sx;

  @ffi.Double()
  external double rx;

  @ffi.Double()
  external double ry;

  @ffi.Double()
  external double sy;

  @ffi.Double()
  external double tx;

  @ffi.Double()
  external double ty;
}

class _GeometryInfo extends ffi.Struct {
  @ffi.Double()
  external double rho;

  @ffi.Double()
  external double sigma;

  @ffi.Double()
  external double xi;

  @ffi.Double()
  external double psi;

  @ffi.Double()
  external double chi;
}

class _OffsetInfo extends ffi.Struct {
  @ssize_t()
  external int x;

  @ssize_t()
  external int y;
}

typedef MagickStatusType = ffi.UnsignedInt;
typedef AffineMatrix = _AffineMatrix;
typedef GeometryInfo = _GeometryInfo;

abstract class AlphaChannelOption {
  static const int UndefinedAlphaChannel = 0;
  static const int ActivateAlphaChannel = 1;
  static const int AssociateAlphaChannel = 2;
  static const int BackgroundAlphaChannel = 3;
  static const int CopyAlphaChannel = 4;
  static const int DeactivateAlphaChannel = 5;
  static const int DiscreteAlphaChannel = 6;
  static const int DisassociateAlphaChannel = 7;
  static const int ExtractAlphaChannel = 8;
  static const int OffAlphaChannel = 9;
  static const int OnAlphaChannel = 10;
  static const int OpaqueAlphaChannel = 11;
  static const int RemoveAlphaChannel = 12;
  static const int SetAlphaChannel = 13;
  static const int ShapeAlphaChannel = 14;
  static const int TransparentAlphaChannel = 15;
}

class _SegmentInfo extends ffi.Struct {
  @ffi.Double()
  external double x1;

  @ffi.Double()
  external double y1;

  @ffi.Double()
  external double x2;

  @ffi.Double()
  external double y2;
}

abstract class TransmitType {
  static const int UndefinedTransmitType = 0;
  static const int FileTransmitType = 1;
  static const int BlobTransmitType = 2;
  static const int StreamTransmitType = 3;
  static const int ImageTransmitType = 4;
}

abstract class MapMode {
  static const int ReadMode = 0;
  static const int WriteMode = 1;
  static const int IOMode = 2;
  static const int PersistMode = 3;
}

abstract class PixelMask {
  static const int UndefinedPixelMask = 0;
  static const int ReadPixelMask = 1;
  static const int WritePixelMask = 2;
  static const int CompositePixelMask = 4;
}

abstract class StorageType {
  static const int UndefinedPixel = 0;
  static const int CharPixel = 1;
  static const int DoublePixel = 2;
  static const int FloatPixel = 3;
  static const int LongPixel = 4;
  static const int LongLongPixel = 5;
  static const int QuantumPixel = 6;
  static const int ShortPixel = 7;
}

class _PixelPacket extends ffi.Struct {
  @ffi.UnsignedInt()
  external int red;

  @ffi.UnsignedInt()
  external int green;

  @ffi.UnsignedInt()
  external int blue;

  @ffi.UnsignedInt()
  external int alpha;

  @ffi.UnsignedInt()
  external int black;
}

class _CacheView extends ffi.Opaque {}

typedef CacheView_ = _CacheView;
typedef Quantum = ffi.UnsignedChar;

class _StreamInfo extends ffi.Opaque {}

typedef StreamInfo = _StreamInfo;
typedef CustomStreamHandler = ffi.Pointer<
    ffi.NativeFunction<
        ssize_t Function(
            ffi.Pointer<ffi.UnsignedChar>, ffi.Size, ffi.Pointer<ffi.Void>)>>;
typedef CustomStreamSeeker = ffi.Pointer<
    ffi.NativeFunction<
        MagickOffsetType Function(
            MagickOffsetType, ffi.Int, ffi.Pointer<ffi.Void>)>>;
typedef CustomStreamTeller = ffi.Pointer<
    ffi.NativeFunction<MagickOffsetType Function(ffi.Pointer<ffi.Void>)>>;

abstract class VirtualPixelMethod {
  static const int UndefinedVirtualPixelMethod = 0;
  static const int BackgroundVirtualPixelMethod = 1;
  static const int DitherVirtualPixelMethod = 2;
  static const int EdgeVirtualPixelMethod = 3;
  static const int MirrorVirtualPixelMethod = 4;
  static const int RandomVirtualPixelMethod = 5;
  static const int TileVirtualPixelMethod = 6;
  static const int TransparentVirtualPixelMethod = 7;
  static const int MaskVirtualPixelMethod = 8;
  static const int BlackVirtualPixelMethod = 9;
  static const int GrayVirtualPixelMethod = 10;
  static const int WhiteVirtualPixelMethod = 11;
  static const int HorizontalTileVirtualPixelMethod = 12;
  static const int VerticalTileVirtualPixelMethod = 13;
  static const int HorizontalTileEdgeVirtualPixelMethod = 14;
  static const int VerticalTileEdgeVirtualPixelMethod = 15;
  static const int CheckerTileVirtualPixelMethod = 16;
}

typedef CacheView = _CacheView;
typedef ErrorHandler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Int32, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>;
typedef FatalErrorHandler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Int32, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>;
typedef WarningHandler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(
            ffi.Int32, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>;

abstract class ComplianceType {
  static const int UndefinedCompliance = 0;
  static const int NoCompliance = 0;
  static const int CSSCompliance = 1;
  static const int SVGCompliance = 1;
  static const int X11Compliance = 2;
  static const int XPMCompliance = 4;
  static const int MVGCompliance = 8;
  static const int AllCompliance = 2147483647;
}

abstract class IlluminantType {
  static const int UndefinedIlluminant = 5;
  static const int AIlluminant = 0;
  static const int BIlluminant = 1;
  static const int CIlluminant = 2;
  static const int D50Illuminant = 3;
  static const int D55Illuminant = 4;
  static const int D65Illuminant = 5;
  static const int D75Illuminant = 6;
  static const int EIlluminant = 7;
  static const int F2Illuminant = 8;
  static const int F7Illuminant = 9;
  static const int F11Illuminant = 10;
}

class _ColorInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Int32()
  external int compliance;

  external PixelInfo color;

  @ffi.Int32()
  external int exempt;

  @ffi.Int32()
  external int stealth;

  @ffi.Size()
  external int signature;
}

typedef ColorInfo = _ColorInfo;

abstract class KernelInfoType {
  /// equivalent to UnityKernel
  static const int UndefinedKernel = 0;

  /// The no-op or 'original image' kernel
  static const int UnityKernel = 1;

  /// Convolution Kernels, Gaussian Based
  static const int GaussianKernel = 2;
  static const int DoGKernel = 3;
  static const int LoGKernel = 4;
  static const int BlurKernel = 5;
  static const int CometKernel = 6;
  static const int BinomialKernel = 7;

  /// Convolution Kernels, by Name
  static const int LaplacianKernel = 8;
  static const int SobelKernel = 9;
  static const int FreiChenKernel = 10;
  static const int RobertsKernel = 11;
  static const int PrewittKernel = 12;
  static const int CompassKernel = 13;
  static const int KirschKernel = 14;

  /// Shape Kernels
  static const int DiamondKernel = 15;
  static const int SquareKernel = 16;
  static const int RectangleKernel = 17;
  static const int OctagonKernel = 18;
  static const int DiskKernel = 19;
  static const int PlusKernel = 20;
  static const int CrossKernel = 21;
  static const int RingKernel = 22;

  /// Hit And Miss Kernels
  static const int PeaksKernel = 23;
  static const int EdgesKernel = 24;
  static const int CornersKernel = 25;
  static const int DiagonalsKernel = 26;
  static const int LineEndsKernel = 27;
  static const int LineJunctionsKernel = 28;
  static const int RidgesKernel = 29;
  static const int ConvexHullKernel = 30;
  static const int ThinSEKernel = 31;
  static const int SkeletonKernel = 32;

  /// Distance Measuring Kernels
  static const int ChebyshevKernel = 33;
  static const int ManhattanKernel = 34;
  static const int OctagonalKernel = 35;
  static const int EuclideanKernel = 36;

  /// User Specified Kernel Array
  static const int UserDefinedKernel = 37;
}

abstract class MorphologyMethod {
  static const int UndefinedMorphology = 0;

  /// Weighted Sum with reflected kernel
  static const int ConvolveMorphology = 1;

  /// Weighted Sum using a sliding window
  static const int CorrelateMorphology = 2;

  /// Minimum Value in Neighbourhood
  static const int ErodeMorphology = 3;

  /// Maximum Value in Neighbourhood
  static const int DilateMorphology = 4;

  /// Pixel Pick using GreyScale Erode
  static const int ErodeIntensityMorphology = 5;

  /// Pixel Pick using GreyScale Dialate
  static const int DilateIntensityMorphology = 6;

  /// Add Kernel Value, take Minimum
  static const int IterativeDistanceMorphology = 7;

  /// Dilate then Erode
  static const int OpenMorphology = 8;

  /// Erode then Dilate
  static const int CloseMorphology = 9;

  /// Pixel Pick using GreyScale Open
  static const int OpenIntensityMorphology = 10;

  /// Pixel Pick using GreyScale Close
  static const int CloseIntensityMorphology = 11;

  /// Open then Close
  static const int SmoothMorphology = 12;

  /// Dilate difference from Original
  static const int EdgeInMorphology = 13;

  /// Erode difference from Original
  static const int EdgeOutMorphology = 14;

  /// Dilate difference with Erode
  static const int EdgeMorphology = 15;

  /// Close difference from Original
  static const int TopHatMorphology = 16;

  /// Open difference from Original
  static const int BottomHatMorphology = 17;

  /// Foreground/Background pattern matching
  static const int HitAndMissMorphology = 18;

  /// Remove matching pixels from image
  static const int ThinningMorphology = 19;

  /// Add matching pixels from image
  static const int ThickenMorphology = 20;

  /// Add Kernel Value, take Minimum
  static const int DistanceMorphology = 21;

  /// Distance matte channel copy nearest color
  static const int VoronoiMorphology = 22;
}

class _KernelInfo extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Size()
  external int width;

  @ffi.Size()
  external int height;

  @ssize_t()
  external int x;

  @ssize_t()
  external int y;

  external ffi.Pointer<MagickRealType> values;

  @ffi.Double()
  external double minimum;

  @ffi.Double()
  external double maximum;

  @ffi.Double()
  external double negative_range;

  @ffi.Double()
  external double positive_range;

  @ffi.Double()
  external double angle;

  external ffi.Pointer<_KernelInfo> next;

  @ffi.Size()
  external int signature;
}

typedef KernelInfo = _KernelInfo;

abstract class PreviewType {
  static const int UndefinedPreview = 0;
  static const int RotatePreview = 1;
  static const int ShearPreview = 2;
  static const int RollPreview = 3;
  static const int HuePreview = 4;
  static const int SaturationPreview = 5;
  static const int BrightnessPreview = 6;
  static const int GammaPreview = 7;
  static const int SpiffPreview = 8;
  static const int DullPreview = 9;
  static const int GrayscalePreview = 10;
  static const int QuantizePreview = 11;
  static const int DespecklePreview = 12;
  static const int ReduceNoisePreview = 13;
  static const int AddNoisePreview = 14;
  static const int SharpenPreview = 15;
  static const int BlurPreview = 16;
  static const int ThresholdPreview = 17;
  static const int EdgeDetectPreview = 18;
  static const int SpreadPreview = 19;
  static const int SolarizePreview = 20;
  static const int ShadePreview = 21;
  static const int RaisePreview = 22;
  static const int SegmentPreview = 23;
  static const int SwirlPreview = 24;
  static const int ImplodePreview = 25;
  static const int WavePreview = 26;
  static const int OilPaintPreview = 27;
  static const int CharcoalDrawingPreview = 28;
  static const int JPEGPreview = 29;
}

abstract class LayerMethod {
  static const int UndefinedLayer = 0;
  static const int CoalesceLayer = 1;
  static const int CompareAnyLayer = 2;
  static const int CompareClearLayer = 3;
  static const int CompareOverlayLayer = 4;
  static const int DisposeLayer = 5;
  static const int OptimizeLayer = 6;
  static const int OptimizeImageLayer = 7;
  static const int OptimizePlusLayer = 8;
  static const int OptimizeTransLayer = 9;
  static const int RemoveDupsLayer = 10;
  static const int RemoveZeroLayer = 11;
  static const int CompositeLayer = 12;
  static const int MergeLayer = 13;
  static const int FlattenLayer = 14;
  static const int MosaicLayer = 15;
  static const int TrimBoundsLayer = 16;
}

class _LinkedListInfo extends ffi.Opaque {}

typedef LinkedListInfo = _LinkedListInfo;

class _LocaleInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;

  external ffi.Pointer<ffi.Char> tag;

  external ffi.Pointer<ffi.Char> message;

  @ffi.Int32()
  external int stealth;

  @ffi.Size()
  external int signature;
}

typedef LocaleInfo = _LocaleInfo;

class _StringInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;

  external ffi.Pointer<ffi.UnsignedChar> datum;

  @ffi.Size()
  external int length;

  @ffi.Size()
  external int signature;

  external ffi.Pointer<ffi.Char> name;
}

typedef StringInfo = _StringInfo;

abstract class QuantumAlphaType {
  static const int UndefinedQuantumAlpha = 0;
  static const int AssociatedQuantumAlpha = 1;
  static const int DisassociatedQuantumAlpha = 2;
}

abstract class QuantumFormatType {
  static const int UndefinedQuantumFormat = 0;
  static const int FloatingPointQuantumFormat = 1;
  static const int SignedQuantumFormat = 2;
  static const int UnsignedQuantumFormat = 3;
}

abstract class QuantumType {
  static const int UndefinedQuantum = 0;
  static const int AlphaQuantum = 1;
  static const int BGRAQuantum = 2;
  static const int BGROQuantum = 3;
  static const int BGRQuantum = 4;
  static const int BlackQuantum = 5;
  static const int BlueQuantum = 6;
  static const int CbYCrAQuantum = 7;
  static const int CbYCrQuantum = 8;
  static const int CbYCrYQuantum = 9;
  static const int CMYKAQuantum = 10;
  static const int CMYKOQuantum = 11;
  static const int CMYKQuantum = 12;
  static const int CyanQuantum = 13;
  static const int GrayAlphaQuantum = 14;
  static const int GrayQuantum = 15;
  static const int GreenQuantum = 16;
  static const int IndexAlphaQuantum = 17;
  static const int IndexQuantum = 18;
  static const int MagentaQuantum = 19;
  static const int OpacityQuantum = 20;
  static const int RedQuantum = 21;
  static const int RGBAQuantum = 22;
  static const int RGBOQuantum = 23;
  static const int RGBPadQuantum = 24;
  static const int RGBQuantum = 25;
  static const int YellowQuantum = 26;
  static const int MultispectralQuantum = 27;
}

class _QuantumInfo extends ffi.Opaque {}

typedef QuantumInfo = _QuantumInfo;

class _ResampleFilter extends ffi.Opaque {}

typedef ResampleFilter = _ResampleFilter;

class _ResizeFilter extends ffi.Opaque {}

typedef OffsetInfo = _OffsetInfo;

abstract class StretchType {
  static const int UndefinedStretch = 0;
  static const int NormalStretch = 1;
  static const int UltraCondensedStretch = 2;
  static const int ExtraCondensedStretch = 3;
  static const int CondensedStretch = 4;
  static const int SemiCondensedStretch = 5;
  static const int SemiExpandedStretch = 6;
  static const int ExpandedStretch = 7;
  static const int ExtraExpandedStretch = 8;
  static const int UltraExpandedStretch = 9;
  static const int AnyStretch = 10;
}

abstract class StyleType {
  static const int UndefinedStyle = 0;
  static const int NormalStyle = 1;
  static const int ItalicStyle = 2;
  static const int ObliqueStyle = 3;
  static const int AnyStyle = 4;

  /// deprecated
  static const int BoldStyle = 5;
}

class _TypeInfo extends ffi.Struct {
  @ffi.Size()
  external int face;

  external ffi.Pointer<ffi.Char> path;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  external ffi.Pointer<ffi.Char> family;

  @ffi.Int32()
  external int style;

  @ffi.Int32()
  external int stretch;

  @ffi.Size()
  external int weight;

  external ffi.Pointer<ffi.Char> encoding;

  external ffi.Pointer<ffi.Char> foundry;

  external ffi.Pointer<ffi.Char> format;

  external ffi.Pointer<ffi.Char> metrics;

  external ffi.Pointer<ffi.Char> glyphs;

  @ffi.Int32()
  external int stealth;

  @ffi.Size()
  external int signature;
}

typedef TypeInfo = _TypeInfo;

abstract class AlignType {
  static const int UndefinedAlign = 0;
  static const int LeftAlign = 1;
  static const int CenterAlign = 2;
  static const int RightAlign = 3;
}

abstract class ClipPathUnits {
  static const int UndefinedPathUnits = 0;
  static const int UserSpace = 1;
  static const int UserSpaceOnUse = 2;
  static const int ObjectBoundingBox = 3;
}

abstract class DecorationType {
  static const int UndefinedDecoration = 0;
  static const int NoDecoration = 1;
  static const int UnderlineDecoration = 2;
  static const int OverlineDecoration = 3;
  static const int LineThroughDecoration = 4;
}

abstract class DirectionType {
  static const int UndefinedDirection = 0;
  static const int RightToLeftDirection = 1;
  static const int LeftToRightDirection = 2;
}

abstract class FillRule {
  static const int UndefinedRule = 0;
  static const int EvenOddRule = 1;
  static const int NonZeroRule = 2;
}

abstract class GradientType {
  static const int UndefinedGradient = 0;
  static const int LinearGradient = 1;
  static const int RadialGradient = 2;
}

abstract class LineCap {
  static const int UndefinedCap = 0;
  static const int ButtCap = 1;
  static const int RoundCap = 2;
  static const int SquareCap = 3;
}

abstract class LineJoin {
  static const int UndefinedJoin = 0;
  static const int MiterJoin = 1;
  static const int RoundJoin = 2;
  static const int BevelJoin = 3;
}

abstract class PaintMethod {
  static const int UndefinedMethod = 0;
  static const int PointMethod = 1;
  static const int ReplaceMethod = 2;
  static const int FloodfillMethod = 3;
  static const int FillToBorderMethod = 4;
  static const int ResetMethod = 5;
}

abstract class PrimitiveType {
  static const int UndefinedPrimitive = 0;
  static const int AlphaPrimitive = 1;
  static const int ArcPrimitive = 2;
  static const int BezierPrimitive = 3;
  static const int CirclePrimitive = 4;
  static const int ColorPrimitive = 5;
  static const int EllipsePrimitive = 6;
  static const int ImagePrimitive = 7;
  static const int LinePrimitive = 8;
  static const int PathPrimitive = 9;
  static const int PointPrimitive = 10;
  static const int PolygonPrimitive = 11;
  static const int PolylinePrimitive = 12;
  static const int RectanglePrimitive = 13;
  static const int RoundRectanglePrimitive = 14;
  static const int TextPrimitive = 15;
}

abstract class ReferenceType {
  static const int UndefinedReference = 0;
  static const int GradientReference = 1;
}

abstract class SpreadMethod {
  static const int UndefinedSpread = 0;
  static const int PadSpread = 1;
  static const int ReflectSpread = 2;
  static const int RepeatSpread = 3;
}

abstract class WordBreakType {
  static const int UndefinedWordBreakType = 0;
  static const int NormalWordBreakType = 1;
  static const int BreakWordBreakType = 2;
}

class _StopInfo extends ffi.Struct {
  external PixelInfo color;

  @ffi.Double()
  external double offset;
}

class _GradientInfo extends ffi.Struct {
  @ffi.Int32()
  external int type;

  external RectangleInfo bounding_box;

  external SegmentInfo gradient_vector;

  external ffi.Pointer<StopInfo> stops;

  @ffi.Size()
  external int number_stops;

  @ffi.Int32()
  external int spread;

  @ffi.Int32()
  external int debug;

  external PointInfo center;

  external PointInfo radii;

  @ffi.Double()
  external double radius;

  @ffi.Double()
  external double angle;

  @ffi.Size()
  external int signature;
}

typedef SegmentInfo = _SegmentInfo;
typedef StopInfo = _StopInfo;

class _ElementReference extends ffi.Struct {
  external ffi.Pointer<ffi.Char> id;

  @ffi.Int32()
  external int type;

  external GradientInfo gradient;

  external ffi.Pointer<_ElementReference> previous;

  external ffi.Pointer<_ElementReference> next;

  @ffi.Size()
  external int signature;
}

typedef GradientInfo = _GradientInfo;

class _DrawInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> primitive;

  external ffi.Pointer<ffi.Char> geometry;

  external RectangleInfo viewbox;

  external AffineMatrix affine;

  external PixelInfo fill;

  external PixelInfo stroke;

  external PixelInfo undercolor;

  external PixelInfo border_color;

  external ffi.Pointer<Image> fill_pattern;

  external ffi.Pointer<Image> stroke_pattern;

  @ffi.Double()
  external double stroke_width;

  external GradientInfo gradient;

  @ffi.Int32()
  external int stroke_antialias;

  @ffi.Int32()
  external int text_antialias;

  @ffi.Int32()
  external int fill_rule;

  @ffi.Int32()
  external int linecap;

  @ffi.Int32()
  external int linejoin;

  @ffi.Size()
  external int miterlimit;

  @ffi.Double()
  external double dash_offset;

  @ffi.Int32()
  external int decorate;

  @ffi.Int32()
  external int compose;

  external ffi.Pointer<ffi.Char> text;

  external ffi.Pointer<ffi.Char> font;

  external ffi.Pointer<ffi.Char> metrics;

  external ffi.Pointer<ffi.Char> family;

  @ffi.Size()
  external int face;

  @ffi.Int32()
  external int style;

  @ffi.Int32()
  external int stretch;

  @ffi.Size()
  external int weight;

  external ffi.Pointer<ffi.Char> encoding;

  @ffi.Double()
  external double pointsize;

  external ffi.Pointer<ffi.Char> density;

  @ffi.Int32()
  external int align;

  @ffi.Int32()
  external int gravity;

  external ffi.Pointer<ffi.Char> server_name;

  external ffi.Pointer<ffi.Double> dash_pattern;

  external ffi.Pointer<ffi.Char> clip_mask;

  external SegmentInfo bounds;

  @ffi.Int32()
  external int clip_units;

  @Quantum()
  external int alpha;

  @ffi.Int32()
  external int render;

  external ElementReference element_reference;

  @ffi.Double()
  external double kerning;

  @ffi.Double()
  external double interword_spacing;

  @ffi.Double()
  external double interline_spacing;

  @ffi.Int32()
  external int direction;

  @ffi.Int32()
  external int debug;

  @ffi.Size()
  external int signature;

  @ffi.Double()
  external double fill_alpha;

  @ffi.Double()
  external double stroke_alpha;

  @ffi.Int32()
  external int clip_path;

  external ffi.Pointer<Image> clipping_mask;

  @ffi.Int32()
  external int compliance;

  external ffi.Pointer<Image> composite_mask;

  external ffi.Pointer<ffi.Char> id;

  @ffi.Int32()
  external int word_break;
}

typedef ElementReference = _ElementReference;

class _PrimitiveInfo extends ffi.Struct {
  external PointInfo point;

  @ffi.Size()
  external int coordinates;

  @ffi.Int32()
  external int primitive;

  @ffi.Int32()
  external int method;

  external ffi.Pointer<ffi.Char> text;

  @ffi.Int32()
  external int closed_subpath;
}

class _TypeMetric extends ffi.Struct {
  external PointInfo pixels_per_em;

  @ffi.Double()
  external double ascent;

  @ffi.Double()
  external double descent;

  @ffi.Double()
  external double width;

  @ffi.Double()
  external double height;

  @ffi.Double()
  external double max_advance;

  @ffi.Double()
  external double underline_position;

  @ffi.Double()
  external double underline_thickness;

  external SegmentInfo bounds;

  external PointInfo origin;
}

typedef DrawInfo = _DrawInfo;
typedef PrimitiveInfo = _PrimitiveInfo;
typedef TypeMetric = _TypeMetric;

abstract class CacheType {
  static const int UndefinedCache = 0;
  static const int DiskCache = 1;
  static const int DistributedCache = 2;
  static const int MapCache = 3;
  static const int MemoryCache = 4;
  static const int PingCache = 5;
}

class _CoderInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;

  external ffi.Pointer<ffi.Char> magick;

  external ffi.Pointer<ffi.Char> name;

  @ffi.Int32()
  external int exempt;

  @ffi.Int32()
  external int stealth;

  @ffi.Size()
  external int signature;
}

typedef CoderInfo = _CoderInfo;

abstract class MetricType {
  static const int UndefinedErrorMetric = 0;
  static const int AbsoluteErrorMetric = 1;
  static const int FuzzErrorMetric = 2;
  static const int MeanAbsoluteErrorMetric = 3;
  static const int MeanErrorPerPixelErrorMetric = 4;
  static const int MeanSquaredErrorMetric = 5;
  static const int NormalizedCrossCorrelationErrorMetric = 6;
  static const int PeakAbsoluteErrorMetric = 7;
  static const int PeakSignalToNoiseRatioErrorMetric = 8;
  static const int PerceptualHashErrorMetric = 9;
  static const int RootMeanSquaredErrorMetric = 10;
  static const int StructuralSimilarityErrorMetric = 11;
  static const int StructuralDissimilarityErrorMetric = 12;
}

class _ConfigureInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;

  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> value;

  @ffi.Int32()
  external int exempt;

  @ffi.Int32()
  external int stealth;

  @ffi.Size()
  external int signature;
}

typedef ConfigureInfo = _ConfigureInfo;

class _FrameInfo extends ffi.Struct {
  @ffi.Size()
  external int width;

  @ffi.Size()
  external int height;

  @ssize_t()
  external int x;

  @ssize_t()
  external int y;

  @ssize_t()
  external int inner_bevel;

  @ssize_t()
  external int outer_bevel;
}

typedef FrameInfo = _FrameInfo;

class _DelegateInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;

  external ffi.Pointer<ffi.Char> decode;

  external ffi.Pointer<ffi.Char> encode;

  external ffi.Pointer<ffi.Char> commands;

  @ssize_t()
  external int mode;

  @ffi.Int32()
  external int thread_support;

  @ffi.Int32()
  external int spawn;

  @ffi.Int32()
  external int stealth;

  external ffi.Pointer<SemaphoreInfo> semaphore;

  @ffi.Size()
  external int signature;
}

typedef DelegateInfo = _DelegateInfo;

/// These two enum are linked, with common enumerated values.  Both
/// DistortImages() and SparseColor() often share code to determine functional
/// coefficients for common methods.
///
/// Caution should be taken to ensure that only the common methods contain the
/// same enumerated value, while all others remain unique across both
/// enumerations.
abstract class DistortMethod {
  static const int UndefinedDistortion = 0;
  static const int AffineDistortion = 1;
  static const int AffineProjectionDistortion = 2;
  static const int ScaleRotateTranslateDistortion = 3;
  static const int PerspectiveDistortion = 4;
  static const int PerspectiveProjectionDistortion = 5;
  static const int BilinearForwardDistortion = 6;
  static const int BilinearDistortion = 6;
  static const int BilinearReverseDistortion = 7;
  static const int PolynomialDistortion = 8;
  static const int ArcDistortion = 9;
  static const int PolarDistortion = 10;
  static const int DePolarDistortion = 11;
  static const int Cylinder2PlaneDistortion = 12;
  static const int Plane2CylinderDistortion = 13;
  static const int BarrelDistortion = 14;
  static const int BarrelInverseDistortion = 15;
  static const int ShepardsDistortion = 16;
  static const int ResizeDistortion = 17;
  static const int SentinelDistortion = 18;
  static const int RigidAffineDistortion = 19;
}

abstract class SparseColorMethod {
  static const int UndefinedColorInterpolate = 0;
  static const int BarycentricColorInterpolate = 1;
  static const int BilinearColorInterpolate = 7;
  static const int PolynomialColorInterpolate = 8;
  static const int ShepardsColorInterpolate = 16;

  /// Methods unique to SparseColor().
  static const int VoronoiColorInterpolate = 18;
  static const int InverseColorInterpolate = 19;
  static const int ManhattanColorInterpolate = 20;
}

/// Haralick texture features.
class _ChannelFeatures extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> angular_second_moment;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> contrast;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> correlation;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> variance_sum_of_squares;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> inverse_difference_moment;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> sum_average;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> sum_variance;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> sum_entropy;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> entropy;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> difference_variance;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> difference_entropy;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> measure_of_correlation_1;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> measure_of_correlation_2;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Double> maximum_correlation_coefficient;
}

/// Haralick texture features.
typedef ChannelFeatures = _ChannelFeatures;

abstract class ComplexOperator {
  static const int UndefinedComplexOperator = 0;
  static const int AddComplexOperator = 1;
  static const int ConjugateComplexOperator = 2;
  static const int DivideComplexOperator = 3;
  static const int MagnitudePhaseComplexOperator = 4;
  static const int MultiplyComplexOperator = 5;
  static const int RealImaginaryComplexOperator = 6;
  static const int SubtractComplexOperator = 7;
}

class _RandomInfo extends ffi.Opaque {}

/// Typedef declarations.
typedef RandomInfo = _RandomInfo;

class _ImageView extends ffi.Opaque {}

typedef ImageView = _ImageView;
typedef DuplexTransferImageViewMethod = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ImageView>, ffi.Pointer<ImageView>,
            ffi.Pointer<ImageView>, ssize_t, ffi.Int, ffi.Pointer<ffi.Void>)>>;
typedef GetImageViewMethod = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ImageView>, ssize_t, ffi.Int, ffi.Pointer<ffi.Void>)>>;
typedef SetImageViewMethod = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ImageView>, ssize_t, ffi.Int, ffi.Pointer<ffi.Void>)>>;
typedef TransferImageViewMethod = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<ImageView>, ffi.Pointer<ImageView>,
            ssize_t, ffi.Int, ffi.Pointer<ffi.Void>)>>;
typedef UpdateImageViewMethod = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ImageView>, ssize_t, ffi.Int, ffi.Pointer<ffi.Void>)>>;

abstract class LogEventType {
  static const int UndefinedEvents = 0;
  static const int NoEvents = 0;
  static const int AccelerateEvent = 1;
  static const int AnnotateEvent = 2;
  static const int BlobEvent = 4;
  static const int CacheEvent = 8;
  static const int CoderEvent = 16;
  static const int ConfigureEvent = 32;
  static const int DeprecateEvent = 64;
  static const int DrawEvent = 128;

  /// Log Errors and Warnings immediately
  static const int ExceptionEvent = 256;
  static const int ImageEvent = 512;
  static const int LocaleEvent = 1024;

  /// Log coder and filter modules
  static const int ModuleEvent = 2048;
  static const int PixelEvent = 4096;
  static const int PolicyEvent = 8192;
  static const int ResourceEvent = 16384;
  static const int TraceEvent = 32768;
  static const int TransformEvent = 65536;
  static const int UserEvent = 131072;

  /// Log MagickWand
  static const int WandEvent = 262144;
  static const int X11Event = 524288;

  /// Log Command Processing (CLI & Scripts)
  static const int CommandEvent = 1048576;
  static const int AllEvents = 2147483647;
}

class _LogInfo extends ffi.Opaque {}

typedef LogInfo = _LogInfo;
typedef MagickLogMethod = ffi.Pointer<
    ffi.NativeFunction<ffi.Void Function(ffi.Int32, ffi.Pointer<ffi.Char>)>>;

class _MagicInfo extends ffi.Opaque {}

typedef MagicInfo = _MagicInfo;

abstract class MagickFormatType {
  static const int UndefinedFormatType = 0;
  static const int ImplicitFormatType = 1;
  static const int ExplicitFormatType = 2;
}

abstract class MagickInfoFlag {
  static const int CoderNoFlag = 0;
  static const int CoderAdjoinFlag = 1;
  static const int CoderBlobSupportFlag = 2;
  static const int CoderDecoderThreadSupportFlag = 4;
  static const int CoderEncoderThreadSupportFlag = 8;
  static const int CoderEndianSupportFlag = 16;
  static const int CoderRawSupportFlag = 32;

  /// deprecated
  static const int CoderSeekableStreamFlag = 64;
  static const int CoderStealthFlag = 128;
  static const int CoderUseExtensionFlag = 256;
  static const int CoderDecoderSeekableStreamFlag = 512;
  static const int CoderEncoderSeekableStreamFlag = 1024;
}

class _MagickInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> name;

  external ffi.Pointer<ffi.Char> description;

  external ffi.Pointer<ffi.Char> version;

  external ffi.Pointer<ffi.Char> mime_type;

  external ffi.Pointer<ffi.Char> note;

  external ffi.Pointer<ffi.Char> module;

  external ffi.Pointer<DecodeImageHandler> decoder;

  external ffi.Pointer<EncodeImageHandler> encoder;

  external ffi.Pointer<ImageInfo> image_info;

  external ffi.Pointer<IsImageFormatHandler> magick;

  @ffi.Int32()
  external int format_type;

  @MagickStatusType()
  external int flags;

  external ffi.Pointer<SemaphoreInfo> semaphore;

  @ffi.Size()
  external int signature;

  external ffi.Pointer<ffi.Void> client_data;
}

typedef DecodeImageHandler = ffi.NativeFunction<
    ffi.Pointer<Image> Function(
        ffi.Pointer<ImageInfo>, ffi.Pointer<ExceptionInfo>)>;
typedef EncodeImageHandler = ffi.NativeFunction<
    ffi.Int32 Function(ffi.Pointer<ImageInfo>, ffi.Pointer<Image>,
        ffi.Pointer<ExceptionInfo>)>;
typedef IsImageFormatHandler = ffi.NativeFunction<
    ffi.Int32 Function(ffi.Pointer<ffi.UnsignedChar>, ffi.Size)>;
typedef MagickInfo = _MagickInfo;

class _MatrixInfo extends ffi.Opaque {}

typedef MatrixInfo = _MatrixInfo;

class _MemoryInfo extends ffi.Opaque {}

typedef MemoryInfo = _MemoryInfo;
typedef AcquireMemoryHandler
    = ffi.Pointer<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>;
typedef ResizeMemoryHandler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size)>>;
typedef DestroyMemoryHandler
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef AcquireAlignedMemoryHandler = ffi.Pointer<
    ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>;
typedef RelinquishAlignedMemoryHandler
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;

abstract class MagickModuleType {
  static const int MagickImageCoderModule = 0;
  static const int MagickImageFilterModule = 1;
}

class _ModuleInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> path;

  external ffi.Pointer<ffi.Char> tag;

  external ffi.Pointer<ffi.Void> handle;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>
      unregister_module;

  external ffi.Pointer<ffi.NativeFunction<ffi.Size Function()>> register_module;

  @time_t()
  external int timestamp;

  @ffi.Int32()
  external int stealth;

  @ffi.Size()
  external int signature;
}

typedef ModuleInfo = _ModuleInfo;

class _MimeInfo extends ffi.Opaque {}

typedef MimeInfo = _MimeInfo;

abstract class MontageMode {
  static const int UndefinedMode = 0;
  static const int FrameMode = 1;
  static const int UnframeMode = 2;
  static const int ConcatenateMode = 3;
}

class _MontageInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> geometry;

  external ffi.Pointer<ffi.Char> tile;

  external ffi.Pointer<ffi.Char> title;

  external ffi.Pointer<ffi.Char> frame;

  external ffi.Pointer<ffi.Char> texture;

  external ffi.Pointer<ffi.Char> font;

  @ffi.Double()
  external double pointsize;

  @ffi.Size()
  external int border_width;

  @ffi.Int32()
  external int shadow;

  /// deprecated
  external PixelInfo alpha_color;

  external PixelInfo background_color;

  external PixelInfo border_color;

  external PixelInfo fill;

  external PixelInfo stroke;

  @ffi.Int32()
  external int gravity;

  @ffi.Array.multi([4096])
  external ffi.Array<ffi.Char> filename;

  @ffi.Int32()
  external int debug;

  @ffi.Size()
  external int signature;

  external PixelInfo matte_color;
}

typedef MontageInfo = _MontageInfo;

abstract class MagickCLDeviceType {
  static const int UndefinedCLDeviceType = 0;
  static const int CpuCLDeviceType = 1;
  static const int GpuCLDeviceType = 2;
}

class _KernelProfileRecord extends ffi.Struct {
  external ffi.Pointer<ffi.Char> kernel_name;

  @ffi.UnsignedLong()
  external int count;

  @ffi.UnsignedLong()
  external int max;

  @ffi.UnsignedLong()
  external int min;

  @ffi.UnsignedLong()
  external int total;
}

class _MagickCLDevice extends ffi.Opaque {}

typedef MagickCLDevice = ffi.Pointer<_MagickCLDevice>;
typedef KernelProfileRecord = ffi.Pointer<_KernelProfileRecord>;

abstract class CommandOption {
  static const int MagickUndefinedOptions = -1;
  static const int MagickAlignOptions = 0;
  static const int MagickAlphaChannelOptions = 1;
  static const int MagickBooleanOptions = 2;
  static const int MagickCacheOptions = 3;
  static const int MagickChannelOptions = 4;
  static const int MagickClassOptions = 5;
  static const int MagickClipPathOptions = 6;
  static const int MagickCoderOptions = 7;
  static const int MagickColorOptions = 8;
  static const int MagickColorspaceOptions = 9;
  static const int MagickCommandOptions = 10;
  static const int MagickComplexOptions = 11;
  static const int MagickComplianceOptions = 12;
  static const int MagickComposeOptions = 13;
  static const int MagickCompressOptions = 14;
  static const int MagickConfigureOptions = 15;
  static const int MagickDataTypeOptions = 16;
  static const int MagickDebugOptions = 17;
  static const int MagickDecorateOptions = 18;
  static const int MagickDelegateOptions = 19;
  static const int MagickDirectionOptions = 20;
  static const int MagickDisposeOptions = 21;
  static const int MagickDistortOptions = 22;
  static const int MagickDitherOptions = 23;
  static const int MagickEndianOptions = 24;
  static const int MagickEvaluateOptions = 25;
  static const int MagickFillRuleOptions = 26;
  static const int MagickFilterOptions = 27;
  static const int MagickFontOptions = 28;
  static const int MagickFontsOptions = 29;
  static const int MagickFormatOptions = 30;
  static const int MagickFunctionOptions = 31;
  static const int MagickGradientOptions = 32;
  static const int MagickGravityOptions = 33;
  static const int MagickIntensityOptions = 34;
  static const int MagickIntentOptions = 35;
  static const int MagickInterlaceOptions = 36;
  static const int MagickInterpolateOptions = 37;
  static const int MagickKernelOptions = 38;
  static const int MagickLayerOptions = 39;
  static const int MagickLineCapOptions = 40;
  static const int MagickLineJoinOptions = 41;
  static const int MagickListOptions = 42;
  static const int MagickLocaleOptions = 43;
  static const int MagickLogEventOptions = 44;
  static const int MagickLogOptions = 45;
  static const int MagickMagicOptions = 46;
  static const int MagickMethodOptions = 47;
  static const int MagickMetricOptions = 48;
  static const int MagickMimeOptions = 49;
  static const int MagickModeOptions = 50;
  static const int MagickModuleOptions = 51;
  static const int MagickMorphologyOptions = 52;
  static const int MagickNoiseOptions = 53;
  static const int MagickOrientationOptions = 54;
  static const int MagickPixelChannelOptions = 55;
  static const int MagickPixelIntensityOptions = 56;
  static const int MagickPixelMaskOptions = 57;
  static const int MagickPixelTraitOptions = 58;
  static const int MagickPolicyOptions = 59;
  static const int MagickPolicyDomainOptions = 60;
  static const int MagickPolicyRightsOptions = 61;
  static const int MagickPreviewOptions = 62;
  static const int MagickPrimitiveOptions = 63;
  static const int MagickQuantumFormatOptions = 64;
  static const int MagickResolutionOptions = 65;
  static const int MagickResourceOptions = 66;
  static const int MagickSparseColorOptions = 67;
  static const int MagickStatisticOptions = 68;
  static const int MagickStorageOptions = 69;
  static const int MagickStretchOptions = 70;
  static const int MagickStyleOptions = 71;
  static const int MagickThresholdOptions = 72;
  static const int MagickTypeOptions = 73;
  static const int MagickValidateOptions = 74;
  static const int MagickVirtualPixelOptions = 75;
  static const int MagickWeightOptions = 76;
  static const int MagickAutoThresholdOptions = 77;
  static const int MagickToolOptions = 78;
  static const int MagickCLIOptions = 79;
  static const int MagickIlluminantOptions = 80;
  static const int MagickWordBreakOptions = 81;
}

abstract class ValidateType {
  static const int UndefinedValidate = 0;
  static const int NoValidate = 0;
  static const int ColorspaceValidate = 1;
  static const int CompareValidate = 2;
  static const int CompositeValidate = 4;
  static const int ConvertValidate = 8;
  static const int FormatsDiskValidate = 16;
  static const int FormatsMapValidate = 32;
  static const int FormatsMemoryValidate = 64;
  static const int IdentifyValidate = 128;
  static const int ImportExportValidate = 256;
  static const int MontageValidate = 512;
  static const int StreamValidate = 1024;
  static const int MagickValidate = 2048;
  static const int AllValidate = 2147483647;
}

/// Flags to describe classes of image processing options.
/// These are used to determine how a option should be processed, and
/// avoid attempting to process all options in every way posible.
abstract class CommandOptionFlags {
  /// option flag is not in use
  static const int UndefinedOptionFlag = 0;

  /// Setting stored in ImageInfo
  static const int ImageInfoOptionFlag = 1;

  /// Setting stored in DrawInfo
  static const int DrawInfoOptionFlag = 2;

  /// Setting stored in QuantizeInfo
  static const int QuantizeInfoOptionFlag = 4;

  /// Global Setting or Control
  static const int GlobalOptionFlag = 8;

  /// mask any setting option
  static const int SettingOptionFlags = 15;

  /// Images not required operator
  static const int NoImageOperatorFlag = 16;

  /// Simple Image processing operator
  static const int SimpleOperatorFlag = 32;

  /// Multi-Image processing operator
  static const int ListOperatorFlag = 64;

  /// MagickCommandGenesis() Only Option
  static const int GenesisOptionFlag = 128;

  /// Operator with Special Requirements */
  /// /* EG: for specific CLI commands
  static const int SpecialOptionFlag = 256;

  /// Always Interpret escapes in Args */
  /// /* CF: "convert" compatibility mode
  static const int AlwaysInterpretArgsFlag = 1024;

  /// Never Interpret escapes in Args */
  /// /* EG: filename, or delayed escapes
  static const int NeverInterpretArgsFlag = 2048;

  /// Option not used by Magick Command
  static const int NonMagickOptionFlag = 4096;

  /// Convert operation seq firing point
  static const int FireOptionFlag = 8192;

  /// Deprecate option (no code)
  static const int DeprecateOptionFlag = 16384;

  /// Replaced Option (but still works)
  static const int ReplacedOptionFlag = 34816;
}

class _OptionInfo extends ffi.Struct {
  external ffi.Pointer<ffi.Char> mnemonic;

  @ssize_t()
  external int type;

  @ssize_t()
  external int flags;

  @ffi.Int32()
  external int stealth;
}

typedef OptionInfo = _OptionInfo;

abstract class PolicyDomain {
  static const int UndefinedPolicyDomain = 0;
  static const int CoderPolicyDomain = 1;
  static const int DelegatePolicyDomain = 2;
  static const int FilterPolicyDomain = 3;
  static const int PathPolicyDomain = 4;
  static const int ResourcePolicyDomain = 5;
  static const int SystemPolicyDomain = 6;
  static const int CachePolicyDomain = 7;
  static const int ModulePolicyDomain = 8;
}

abstract class PolicyRights {
  static const int UndefinedPolicyRights = 0;
  static const int NoPolicyRights = 0;
  static const int ReadPolicyRights = 1;
  static const int WritePolicyRights = 2;
  static const int ExecutePolicyRights = 4;
  static const int AllPolicyRights = 255;
}

class _PolicyInfo extends ffi.Opaque {}

typedef PolicyInfo = _PolicyInfo;

abstract class DitherMethod {
  static const int UndefinedDitherMethod = 0;
  static const int NoDitherMethod = 1;
  static const int RiemersmaDitherMethod = 2;
  static const int FloydSteinbergDitherMethod = 3;
}

class _QuantizeInfo extends ffi.Struct {
  /// desired maximum number of colors
  @ffi.Size()
  external int number_colors;

  @ffi.Size()
  external int tree_depth;

  @ffi.Int32()
  external int colorspace;

  @ffi.Int32()
  external int dither_method;

  @ffi.Int32()
  external int measure_error;

  @ffi.Size()
  external int signature;
}

typedef QuantizeInfo = _QuantizeInfo;

abstract class RegistryType {
  static const int UndefinedRegistryType = 0;
  static const int ImageRegistryType = 1;
  static const int ImageInfoRegistryType = 2;
  static const int StringRegistryType = 3;
}

abstract class ResourceType {
  static const int UndefinedResource = 0;
  static const int AreaResource = 1;
  static const int DiskResource = 2;
  static const int FileResource = 3;
  static const int HeightResource = 4;
  static const int MapResource = 5;
  static const int MemoryResource = 6;
  static const int ThreadResource = 7;
  static const int ThrottleResource = 8;
  static const int TimeResource = 9;
  static const int WidthResource = 10;
  static const int ListLengthResource = 11;
}

class _SplayTreeInfo extends ffi.Opaque {}

typedef SplayTreeInfo = _SplayTreeInfo;

class _ChannelStatistics extends ffi.Struct {
  @ffi.Size()
  external int depth;

  @ffi.Double()
  external double area;

  @ffi.Double()
  external double minima;

  @ffi.Double()
  external double maxima;

  @ffi.Double()
  external double sum;

  @ffi.Double()
  external double sum_squared;

  @ffi.Double()
  external double sum_cubed;

  @ffi.Double()
  external double sum_fourth_power;

  @ffi.Double()
  external double mean;

  @ffi.Double()
  external double variance;

  @ffi.Double()
  external double standard_deviation;

  @ffi.Double()
  external double kurtosis;

  @ffi.Double()
  external double skewness;

  @ffi.Double()
  external double entropy;

  @ffi.Double()
  external double median;
}

class _ChannelMoments extends ffi.Struct {
  @ffi.Array.multi([9])
  external ffi.Array<ffi.Double> invariant;

  external PointInfo centroid;

  external PointInfo ellipse_axis;

  @ffi.Double()
  external double ellipse_angle;

  @ffi.Double()
  external double ellipse_eccentricity;

  @ffi.Double()
  external double ellipse_intensity;
}

class _ChannelPerceptualHash extends ffi.Struct {
  @ffi.Array.multi([9])
  external ffi.Array<ffi.Double> srgb_hu_phash;

  @ffi.Array.multi([9])
  external ffi.Array<ffi.Double> hclp_hu_phash;

  @ffi.Size()
  external int number_colorspaces;

  @ffi.Array.multi([7])
  external ffi.Array<ffi.Int32> colorspace;

  @ffi.Array.multi([7, 9])
  external ffi.Array<ffi.Array<ffi.Double>> phash;

  @ffi.Size()
  external int number_channels;
}

abstract class MagickEvaluateOperator {
  static const int UndefinedEvaluateOperator = 0;
  static const int AbsEvaluateOperator = 1;
  static const int AddEvaluateOperator = 2;
  static const int AddModulusEvaluateOperator = 3;
  static const int AndEvaluateOperator = 4;
  static const int CosineEvaluateOperator = 5;
  static const int DivideEvaluateOperator = 6;
  static const int ExponentialEvaluateOperator = 7;
  static const int GaussianNoiseEvaluateOperator = 8;
  static const int ImpulseNoiseEvaluateOperator = 9;
  static const int LaplacianNoiseEvaluateOperator = 10;
  static const int LeftShiftEvaluateOperator = 11;
  static const int LogEvaluateOperator = 12;
  static const int MaxEvaluateOperator = 13;
  static const int MeanEvaluateOperator = 14;
  static const int MedianEvaluateOperator = 15;
  static const int MinEvaluateOperator = 16;
  static const int MultiplicativeNoiseEvaluateOperator = 17;
  static const int MultiplyEvaluateOperator = 18;
  static const int OrEvaluateOperator = 19;
  static const int PoissonNoiseEvaluateOperator = 20;
  static const int PowEvaluateOperator = 21;
  static const int RightShiftEvaluateOperator = 22;
  static const int RootMeanSquareEvaluateOperator = 23;
  static const int SetEvaluateOperator = 24;
  static const int SineEvaluateOperator = 25;
  static const int SubtractEvaluateOperator = 26;
  static const int SumEvaluateOperator = 27;
  static const int ThresholdBlackEvaluateOperator = 28;
  static const int ThresholdEvaluateOperator = 29;
  static const int ThresholdWhiteEvaluateOperator = 30;
  static const int UniformNoiseEvaluateOperator = 31;
  static const int XorEvaluateOperator = 32;
  static const int InverseLogEvaluateOperator = 33;
}

abstract class MagickFunction {
  static const int UndefinedFunction = 0;
  static const int ArcsinFunction = 1;
  static const int ArctanFunction = 2;
  static const int PolynomialFunction = 3;
  static const int SinusoidFunction = 4;
}

abstract class StatisticType {
  static const int UndefinedStatistic = 0;
  static const int GradientStatistic = 1;
  static const int MaximumStatistic = 2;
  static const int MeanStatistic = 3;
  static const int MedianStatistic = 4;
  static const int MinimumStatistic = 5;
  static const int ModeStatistic = 6;
  static const int NonpeakStatistic = 7;
  static const int RootMeanSquareStatistic = 8;
  static const int StandardDeviationStatistic = 9;
  static const int ContrastStatistic = 10;
}

typedef ChannelStatistics = _ChannelStatistics;
typedef ChannelMoments = _ChannelMoments;
typedef ChannelPerceptualHash = _ChannelPerceptualHash;

class _TokenInfo extends ffi.Opaque {}

/// Typedef declarations.
typedef TokenInfo = _TokenInfo;

abstract class AutoThresholdMethod {
  static const int UndefinedThresholdMethod = 0;
  static const int KapurThresholdMethod = 1;
  static const int OTSUThresholdMethod = 2;
  static const int TriangleThresholdMethod = 3;
}

class _ThresholdMap extends ffi.Opaque {}

typedef ThresholdMap = _ThresholdMap;

abstract class PathType {
  static const int UndefinedPath = 0;
  static const int MagickPath = 1;
  static const int RootPath = 2;
  static const int HeadPath = 3;
  static const int TailPath = 4;
  static const int BasePath = 5;
  static const int ExtensionPath = 6;
  static const int SubimagePath = 7;
  static const int CanonicalPath = 8;
  static const int SubcanonicalPath = 9;
  static const int BasePathSansCompressExtension = 10;
}

class _CCObjectInfo extends ffi.Struct {
  @ssize_t()
  external int id;

  external RectangleInfo bounding_box;

  external PixelInfo color;

  external PointInfo centroid;

  @ffi.Double()
  external double area;

  @ffi.Double()
  external double census;

  @ffi.Int32()
  external int merge;

  @ffi.Array.multi([16])
  external ffi.Array<ffi.Double> metric;

  @ssize_t()
  external int key;
}

typedef CCObjectInfo = _CCObjectInfo;

abstract class NoiseType {
  static const int UndefinedNoise = 0;
  static const int UniformNoise = 1;
  static const int GaussianNoise = 2;
  static const int MultiplicativeGaussianNoise = 3;
  static const int ImpulseNoise = 4;
  static const int LaplacianNoise = 5;
  static const int PoissonNoise = 6;
  static const int RandomNoise = 7;
}

class _XMLTreeInfo extends ffi.Opaque {}

typedef XMLTreeInfo = _XMLTreeInfo;

class _XImportInfo extends ffi.Struct {
  @ffi.Int32()
  external int frame;

  @ffi.Int32()
  external int borders;

  @ffi.Int32()
  external int screen;

  @ffi.Int32()
  external int descend;

  @ffi.Int32()
  external int silent;
}

typedef XImportInfo = _XImportInfo;

class _PixelWand extends ffi.Opaque {}

typedef PixelWand = _PixelWand;

class _DrawingWand extends ffi.Opaque {}

typedef DrawingWand = _DrawingWand;
typedef MagickWand = _MagickWand;

class _MagickCLI extends ffi.Opaque {}

typedef MagickCLI = _MagickCLI;
typedef MagickCommand = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<ImageInfo>,
            ffi.Int,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ffi.Pointer<ffi.Char>>,
            ffi.Pointer<ExceptionInfo>)>>;

class _PixelIterator extends ffi.Opaque {}

typedef PixelIterator = _PixelIterator;

class _WandView extends ffi.Opaque {}

typedef WandView = _WandView;
typedef DuplexTransferWandViewMethod = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<WandView>, ffi.Pointer<WandView>,
            ffi.Pointer<WandView>, ssize_t, ffi.Int, ffi.Pointer<ffi.Void>)>>;
typedef GetWandViewMethod = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<WandView>, ssize_t, ffi.Int, ffi.Pointer<ffi.Void>)>>;
typedef SetWandViewMethod = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<WandView>, ssize_t, ffi.Int, ffi.Pointer<ffi.Void>)>>;
typedef TransferWandViewMethod = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(ffi.Pointer<WandView>, ffi.Pointer<WandView>,
            ssize_t, ffi.Int, ffi.Pointer<ffi.Void>)>>;
typedef UpdateWandViewMethod = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int32 Function(
            ffi.Pointer<WandView>, ssize_t, ffi.Int, ffi.Pointer<ffi.Void>)>>;

const int _MAGICKCORE_MAGICK_BASECONFIG_H = 1;

const int MAGICKCORE_QUANTUM_DEPTH = 8;

const int MAGICKCORE_HDRI_ENABLE = 0;

const int MAGICKCORE_ZERO_CONFIGURATION_SUPPORT = 1;

const int MAGICKCORE_HAVE_TIFFCONF_H = 1;

const int MAGICKCORE_HAVE_TIFFISBIGENDIAN = 1;

const int MAGICKCORE_HAVE_TIFFMERGEFIELDINFO = 1;

const int MAGICKCORE_HAVE_TIFFISCODECCONFIGURED = 1;

const int MAGICKCORE_HAVE_TIFFREADEXIFDIRECTORY = 1;

const int MAGICKCORE_HAVE_TIFFREADGPSDIRECTORY = 1;

const int MAGICKCORE_HAVE_TIFFSETTAGEXTENDER = 1;

const String MAGICKCORE_PACKAGE_NAME = 'ImageMagick';

const int _WIN32_WINNT = 1282;

const String __FUNCTION__ = 'unknown';

const String __func__ = 'unknown';

const int MAGICKCORE_SIZEOF_VOID_P = 8;

const int MAGICKCORE_HAVE_STRTOD_L = 1;

const int MAGICKCORE_HAVE_VFPRINTF_L = 1;

const int MAGICKCORE_HAVE_VSNPRINTF = 1;

const int MAGICKCORE_HAVE_VSNPRINTF_L = 1;

const int MAGICKCORE_HAVE__ALIGNED_MALLOC = 1;

const int MAGICKCORE_HAVE_SETVBUF = 1;

const int MAGICKCORE_HAVE_TEMPNAM = 1;

const int MAGICKCORE_HAVE_RAISE = 1;

const int MAGICKCORE_HAVE_PROCESS_H = 1;

const int MAGICKCORE_HAVE_SPAWNVP = 1;

const int MAGICKCORE_HAVE_UTIME = 1;

const int MAGICKCORE_STDC_HEADERS = 1;

const int MAGICKCORE_HAVE_LOCALE_H = 1;

const int MAGICKCORE_HAVE_LOCALE_T = 1;

const int MAGICKCORE_HAVE_STRING_H = 1;

const int MAGICKCORE_HAVE_J0 = 1;

const int MAGICKCORE_HAVE_J1 = 1;

const int SETJMP_IS_THREAD_SAFE = 1;

const String MAGICKCORE_ABI_SUFFIX = 'Q8';

const int MAGICKCORE_DIR_SEPARATOR_CHAR = 92;

const String MAGICKCORE_DIR_SEPARATOR = '\\';

const int MAGICKCORE_PATH_SEPARATOR_CHAR = 59;

const String MAGICKCORE_PATH_SEPARATOR = ';';

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 't';

const String __FUNCTIONW__ = 'u';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _CRT_HAS_C11 = 0;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const String _CRT_INTERNAL_STDIO_SYMBOL_PREFIX = '';

const int _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION = 1;

const int _CRT_INTERNAL_PRINTF_STANDARD_SNPRINTF_BEHAVIOR = 2;

const int _CRT_INTERNAL_PRINTF_LEGACY_WIDE_SPECIFIERS = 4;

const int _CRT_INTERNAL_PRINTF_LEGACY_MSVCRT_COMPATIBILITY = 8;

const int _CRT_INTERNAL_PRINTF_LEGACY_THREE_DIGIT_EXPONENTS = 16;

const int _CRT_INTERNAL_PRINTF_STANDARD_ROUNDING = 32;

const int _CRT_INTERNAL_SCANF_SECURECRT = 1;

const int _CRT_INTERNAL_SCANF_LEGACY_WIDE_SPECIFIERS = 2;

const int _CRT_INTERNAL_SCANF_LEGACY_MSVCRT_COMPATIBILITY = 4;

const int WEOF = 65535;

const int BUFSIZ = 512;

const int _NFILE = 512;

const int _NSTREAM_ = 512;

const int _IOB_ENTRIES = 3;

const int EOF = -1;

const int _IOFBF = 0;

const int _IOLBF = 64;

const int _IONBF = 4;

const int L_tmpnam = 260;

const int L_tmpnam_s = 260;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int SEEK_SET = 0;

const int FILENAME_MAX = 260;

const int FOPEN_MAX = 20;

const int _SYS_OPEN = 20;

const int TMP_MAX = 2147483647;

const int TMP_MAX_S = 2147483647;

const int _TMP_MAX_S = 2147483647;

const int SYS_OPEN = 20;

const int _MAX_ITOSTR_BASE16_COUNT = 9;

const int _MAX_ITOSTR_BASE10_COUNT = 12;

const int _MAX_ITOSTR_BASE8_COUNT = 12;

const int _MAX_ITOSTR_BASE2_COUNT = 33;

const int _MAX_LTOSTR_BASE16_COUNT = 9;

const int _MAX_LTOSTR_BASE10_COUNT = 12;

const int _MAX_LTOSTR_BASE8_COUNT = 12;

const int _MAX_LTOSTR_BASE2_COUNT = 33;

const int _MAX_ULTOSTR_BASE16_COUNT = 9;

const int _MAX_ULTOSTR_BASE10_COUNT = 11;

const int _MAX_ULTOSTR_BASE8_COUNT = 12;

const int _MAX_ULTOSTR_BASE2_COUNT = 33;

const int _MAX_I64TOSTR_BASE16_COUNT = 17;

const int _MAX_I64TOSTR_BASE10_COUNT = 21;

const int _MAX_I64TOSTR_BASE8_COUNT = 23;

const int _MAX_I64TOSTR_BASE2_COUNT = 65;

const int _MAX_U64TOSTR_BASE16_COUNT = 17;

const int _MAX_U64TOSTR_BASE10_COUNT = 21;

const int _MAX_U64TOSTR_BASE8_COUNT = 23;

const int _MAX_U64TOSTR_BASE2_COUNT = 65;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int MB_LEN_MAX = 5;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -2147483648;

const int LONG_MAX = 2147483647;

const int ULONG_MAX = 4294967295;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int _I8_MIN = -128;

const int _I8_MAX = 127;

const int _UI8_MAX = 255;

const int _I16_MIN = -32768;

const int _I16_MAX = 32767;

const int _UI16_MAX = 65535;

const int _I32_MIN = -2147483648;

const int _I32_MAX = 2147483647;

const int _UI32_MAX = 4294967295;

const int _I64_MIN = -9223372036854775808;

const int _I64_MAX = 9223372036854775807;

const int _UI64_MAX = -1;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int EXIT_SUCCESS = 0;

const int EXIT_FAILURE = 1;

const int _WRITE_ABORT_MSG = 1;

const int _CALL_REPORTFAULT = 2;

const int _OUT_TO_DEFAULT = 0;

const int _OUT_TO_STDERR = 1;

const int _OUT_TO_MSGBOX = 2;

const int _REPORT_ERRMODE = 3;

const int RAND_MAX = 32767;

const int _CVTBUFSIZE = 349;

const int _MAX_PATH = 260;

const int _MAX_DRIVE = 3;

const int _MAX_DIR = 256;

const int _MAX_FNAME = 256;

const int _MAX_EXT = 256;

const int _MAX_ENV = 32767;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _DOMAIN = 1;

const int _SING = 2;

const int _OVERFLOW = 3;

const int _UNDERFLOW = 4;

const int _TLOSS = 5;

const int _PLOSS = 6;

const double _HUGE_ENUF = 1e+300;

const double INFINITY = double.infinity;

const double HUGE_VAL = double.infinity;

const double HUGE_VALF = double.infinity;

const double HUGE_VALL = double.infinity;

const double NAN = double.nan;

const int _DENORM = -2;

const int _FINITE = -1;

const int _INFCODE = 1;

const int _NANCODE = 2;

const int FP_INFINITE = 1;

const int FP_NAN = 2;

const int FP_NORMAL = -1;

const int FP_SUBNORMAL = -2;

const int FP_ZERO = 0;

const int _C2 = 1;

const int FP_ILOGB0 = -2147483648;

const int FP_ILOGBNAN = 2147483647;

const int MATH_ERRNO = 1;

const int MATH_ERREXCEPT = 2;

const int math_errhandling = 3;

const int _FE_DIVBYZERO = 4;

const int _FE_INEXACT = 32;

const int _FE_INVALID = 1;

const int _FE_OVERFLOW = 8;

const int _FE_UNDERFLOW = 16;

const int _D0_C = 3;

const int _D1_C = 2;

const int _D2_C = 1;

const int _D3_C = 0;

const int _DBIAS = 1022;

const int _DOFF = 4;

const int _F0_C = 1;

const int _F1_C = 0;

const int _FBIAS = 126;

const int _FOFF = 7;

const int _FRND = 1;

const int _L0_C = 3;

const int _L1_C = 2;

const int _L2_C = 1;

const int _L3_C = 0;

const int _LBIAS = 1022;

const int _LOFF = 4;

const int _DFRAC = 15;

const int _DMASK = 32752;

const int _DMAX = 2047;

const int _DSIGN = 32768;

const int _FFRAC = 127;

const int _FMASK = 32640;

const int _FMAX = 255;

const int _FSIGN = 32768;

const int _LFRAC = 65535;

const int _LMASK = 32767;

const int _LMAX = 32767;

const int _LSIGN = 32768;

const int _DHUGE_EXP = 1842;

const int _FHUGE_EXP = 229;

const int _LHUGE_EXP = 29490;

const int _FP_LT = 1;

const int _FP_EQ = 2;

const int _FP_GT = 4;

const int DOMAIN = 1;

const int SING = 2;

const int OVERFLOW = 3;

const int UNDERFLOW = 4;

const int TLOSS = 5;

const int PLOSS = 6;

const int CLOCKS_PER_SEC = 1000;

const int TIME_UTC = 1;

const int CLK_TCK = 1000;

const int MagickWandSignature = 2880220587;

const int MagickPathExtent = 4096;

const int MagickCoreSignature = 2880220587;

const int MaxTextExtent = 4096;

const int MagickTimeExtent = 26;

const int MaxColormapSize = 256;

const int MaxMap = 255;

const int QuantumRange = 255;

const String QuantumFormat = '%u';

const double MagickEpsilon = 1e-12;

const double MagickMaximumValue = 1.7976931348623157e+308;

const double MagickMinimumValue = 2.2250738585072014e-308;

const double QuantumScale = 0.00392156862745098;

const String MagickOffsetFormat = 'ld';

const String MagickSizeFormat = 'lu';

const int FLT_EVAL_METHOD = 0;

const int DBL_DECIMAL_DIG = 17;

const int DBL_DIG = 15;

const double DBL_EPSILON = 2.220446049250313e-16;

const int DBL_HAS_SUBNORM = 1;

const int DBL_MANT_DIG = 53;

const double DBL_MAX = 1.7976931348623157e+308;

const int DBL_MAX_10_EXP = 308;

const int DBL_MAX_EXP = 1024;

const double DBL_MIN = 2.2250738585072014e-308;

const int DBL_MIN_10_EXP = -307;

const int DBL_MIN_EXP = -1021;

const int _DBL_RADIX = 2;

const double DBL_TRUE_MIN = 5e-324;

const int FLT_DECIMAL_DIG = 9;

const int FLT_DIG = 6;

const double FLT_EPSILON = 1.1920928955078125e-7;

const int FLT_HAS_SUBNORM = 1;

const int FLT_GUARD = 0;

const int FLT_MANT_DIG = 24;

const double FLT_MAX = 3.4028234663852886e+38;

const int FLT_MAX_10_EXP = 38;

const int FLT_MAX_EXP = 128;

const double FLT_MIN = 1.1754943508222875e-38;

const int FLT_MIN_10_EXP = -37;

const int FLT_MIN_EXP = -125;

const int FLT_NORMALIZE = 0;

const int FLT_RADIX = 2;

const double FLT_TRUE_MIN = 1.401298464324817e-45;

const int LDBL_DIG = 15;

const double LDBL_EPSILON = 2.220446049250313e-16;

const int LDBL_HAS_SUBNORM = 1;

const int LDBL_MANT_DIG = 53;

const double LDBL_MAX = 1.7976931348623157e+308;

const int LDBL_MAX_10_EXP = 308;

const int LDBL_MAX_EXP = 1024;

const double LDBL_MIN = 2.2250738585072014e-308;

const int LDBL_MIN_10_EXP = -307;

const int LDBL_MIN_EXP = -1021;

const int _LDBL_RADIX = 2;

const double LDBL_TRUE_MIN = 5e-324;

const int DECIMAL_DIG = 17;

const int _SW_INEXACT = 1;

const int _SW_UNDERFLOW = 2;

const int _SW_OVERFLOW = 4;

const int _SW_ZERODIVIDE = 8;

const int _SW_INVALID = 16;

const int _SW_DENORMAL = 524288;

const int _EM_AMBIGUIOUS = 2147483648;

const int _EM_AMBIGUOUS = 2147483648;

const int _MCW_EM = 524319;

const int _EM_INEXACT = 1;

const int _EM_UNDERFLOW = 2;

const int _EM_OVERFLOW = 4;

const int _EM_ZERODIVIDE = 8;

const int _EM_INVALID = 16;

const int _EM_DENORMAL = 524288;

const int _MCW_RC = 768;

const int _RC_NEAR = 0;

const int _RC_DOWN = 256;

const int _RC_UP = 512;

const int _RC_CHOP = 768;

const int _MCW_PC = 196608;

const int _PC_64 = 0;

const int _PC_53 = 65536;

const int _PC_24 = 131072;

const int _MCW_IC = 262144;

const int _IC_AFFINE = 262144;

const int _IC_PROJECTIVE = 0;

const int _MCW_DN = 50331648;

const int _DN_SAVE = 0;

const int _DN_FLUSH = 16777216;

const int _DN_FLUSH_OPERANDS_SAVE_RESULTS = 33554432;

const int _DN_SAVE_OPERANDS_FLUSH_RESULTS = 50331648;

const int _SW_UNEMULATED = 64;

const int _SW_SQRTNEG = 128;

const int _SW_STACKOVERFLOW = 512;

const int _SW_STACKUNDERFLOW = 1024;

const int _FPE_INVALID = 129;

const int _FPE_DENORMAL = 130;

const int _FPE_ZERODIVIDE = 131;

const int _FPE_OVERFLOW = 132;

const int _FPE_UNDERFLOW = 133;

const int _FPE_INEXACT = 134;

const int _FPE_UNEMULATED = 135;

const int _FPE_SQRTNEG = 136;

const int _FPE_STACKOVERFLOW = 138;

const int _FPE_STACKUNDERFLOW = 139;

const int _FPE_EXPLICITGEN = 140;

const int _FPE_MULTIPLE_TRAPS = 141;

const int _FPE_MULTIPLE_FAULTS = 142;

const int _FPCLASS_SNAN = 1;

const int _FPCLASS_QNAN = 2;

const int _FPCLASS_NINF = 4;

const int _FPCLASS_NN = 8;

const int _FPCLASS_ND = 16;

const int _FPCLASS_NZ = 32;

const int _FPCLASS_PZ = 64;

const int _FPCLASS_PD = 128;

const int _FPCLASS_PN = 256;

const int _FPCLASS_PINF = 512;

const int _CW_DEFAULT = 524319;

const int DBL_RADIX = 2;

const int LDBL_RADIX = 2;

const int EM_AMBIGUIOUS = 2147483648;

const int EM_AMBIGUOUS = 2147483648;

const int MCW_EM = 524319;

const int EM_INVALID = 16;

const int EM_DENORMAL = 524288;

const int EM_ZERODIVIDE = 8;

const int EM_OVERFLOW = 4;

const int EM_UNDERFLOW = 2;

const int EM_INEXACT = 1;

const int MCW_IC = 262144;

const int IC_AFFINE = 262144;

const int IC_PROJECTIVE = 0;

const int MCW_RC = 768;

const int RC_CHOP = 768;

const int RC_UP = 512;

const int RC_DOWN = 256;

const int RC_NEAR = 0;

const int MCW_PC = 196608;

const int PC_24 = 131072;

const int PC_53 = 65536;

const int PC_64 = 0;

const int CW_DEFAULT = 524319;

const int SW_INVALID = 16;

const int SW_DENORMAL = 524288;

const int SW_ZERODIVIDE = 8;

const int SW_OVERFLOW = 4;

const int SW_UNDERFLOW = 2;

const int SW_INEXACT = 1;

const int SW_UNEMULATED = 64;

const int SW_SQRTNEG = 128;

const int SW_STACKOVERFLOW = 512;

const int SW_STACKUNDERFLOW = 1024;

const int FPE_INVALID = 129;

const int FPE_DENORMAL = 130;

const int FPE_ZERODIVIDE = 131;

const int FPE_OVERFLOW = 132;

const int FPE_UNDERFLOW = 133;

const int FPE_INEXACT = 134;

const int FPE_UNEMULATED = 135;

const int FPE_SQRTNEG = 136;

const int FPE_STACKOVERFLOW = 138;

const int FPE_STACKUNDERFLOW = 139;

const int FPE_EXPLICITGEN = 140;

const int OpaqueAlpha = 255;

const int TransparentAlpha = 0;

const int MagickMaxBufferExtent = 81920;

const int MagickMinBufferExtent = 16384;

const int MaxPixelChannels = 64;

const int BesselFilter = 13;

const int WelshFilter = 17;

const int HanningFilter = 5;

const String MagickLogFilename = 'log.xml';

const int EPERM = 1;

const int ENOENT = 2;

const int ESRCH = 3;

const int EINTR = 4;

const int EIO = 5;

const int ENXIO = 6;

const int E2BIG = 7;

const int ENOEXEC = 8;

const int EBADF = 9;

const int ECHILD = 10;

const int EAGAIN = 11;

const int ENOMEM = 12;

const int EACCES = 13;

const int EFAULT = 14;

const int EBUSY = 16;

const int EEXIST = 17;

const int EXDEV = 18;

const int ENODEV = 19;

const int ENOTDIR = 20;

const int EISDIR = 21;

const int ENFILE = 23;

const int EMFILE = 24;

const int ENOTTY = 25;

const int EFBIG = 27;

const int ENOSPC = 28;

const int ESPIPE = 29;

const int EROFS = 30;

const int EMLINK = 31;

const int EPIPE = 32;

const int EDOM = 33;

const int EDEADLK = 36;

const int ENAMETOOLONG = 38;

const int ENOLCK = 39;

const int ENOSYS = 40;

const int ENOTEMPTY = 41;

const int EINVAL = 22;

const int ERANGE = 34;

const int EILSEQ = 42;

const int STRUNCATE = 80;

const int EDEADLOCK = 36;

const int EADDRINUSE = 100;

const int EADDRNOTAVAIL = 101;

const int EAFNOSUPPORT = 102;

const int EALREADY = 103;

const int EBADMSG = 104;

const int ECANCELED = 105;

const int ECONNABORTED = 106;

const int ECONNREFUSED = 107;

const int ECONNRESET = 108;

const int EDESTADDRREQ = 109;

const int EHOSTUNREACH = 110;

const int EIDRM = 111;

const int EINPROGRESS = 112;

const int EISCONN = 113;

const int ELOOP = 114;

const int EMSGSIZE = 115;

const int ENETDOWN = 116;

const int ENETRESET = 117;

const int ENETUNREACH = 118;

const int ENOBUFS = 119;

const int ENODATA = 120;

const int ENOLINK = 121;

const int ENOMSG = 122;

const int ENOPROTOOPT = 123;

const int ENOSR = 124;

const int ENOSTR = 125;

const int ENOTCONN = 126;

const int ENOTRECOVERABLE = 127;

const int ENOTSOCK = 128;

const int ENOTSUP = 129;

const int EOPNOTSUPP = 130;

const int EOTHER = 131;

const int EOVERFLOW = 132;

const int EOWNERDEAD = 133;

const int EPROTO = 134;

const int EPROTONOSUPPORT = 135;

const int EPROTOTYPE = 136;

const int ETIME = 137;

const int ETIMEDOUT = 138;

const int ETXTBSY = 139;

const int EWOULDBLOCK = 140;

const String MagickPackageName = 'ImageMagick';

const String MagickCopyright = '(C) 1999 ImageMagick Studio LLC';

const int MagickLibVersion = 1808;

const String MagickLibVersionText = '7.1.0';

const int MagickLibVersionNumber = 10;

const String MagickLibAddendum = '-52 beta';

const int MagickLibInterface = 10;

const int MagickLibMinInterface = 10;

const String MagickPlatform = 'x64';

const String MagickppLibVersionText = '7.1.0';

const int MagickppLibVersionNumber = 5;

const String MagickppLibAddendum = '-52 beta';

const int MagickppLibInterface = 5;

const int MagickppLibMinInterface = 5;

const String MagickGitRevision = '27523561a:20221026';

const String MagickReleaseDate = '2022-10-26';

const String MagickAuthoritativeLicense =
    'https://imagemagick.org/script/license.php';

const String MagickAuthoritativeURL = 'https://imagemagick.org';

const String MagickHomeURL = 'file://unavailable/index.html';

const String MagickQuantumDepth = 'Q8';

const String MagickQuantumRange = '255';

const String MagickHDRISupport = '';

const String MagickVersion =
    'ImageMagick 7.1.0-52 beta Q8 x64 27523561a:20221026 https://imagemagick.org';

const int MagickImageCoderSignature = 2568;

const int MagickImageFilterSignature = 2568;

const int MagickResourceInfinity = 9223372036854775807;

const int MaximumNumberOfImageMoments = 8;

const int MaximumNumberOfPerceptualColorspaces = 6;

const int MaximumNumberOfPerceptualHashes = 7;

const int CCMaxMetrics = 16;
